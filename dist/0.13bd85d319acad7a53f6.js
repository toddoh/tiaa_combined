webpackJsonp([0,1],{

/***/ "3IRH":
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "Axhg":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:true});exports.data_init=data_init;function data_init(){var koreagov_policies=[{"theme":"gov_politics","keys":[{"name":"1: 적폐의 철저하고 완전한 청산","department":["법무부"],"category":["정치/정부"],"description":[{"name":"국정농단 조사 부처별 TFT 구성","status":"세부계획 미정","statuscode":"none"},{"name":"형사판결 확정 시 최순실 부정축재 국내외 재산 환수 추진","status":"결과 대기","statuscode":"await"},{"name":"'17년부터 문화행정의 혁신을 주도하는 민관 협의체 설치 및 운영, 백서 발간, 재발 방지책 마련","status":"진행중","statusdesc":"지난 정부 국정농단과 블랙리스트 여파로 추락한 신뢰를 회복하고 침체된 조직의 분위기를 쇄신하기 위해 외부위원 8인과 내부위원 7인으로 구성된 조직문화혁신위원회를 발족함","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841466&pageIndex=11&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="}],"keywords":["국정농단","최순실","블랙리스트","최순실재산환수"]},{"name":"2: 반부패 개혁으로 청렴한국 실현","department":["권익위","법무부"],"category":["정치/정부"],"description":[{"name":"'17년 반부패 협의회 설치ᆞ운영, '18년 독립적 반부패 총괄기구 '국가청렴위원회' 설치","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 공익신고자 보호 강화, ’18년부터 국민 소송제도 도입ᆞ시행","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 5대 중대 부패범죄(뇌물, 알선수재, 알선수뢰, 배임, 횡령) 처벌기준 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 국민중심 반부패 청렴정책 수립을 위한 민관협의체 구성","status":"세부계획 미정","statuscode":"none"},{"name":"’19년부터 민관이 공동 참여하는 시민공익위원회 설치","status":"세부계획 미정","statuscode":"none"}],"keywords":["반부패","국가청렴위원회","공익신고자","부패범죄","시민공익위원회"]},{"name":"5: 365일 국민과 소통하는 광화문 대통령","department":["행자부"],"category":["정치/정부"],"description":[{"name":"‘광화문대통령시대위원회(가칭)’를 구성하여 대통령 집무실 이전 계획 수립","status":"세부계획 미정","statuscode":"none"},{"name":"대통령의 24시 등 정부 주요인사 일정 공개 추진 - ’17년 하반기부터 정보공개포털(open.go.kr)을 통해 실시간 통합 공개","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 인사추천의 투명성 제고, 고위공직자 검증기준 구체화","status":"1기 인사 이후 적용 예정","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=008&aid=0003895213"}],"keywords":["광화문","집무실","주요인사 일정","인사추천","고위공직자"]},{"name":"7: 국민주권적 개헌 및 국민참여 정치개혁","department":["국조실"],"category":["개헌","정치/정부"],"description":[{"name":"국회 개헌특위 논의 참여 및 지원","status":"국회 2017년 8월 공개토론 개시","statuscode":"none","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=016&aid=0001271336"},{"name":"국민투표 확대","status":"세부계획 미정","statuscode":"none"},{"name":"국민발안제와 국회의원에 대한 국민소환제 도입","status":"법안 발의 (국민소환제: 민주-박주민)","statuscode":"congress","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=014&aid=0003833797"},{"name":"18세로 선거연령 하향","status":"세부계획 미정","statuscode":"none"},{"name":"투표시간 연장","status":"세부계획 미정","statuscode":"none"},{"name":"국회의원 권역별 정당명부 비례대표제 도입","status":"세부계획 미정","statuscode":"none"},{"name":"대통령 결선투표제 도입","status":"세부계획 미정","statuscode":"none"},{"name":"정당 가입 연령제한 폐지","status":"세부계획 미정","statuscode":"none"},{"name":"공무원ᆞ교사의 정치 참여 보장","status":"세부계획 미정","statuscode":"none"},{"name":"장애인ᆞ노령자 투표편의 제공 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["개헌","국민투표","국민발안제","국민소환제","선거연령","투표시간","비례대표제","결선투표제","정치참여"]},{"name":"8: 열린 혁신 정부, 서비스하는 행정","department":["행자부"],"category":["정치/정부"],"description":[{"name":"’17년 하반기 정부혁신플랫폼 ‘광화문 1번가’ 오픈","status":"완료/플랫폼 개시","statuscode":"done","statuslink":"https://www.gwanghwamoon1st.go.kr"},{"name":"’18년까지 정보공개ᆞ기록관리제도 전면 개편","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 사회혁신 관련 기본법(가칭) 제정","status":"세부계획 미정","statuscode":"none"},{"name":"’19년까지 사회혁신기금 및 사회투자재단 설치","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 온라인서비스ᆞ정책정보를 한곳에서 제공하는 ‘정부24’ 개통","status":"완료/서비스 개시","statuscode":"done","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=081&aid=0002840894"},{"name":"’19년부터 인공지능 활용 스마트 서비스 제공","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 Active-X 완전 제거 및 공인인증절차 폐지","status":"세부계획 미정","statuscode":"none"},{"name":"’19년부터 공공빅데이터센터 설치ᆞ운영","status":"세부계획 미정","statuscode":"none"}],"keywords":["정부혁신플랫폼","정보공개","사회혁신","정부24","인공지능","ActiveX","공인인증","공공빅데이터"]},{"name":"9: 적재적소, 공정한 인사로 신뢰받는 공직사회 구현","department":["인사처"],"category":["정치/정부"],"description":[{"name":"’17년부터 5대 비리 관련 고위직 임용기준 강화 및 인사청문제도 개선","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=277&aid=0004006960"},{"name":"’18년까지 인사고충 심사구제와 위법 명령ᆞ지시 복종 거부 근거 마련","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 재산 공개ᆞ심사 강화, 퇴직자 접촉 등 행위제한 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’19년까지 공직자윤리위원회 위원 구성 및 심사 결과 공개범위 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 여성ᆞ이공계 관리자 임용목표 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’19년까지 공직 내 비정규직에 대한 인사ᆞ보수상 불합리한 차별 해소","status":"가이드라인 발표","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=056&aid=0010483766"},{"name":"’18년부터 민간인만 임용 가능한 경력개방형직위 단계적 확대","status":"세부계획 미정","statuscode":"none"},{"name":"전문직공무원제도 적용대상 부처ᆞ계급 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 육아시간ᆞ휴직수당 및 대체공휴일 확대","status":"세부계획 미정","statuscode":"none"}],"keywords":["5대비리","고위직","인사청문","인사고충","재산공개","공직자윤리위원회","여성","비정규직","경력개방형직위","전문직공무원제도","육아시간","휴직수당","대체공휴일"]},{"name":"10: 해외 체류 국민 보호 강화 및 재외동포 지원 확대","department":["외교부"],"category":["정치/정부","외교"],"description":[{"name":"안전정보 적시 제공을 통한 재외국민 사건사고 예방","status":"완료","statusdesc":"해외를 방문 또는 체류 예정인 우리 국민에게 국가별 해외안전여행 정보를 제공하는 카카오톡 플러스친구 ‘해외안전여행’ 서비스를 23일부터 실시. 카카오톡 플러스친구 서비스를 이용해 방문하고자 하는 국가명을 입력할 경우 해당 국가의 ▲여행경보단계 ▲공관 긴급연락처 ▲주요 유의사항 등의 정보를 확인할 수 있다. 플러스 친구 서비스는 규칙에 따라 일정한 정보를 찾아주는 ‘채팅봇’을 활용, 채팅창에 국가명 입력 시 자동적으로 해외안전여행정보 답변을 제공한다.","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841461&pageIndex=11&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"재외동포 대상 한국 언어ᆞ역사ᆞ문화 교육 및 모국 초청 교류 등 정체성 함양 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 재외국민을 위한 통합전자행정시스템(G4K) 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 보안성이 강화된 차세대 전자여권 도입","status":"세부계획 미정","statuscode":"none"}],"keywords":["재외국민","재외동포","전자여권"]},{"name":"12: 사회적 가치 실현을 선도하는 공공기관","department":["기재부"],"category":["일자리","정치/정부"],"description":[{"name":"’17년부터 단계적으로 공공기관 비정규직의 정규직 전환","status":"진행중","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=056&aid=0010483766"},{"name":"’17년에 공공기관 성과연봉제 관련 조치 폐기","status":"완료","statuscode":"done","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=018&aid=0003886476"},{"name":"’19년까지 공공기관 공시시스템의 정보제공 내용을 대폭 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 편람 수정을 통해 고용친화적 평가를 실현","status":"진행중/내년 편람 개정시 반영 예정","statuscode":"done","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=018&aid=0003886476"},{"name":"공공기관 운영에 관한 법률 개정 등을 통해 ’18년부터 공공기관 감사 독립성 강화 및 노동이사제 도입","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공기관","비정규직","정규직","성과연봉제","노동이사제"]},{"name":"13: 국민의, 국민을 위한 권력기관 개혁","department":["법무부","경찰청","감사원","국정원"],"category":["정치/정부"],"description":[{"name":"’17년까지 고위공직자비리수사처 설치 등 관련 법령 제정","status":"논의중","statuscode":"discussing"},{"name":"’17년까지 경찰권 분산 및 인권친화적 경찰 확립 실행 방안 등과 연계하여 수사권 조정안 마련","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=057&aid=0001156058"},{"name":"’18년부터 수사권 조정안 시행","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=057&aid=0001156058"},{"name":"’17년부터 검사의 이의제기권 행사 절차 구체화 및 내부 조직문화 개선","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 검찰총장후보추천위원회와 검찰인사위원회의 중립성・독립성 확보를 위한 제도 정비","status":"세부계획 미정","statuscode":"none"},{"name":"법무부 탈검찰화","status":"진행중","statusdesc":"법무부는 확고하고 신속하게 ‘법무부 탈검찰화’를 추진하기 위해 외부 인사로 구성된 법무부 ‘법무·검찰개혁위원회’에서 심도있게 논의해 마련할 권고안을 토대로 공수처 법안에 대한 법무부의 입장을 마련하고, 관련 법안의 국회 논의를 적극 지원해 법안의 신속한 통과와 시행을 추진한다. 또한 직제를 개정해 실·국·본부장 7개 직위 중 검찰국장을 제외한 모든 직위에 검사 외에 고위공무원단에 속하는 일반직 공무원도 보할 수 있도록 했다.","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841624&pageIndex=3&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"’17년부터 자치경찰 관련 법률을 제・개정","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 경찰위원회 실질화를 통한 민주적 통제 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 경찰진압장비 사용 요건 법규화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 수시보고 개선, 감사위원회의 의결 공개 등 투명성 강화를 위한 감사원법 개정","status":"세부계획 미정","statuscode":"none"},{"name":"국정원을 해외안보정보원으로 개편","status":"입법 필요","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=421&aid=0002855830"}],"keywords":["고위공직자비리수사처","경찰권","수사권","이의제기권","검찰총장후보추천위원회","검찰인사위원회","경찰위원회","경찰진압장비","감사원법","국정원","해외안보정보원"]},{"name":"74: 획기적인 자치분권 추진과 주민 참여의 실질화","department":["행자부"],"category":["정치/정부"],"description":[{"name":"자치분권 기반 확보 - ’17년 하반기 제2국무회의 시범운영 후 제도화 추진, ’18년 헌법 개정으로 실질적 자치분권 기반 조성","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=088&aid=0000500412"},{"name":"’18년부터 포괄적 사무이양을 위한 지방이양일괄법을 단계별로 제정하여 국가 기능의 획기적 지방 이양 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 주민투표 확대, 주민소환 요건 완화, 조례개폐청구 요건 세부화 등을 추진하여 주민 직접참여제도 확대","status":"진행중","statusdesc":"행안부는 제도 개선을 위해 ‘스마트 주민조례개폐청구’ 시스템을 개발하고 지방자치법 시행령에 관련근거를 마련해 2018년부터 주민이 공인인증서를 활용해 온라인으로 조례개폐청구안에 손쉽게 서명을 할 수 있도록 할 계획.","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841480&pageIndex=10&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"’18년까지 주민자치회 제도개선안 마련 및 법률 개정, ’17년에 주민중심 행정복지서비스 혁신 추진계획 수립 및 추진체계 구축","status":"세부계획 미정","statuscode":"none"}],"keywords":["자치분권","제2국무회의","헌법","포괄적사무이양","지방이양일괄법","주민투표","주민소환","조례개폐청구","주민자치회","행정복지서비스"]},{"name":"75: 지방재정 자립을 위한 강력한 재정분권","department":["행자부","기재부"],"category":["정치/정부"],"description":[{"name":"국세-지방세 비율을 7:3을 거쳐 장기적으로 6:4 수준까지 개선","status":"세부계획 미정","statuscode":"none"},{"name":"지자체간 재정격차 완화 및 균형발전 추진 - 지방교부세율 상향 및 지역상생발전기금 확대, 국고보조사업 정비","status":"세부계획 미정","statuscode":"none"},{"name":"지방소비세 비중 확대, 지방소득세 규모 확대, 국가-지방 간 기능 재조정, 지방세 신세원 발굴, 지방세 비과세ᆞ감면율 15% 수준 관리","status":"세부계획 미정","statuscode":"none"},{"name":"지방세 및 지방세외수입 체납징수율 제고, 예산낭비사업 근절을 위한 제도 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"고향사랑 기부제법(가칭) 제정을 통한 지방재정 보완 및 지역경제 활성화","status":"세부계획 미정","statuscode":"none"},{"name":"지자체 핵심정책ᆞ사업까지 주민참여예산제 확대를 통해 주민에 의한 자율통제 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["국세","지방세","지방소비세","지방소득세","지자체","지방교부세율","지역상생발전기금","지방세외수입","체납징수율","상습체납자","고향사랑기부제법","주민참여예산제"]},{"name":"76: 교육 민주주의 회복 및 교육자치 강화","department":["교육부"],"category":["교육","정치/정부"],"description":[{"name":"’17년 국정 역사교과서 폐지(5.31 확정) 및 검정 역사교과서 개발방안 마련 - 발행체제 연구ᆞ의견수렴(’18년)을 통해 자유발행제 단계적 도입(’19년~)","status":"진행중 (국정교과서 폐지/새 교과서 2020년으로 연기)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=025&aid=0002739559"},{"name":"’18년부터 국립대 총장후보자 선정방식과 재정지원사업 연계 폐지 및 사학비리 근절을 위한 사립학교법령 개정 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 대통령 직속 자문기구인 ‘국가교육회의’를 설치하고, 중장기 교육정책 수립을 위한 국가교육위원회 설치 추진(’19년)","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008083961"},{"name":"학교운영위원회 학생ᆞ학부모 자치활동 활성화 방안 마련(’17년), 유치원 포함 초중고 학교 학부모회 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"찾아가는 정책 설명회 등 현장 소통 기회를 확산 하고, 교육현장과의 교류 활성화 및 교육정책이력제 확대(’17년)","status":"세부계획 미정","statuscode":"none"}],"keywords":["국정역사교과서","검정역사교과서","자유발행제","국립대","총장후보자","재정지원사업","사학비리","사립학교법령","국가교육회의","국가교육위원회","교육부","학교운영위원회","교육정책이력제"]},{"name":"77: 세종특별자치시 및 제주특별자치도 분권모델의 완성","department":["행자부"],"category":["정치/정부"],"description":[{"name":"세종특별자치시 - 행자부ᆞ과기부 등 세종시 추가 이전","status":"법률안 개정중 (민주-이해찬/조승래)","statuscode":"congress","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009447336"},{"name":"제주특별자치도 - ’18년까지 분권과제 및 지방이양사무 발굴ᆞ이양 추진, ’19년까지 특별법 개정 추진","status":"세부계획 미정","statuscode":"none"},{"name":"제주특별자치도 - 환경ᆞ투자ᆞ관광교통ᆞ문화, 미래성장동력 분야 사무 등 지방 이양","status":"세부계획 미정","statuscode":"none"},{"name":"제주특별자치도 - 자치경찰 권한, 주민자치위원회 기능, 의회 및 조직권한, 재정ᆞ세제 관련 권한 등 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["세종특별자치시","제주특별자치도","행자부","과기부","행정수도","분권과제","지방이양사무"]},{"name":"78: 전 지역이 고르게 잘사는 국가균형발전","department":["산업부","국토부","행자부"],"category":["정치/정부","경제"],"description":[{"name":"국가균형발전위원회 명칭 복원 및 위상 강화를 통해 강력한 균형발전 지원체계를 구축하고 지역의 자율ᆞ책임성 강화","status":"세부계획 미정","statuscode":"none"},{"name":"세종시 - 명실상부한 행정중심복합도시의 기능을 수행하기 위해 중앙행정기관 추가 이전","status":"세부계획 미정","statuscode":"none"},{"name":"서울-세종 고속도로 조기 구축 등 추진","status":"진행중 (재정사업 전환, 구리~안성 구간 공사시작)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=057&aid=0001155079"},{"name":"이미 조성된 혁신도시 중심으로 신산업 테스트베드 구축, 기업유치 등을 통해 혁신클러스터 조성","status":"세부계획 미정","statuscode":"none"},{"name":"속도감 있는 새만금 사업추진을 위해 공공주도 매립, 국제공항ᆞ 신항만 등 물류교통망 조기 구축","status":"세부계획 미정","statuscode":"none"},{"name":"업종 고도화를 넘어 도시재생과 연계한 창업ᆞ혁신, 문화ᆞ복지공간까지 어우러진 산업단지 혁신 2.0 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["국가균형발전위원회","균형발전","세종특별자치시","행정중심복합도시","중앙행정기관","서울세종고속도로","혁신도시","혁신클러스터","새만금","물류교통망","산업단지혁신2.0"]},{"name":"83: 지속가능한 농식품 산업 기반 조성","department":["농식품부"],"category":["농산어촌","청년","정치/정부"],"description":[{"name":"’18년 청년농업인 영농정착지원제 도입, 귀농ᆞ귀촌 임대주택단지 조성 등 영농창업 초기 생활안정ᆞ정착지원 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 6차산업형 친환경농업지구 100개소 조성 등 친환경ᆞ동물복지 농축산업 확산","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 가축질병 방역체계 강화를 위한 보험제도 도입, ’20년 한국형 구제역 백신 생산, ’22년까지 깨끗한 축산농장 5천호 조성 추진","status":"추진중 (가축질병보험 18년 시범운영)","statuscode":"none"},{"name":"’22년까지 스마트팜 시설원예 7천ha, 축산 5천호 보급 및 관련 R&D 투자 확대","status":"세부계획 미정","statuscode":"none"},{"name":"농식품바우처 시범사업, 유기ᆞ이력제 수산물 학교급식 확대, GAP 및 HACCP 인증농가 확대 등","status":"세부계획 미정","statuscode":"none"},{"name":"’20년 기능성식품산업육성법 제정 등 기능성식품, 발효식품 육성","status":"세부계획 미정","statuscode":"none"},{"name":"대통령 직속 농어업ᆞ농어촌 특별위원회 설치 추진 및 농어업회의소 법적 근거 마련, 지방분권형 농정 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["청년농업인","영농정착지원제","귀농","귀촌","영농창업","친환경농업지구","가축질병방역체계","한국형구제역백신","깨끗한축산농장","스마트팜","농식품바우처","유기이력제수산물","기능성식품산업육성법","대통령직속농어업농어촌특별위원회","농어업회의소"]},{"name":"87: 국방개혁 및 국방 문민화의 강력한 추진","department":["국방부"],"category":["안보/국방","정치/정부","인권"],"description":[{"name":"개혁 추동력 확보를 위해 대통령 직속 ‘국방개혁특별위원회’ 설치 추진, 핵심과제를 재선정하여 ‘국방개혁 2.0’ 수립","status":"세부계획 미정","statuscode":"none"},{"name":"국방개혁특위 - 상부지휘구조 개편 및 50만 명으로의 병력 감축 등 인력구조 개편","status":"세부계획 미정","statuscode":"none"},{"name":"병역자원 부족과 전투력 손실 방지 등에 대한 대책을 강구하여 병 복무기간을 18개월로 단축 추진","status":"세부계획 미정","statuscode":"none"},{"name":"부족 병역자원 확보를 위해 전환ᆞ대체복무 지원인력 조정 및 장교ᆞ 부사관 인력 확보 체계 개선","status":"세부계획 미정","statuscode":"none"},{"name":"문민통제 원칙 구현을 위해 국방부ᆞ방사청에 대한 실질적 문민화 방안 마련 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 사법 개혁 - 심판관제도 폐지, 군판사 인사위원회 설치 등을 통해 장병의 공정한 재판 및 인권 보장","status":"일부 진행중 (개정 군사법원법 시행)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=018&aid=0003869061"},{"name":"현역 감축 및 복무기간 단축을 보완하기 위해 육군 동원전력사령부 창설 검토, 예비군훈련장 과학화 등 예비전력 강화도 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 공항 및 군사시설 이전을 통해 국방력 강화 및 주민 불편 해소","status":"세부계획 미정","statuscode":"none"}],"keywords":["국방개혁","국방개혁특별위원회","상부지휘구조","병력감축","병복무기간","전환대체복무","장교부사관","문민통제","국방부","방사청","심판관제도","군판사인사위원회","군사법개혁","육군동원전력사령부","예비군훈련장과학화","군공항","군사시설"]},{"name":"93: 남북교류 활성화를 통한 남북관계 발전","department":["통일부"],"category":["북한","문화","정치/정부"],"description":[{"name":"체육ᆞ종교 분야 남북교류를 재개하고, 민족동질성 회복을 위한 겨레말큰사전 편찬 및 개성만월대 발굴사업 등 추진 - 평창동계올림픽은 북한 참가 지원 등으로 평화올림픽으로 추진","status":"일부 진행중 (평창올림픽 북 참가요청)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=032&aid=0002805180"},{"name":"남북교류협력 - 학술ᆞ역사ᆞ언어ᆞ교육ᆞ문화유산 등 다양한 분야의 사회문화 교류협력 확대 및 제도화","status":"세부계획 미정","statuscode":"none"},{"name":"남북교류협력 - 교류협력 네트워크 확대 및 내실화, 지자체와 민간단체의 자율적인 활동 공간 확보 지원(지자체 차원 교류협력 등) 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"남북교류협력법 등 관련 규정 정비, 인터넷에 기반한 남북교류협력시스템 개선 등 법‧제도화를 통한 교류협력기반 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["남북교류","개성만월대","겨레말큰사전","평창동계올림픽","남북교류협력","남북교류협력법","남북교류협력시스템"]},{"name":"94: 통일 공감대 확산과 통일국민협약 추진","department":["통일부"],"category":["북한","문화","정치/정부"],"description":[{"name":"국회 협의ᆞ국민 소통 기반 아래 통일국민협약 체결 추진, ’22년까지 협약 체결 및 이행ᆞ소통체계 등 제도 기반도 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 매년 단계별로 광역시도에 통일센터 설치","status":"세부계획 미정","statuscode":"none"},{"name":"국내외 전문가 양성 프로그램을 연구개발, 단계적 으로 확대 실시하여 통일 대비 인적 기반 및 역량 강화","status":"세부계획 미정","statuscode":"none"},{"name":"범국민 통일교육 거버넌스 구축ᆞ운영으로 통일교육의 주요 원칙에 관한 사회적 합의 도출 및 미래세대의 통일인식 제고","status":"세부계획 미정","statuscode":"none"}],"keywords":["퉁일국민협약","통일","통일센터","통일전문가","통일교육"]},{"name":"96: 국민외교 및 공공외교를 통한 국익 증진","department":["외교부"],"category":["외교","정치/정부"],"description":[{"name":"국민외교시스템 구축 - 외교정책에 대한 대국민 소통ᆞ참여 기능 강화를 위해 온ᆞ오프라인 플랫폼 구축, 여론조사 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"자유로운 소통이 가능한 조직문화 구축, 외교 역량 검증 강화 등을 통한 인사관리 신뢰 확보, 외교인력 확충 및 전문성 강화","status":"진행중 (혁신태스크포스 외무자문위원회 발족)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=003&aid=0008101144"},{"name":"민주주의ᆞ인권ᆞ테러리즘 등 글로벌 이슈 관련 기여 확대, 우리 국민의 국제기구 진출 확대 및 정부 차원의 지원체계 강화","status":"세부계획 미정","statuscode":"none"},{"name":"공공외교 통합조정기구로서 공공외교위원회 구성 추진","status":"세부계획 미정","statuscode":"none"},{"name":"제1차 5개년 공공외교 기본계획 수립 등을 통해 일관되고 체계적인 공공외교 수행 도모","status":"세부계획 미정","statuscode":"none"}],"keywords":["국민외교","국민외교시스템","외교역량","국제기구","공공외교위원회"]},{"name":"97: 주변 4국과의 당당한 협력외교 추진","department":["외교부"],"category":["외교","안보/국방","과거사","정치/정부","경제","FTA"],"description":[{"name":"정상 방미 등 활발한 고위급 외교 전개를 통한 한미동맹을 호혜적 책임동맹관계로 지속 심화ᆞ발전","status":"진행중 (한미정상회담 완료, 국방장관회담 추진중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009445984"},{"name":"미 조야를 대상으로 한 활발한 대미외교 전개로 한미동맹 저변 공고화, 연합방위태세 강화 및 한ᆞ미 간 현안 합리적 해결","status":"세부계획 미정","statuscode":"none"},{"name":"한ᆞ중 양국 정상 및 고위급 간 활발한 교류ᆞ대화, 사드 문제 관련 소통 강화로 신뢰 회복을 통한 실질적 한중 전략적 협력 동반자관계 내실화","status":"추진중 (2017.8 예정)","statuscode":"none","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488642"},{"name":"북핵문제 해결을 위한 한ᆞ중협력 강화, 한ᆞ중 FTA 강화 등을 통한 경제협력 확대, 미세먼지 대응 등 국민체감형 사안 관련 협력 강화","status":"일부 진행중","statusdesc":"한·중·일 환경장관회의, 미세먼지 대응 협력 등 논의 - 중국과는 미세먼지를 비롯한 대기오염 대응 정책·연구·기술 협력강화, 자연환경, 물, 토양 등 환경 전반에 걸친 향후 5년 간(2018~2022년)의 한·중 환경협력계획과 양국간 환경산업·기술 협력에 대해 의견을 나눈다. 일본과는 양국 간 미세먼지(PM2.5) 공동연구 협력에 대해 논의하고, 미국의 파리협정 탈퇴로 그 중요성이 부각되고 있는 기후변화 대응에 대하여 입장을 공유할 계획이다.","statuscode":"partiallywip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841495&pageIndex=9&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"독도 및 역사왜곡에는 단호히 대응하는 등 역사를 직시하면서 한ᆞ일 간 미래지향적 성숙한 협력동반자 관계 발전 - 과거사와 북한 핵ᆞ미사일 대응, 양국 간 실질협력과는 분리 대응","status":"세부계획 미정","statuscode":"none"},{"name":"위안부 문제는 피해자와 국민들이 동의할 수 있는 해결방안 도출","status":"진행중 (위안부 태스크포스 발족)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488248"},{"name":"북핵문제 해결을 위한 전략적 소통 및 한ᆞ러 경제협력 강화를 통해 한ᆞ러 전략적 협력동반자 관계의 실질적 발전 추진 - 정상교류를 포함 고위급 교류 활성화, 극동지역 개발 협력 확대, 북극ᆞ에너지ᆞFTA 등 미래성장동력 확충 등","status":"세부계획 미정","statuscode":"none"}],"keywords":["주변4국","협력외교","한미동맹","대미외교","한미연합방위","한중","북핵","미세먼지","한일","역사왜곡","독도","과거사","위안부","한러","경제협력","극동지역","북극","에너지","FTA"]}]},{"theme":"pasthistory","keys":[{"name":"3:  국민 눈높이에 맞는 과거사 문제 해결","department":["행자부"],"category":["과거사"],"description":[{"name":"5.18광주민주화운동 진상 규명 관련법 제정, 독립적 진상규명위원회 설치","status":"법안 발의 (7/11, 국민의당 최경환 의원)","statuscode":"congress","statuslink":"http://news.mk.co.kr/newsRead.php?year=2017&no=465683"},{"name":"제주4.3 완전 해결 암매장 유해 발굴","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 상반기 중 진실화해위원회 활동 재개","status":"법안 계류중 (민주/국민 발의)","statuscode":"congress","statuslink":"http://www.hani.co.kr/arti/politics/politics_general/803724.html"},{"name":"'19년에 과거사 통합재단 설립 기본계획 수립","status":"세부계획 미정","statuscode":"none"}],"keywords":["5.18","광주민주화운동","진상규명위원회","제주4.3","진실화해위원회","과거사"]},{"name":"97: 주변 4국과의 당당한 협력외교 추진","department":["외교부"],"category":["외교","안보/국방","과거사","정치/정부","경제","FTA"],"description":[{"name":"정상 방미 등 활발한 고위급 외교 전개를 통한 한미동맹을 호혜적 책임동맹관계로 지속 심화ᆞ발전","status":"진행중 (한미정상회담 완료, 국방장관회담 추진중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009445984"},{"name":"미 조야를 대상으로 한 활발한 대미외교 전개로 한미동맹 저변 공고화, 연합방위태세 강화 및 한ᆞ미 간 현안 합리적 해결","status":"세부계획 미정","statuscode":"none"},{"name":"한ᆞ중 양국 정상 및 고위급 간 활발한 교류ᆞ대화, 사드 문제 관련 소통 강화로 신뢰 회복을 통한 실질적 한중 전략적 협력 동반자관계 내실화","status":"추진중 (2017.8 예정)","statuscode":"none","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488642"},{"name":"북핵문제 해결을 위한 한ᆞ중협력 강화, 한ᆞ중 FTA 강화 등을 통한 경제협력 확대, 미세먼지 대응 등 국민체감형 사안 관련 협력 강화","status":"일부 진행중","statusdesc":"한·중·일 환경장관회의, 미세먼지 대응 협력 등 논의 - 중국과는 미세먼지를 비롯한 대기오염 대응 정책·연구·기술 협력강화, 자연환경, 물, 토양 등 환경 전반에 걸친 향후 5년 간(2018~2022년)의 한·중 환경협력계획과 양국간 환경산업·기술 협력에 대해 의견을 나눈다. 일본과는 양국 간 미세먼지(PM2.5) 공동연구 협력에 대해 논의하고, 미국의 파리협정 탈퇴로 그 중요성이 부각되고 있는 기후변화 대응에 대하여 입장을 공유할 계획이다.","statuscode":"partiallywip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841495&pageIndex=9&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"독도 및 역사왜곡에는 단호히 대응하는 등 역사를 직시하면서 한ᆞ일 간 미래지향적 성숙한 협력동반자 관계 발전 - 과거사와 북한 핵ᆞ미사일 대응, 양국 간 실질협력과는 분리 대응","status":"세부계획 미정","statuscode":"none"},{"name":"위안부 문제는 피해자와 국민들이 동의할 수 있는 해결방안 도출","status":"진행중 (위안부 태스크포스 발족)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488248"},{"name":"북핵문제 해결을 위한 전략적 소통 및 한ᆞ러 경제협력 강화를 통해 한ᆞ러 전략적 협력동반자 관계의 실질적 발전 추진 - 정상교류를 포함 고위급 교류 활성화, 극동지역 개발 협력 확대, 북극ᆞ에너지ᆞFTA 등 미래성장동력 확충 등","status":"세부계획 미정","statuscode":"none"}],"keywords":["주변4국","협력외교","한미동맹","대미외교","한미연합방위","한중","북핵","미세먼지","한일","역사왜곡","독도","과거사","위안부","한러","경제협력","극동지역","북극","에너지","FTA"]}]},{"theme":"media","keys":[{"name":"4: 표현의 자유와 언론의 독립성 신장","department":["방통위"],"category":["언론"],"description":[{"name":"공영방송 지배구조의 합리적 개선","status":"세부계획 미정","statuscode":"none"},{"name":"보도ᆞ제작ᆞ편성 자율성 확보를 위해 ’17년 지상파 재허가 시 관련 사항을 엄격하게 심사하고 ’18년 ‘편성규약 가이드라인’ 마련","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 언론인 해직 관련 재발 방지 방안 마련, ’18년까지 해직언론인 복직ᆞ명예회복 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 온라인 게시물 임시조치 제도 개선","status":"세부계획 미정","statuscode":"none"}],"keywords":["공영방송","지배구조","지상파","재허가","언론인","해직","임시조치"]},{"name":"70: 미디어의 건강한 발전","department":["방통위"],"category":["언론"],"description":[{"name":"’17년 미디어교육 종합추진계획 수립","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 시청자미디어센터 확충 및 시청자 참여프로그램 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 1백만 인터넷 윤리교육 실시","status":"세부계획 미정","statuscode":"none"},{"name":"’19년 스마트 수어방송 상용화, ’21년까지 저소득층 시청각장애인 방송수신기 100% 보급","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 지상파 사업자 재허가 절차 등을 통한 지역방송 활성화 기반 마련, 방송콘텐츠 제작ᆞ유통 지원 및 공동체라디오방송 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 한류콘텐츠 해외진출 다변화 추진","status":"세부계획 미정","statuscode":"none"},{"name":"1인미디어ᆞ중소콘텐츠제작자 및 UHDᆞ융합형 콘텐츠 제작 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 방송광고제도 개선방안 마련 - ’19년까지 방송광고판매ᆞ협찬제도 합리화 및 투명성 제고","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 방송사-외주사 등 방송시장 상생협력 방안 마련","status":"진행중","statusdesc":"불공정실태 조사중","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841032&pageIndex=26&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="}],"keywords":["미디어교육","미디어","시청자미지어센터","인터넷윤리교육","스마트수어방송","저소득층시청각장애인방송수신기","지상파사업자재허가","지역방송","공동체라디오방송","한류콘텐츠","1인미디어","중소콘텐츠제작자","방송광고제도","방송시장","상생협력"]}]},{"theme":"humanrights","keys":[{"name":"6: 국민인권을 우선하는 민주주의 회복과 강화","department":["법무부","행자부","인권위"],"category":["인권","개헌"],"description":[{"name":"’09년 조직 축소 이전 수준으로 인권위 인원ᆞ조직 등 확대 - 개헌을 통한 헌법기관화","status":"추진중","statuscode":"none"},{"name":"인권기본법 제정","status":"인권위 헌법기관화 연동 과제","statuscode":"none"},{"name":"군인권 보호관 신설","status":"인권위 헌법기관화 연동 과제","statuscode":"none"},{"name":"’18년부터 긴급통신제한조치 사후허가 필수화","status":"세부계획 미정","statuscode":"none"},{"name":"’19년부터 형사공공변호인 제도 단계적 도입","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 개인정보 보호 거버넌스 강화","status":"세부계획 미정","statuscode":"none"},{"name":"‘시민사회발전위원회’ 설치","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 전국 단위 민간 자원봉사 인프라 확충","status":"세부계획 미정","statuscode":"none"}],"keywords":["인권","인권위","긴급통신제한조치","형사공공변호인","개인정보","시민사회발전위원회"]},{"name":"63: 노동존중 사회 실현","department":["고용부"],"category":["노동","인권"],"description":[{"name":"노사정 사회적 대화로 노동존중 사회 기본계획 수립(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"노동기본권 신장을 위한 법ᆞ제도 개선 - ’17년에 2대 지침 폐지, 공공기관 성과연봉제 관련 조치 폐기, 위법ᆞ불합리한 단체협약 시정지도 등 개선","status":"진행중 (공공기관 성과연봉제 폐기)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=057&aid=0001156199"},{"name":"ILO 핵심협약 비준 - 강제노동에 관한 제29호 및 제105호 협약, 결사의 자유 및 단결권・단체교섭권 보호에 관한 제87호 및 제98호 협약 비준 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 근로자 대표제도 기능 강화, 중소ᆞ영세 미조직 노동자 권익 보호를 위한 지원체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"체불근로자 생계보호 강화 및 체불사업주 제재 강화, 부당해고 구제절차 개선(~’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"학교 노동인권교육 활성화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 직장 내 괴롭힘 으로부터 근로자 보호를 위한 종합대책 마련ᆞ시행","status":"세부계획 미정","statuscode":"none"}],"keywords":["노사정사회적대화","공공기관","성과연봉제","단체협약","강제노동","결사의자유","단체교섭권","노사관계","근로자대표제도","노동자","체불근로자","체불사업주","부당해고","노동인권교육","직장내괴롭힘"]},{"name":"64: 차별 없는 좋은 일터 만들기","department":["고용부"],"category":["노동","인권"],"description":[{"name":"비정규직 사용사유제한 제도 도입 추진*, 비정규직 사용부담 강화 방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"비정규직 차별시정제도 전면 개편, 고용형태에 따른 차별 금지, 1년 미만 근로자(비정규직 포함) 퇴직급여 보장 등","status":"세부계획 미정","statuscode":"none"},{"name":"도급인의 임금지급 연대책임 및 안전보건조치 의무 강화, 파견ᆞ도급 구별기준 재정립","status":"세부계획 미정","statuscode":"none"},{"name":"’20년 최저임금 1만원 실현과 소상공인 등 부담 완화 방안 마련, 공정임금 구축 등 임금격차 해소 추진","status":"진행중 (18년 최저임금 7,530원)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=469&aid=0000222534"},{"name":"특수고용노동자 등 보호대상 확대, 도급인의 산업 재해 예방 의무에 대한 종합적인 개선방안 마련, 중대재해 발생시 처벌강화","status":"세부계획 미정","statuscode":"none"},{"name":"감정노동자 보호를 위한 법적 근거 마련, 특수형태 근로종사자 산재보험 적용 확대 등 보호 사각지대 해소","status":"세부계획 미정","statuscode":"none"},{"name":"물질안전보건자료(MSDS) 영업비밀 심사제도 도입, 일정규모 이상 사업장 안전ᆞ보건관리업무 위탁 금지 등 제도 개선","status":"세부계획 미정","statuscode":"none"}],"keywords":["비정규직","사용사유제한","차별시정제도","퇴직급여","도급인","원청","파견","도급","최저임금","특수고용노동자","산업재해","감정노동자","물질안전보건자료","안전보건관리업무"]},{"name":"66: 실질적 성평등 사회 실현","department":["여가부"],"category":["여성","인권"],"description":[{"name":"대통령 직속 성평등위원회 설치 추진, 성평등 정책 기본계획 수립 및 이행 총괄 관리, 성별영향분석평가와 성인지 예산 성과관리 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 공공부문(관리직 공무원, 공공기관 임원ᆞ관리자, 군ᆞ경찰 등) 여성 진출 대폭 확대를 위한 5개년 계획 수립ᆞ이행","status":"세부계획 미정","statuscode":"none"},{"name":"성평등 교육 강화, 언론ᆞ미디어 종사자 및 공적 서비스 전달자 대상 성인지 교육 실시","status":"세부계획 미정","statuscode":"none"},{"name":"18년 젠더폭력방지기본법(가칭) 제정 및 국가행동계획 수립ᆞ이행을 통해 다양한 젠더폭력 대응 강화 - 새롭게 대두되는 젠더폭력(스토킹, 온라인 성범죄 등) 처벌 및 피해자 보호 체계 마련(’17년~)","status":"유사법안 발의 (민주-표창원)","statuscode":"congress","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009443860"},{"name":"’18년 일본군 ‘위안부’ 피해자 기림일 지정 및 ’19년 일본군 ‘위안부’ 피해자 연구소(가칭) 설치ᆞ운영","status":"세부계획 미정","statuscode":"none"},{"name":"’20년 피해자 역사관 건립을 통해 조사ᆞ연구사업 체계화","status":"세부계획 미정","statuscode":"none"}],"keywords":["대통령직속성평등위원회","성평등","성평등정책","성별영향분석평가","성인지","공공부문","여성진출","젠더폭력방지기본법","일본군위안부","위안부피해자기림일","위안부피해자연구소","위안부피해자역사관"]},{"name":"71: 휴식 있는 삶을 위한 일ᆞ생활의 균형 실현","department":["고용부"],"category":["문화","생활","노동","보육","인권"],"description":[{"name":"’17년부터 주 52시간 근로 확립 등 법ᆞ제도 개선","status":"국회 논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009444133"},{"name":"포괄임금제 규제","status":"세부계획 미정","statuscode":"none"},{"name":"장시간 근로사업장 지도ᆞ감독 강화, 근로시간 단축에 따른 중소기업ᆞ근로자 부담 완화 지원","status":"세부계획 미정","statuscode":"none"},{"name":"근로시간 단축 종합점검추진단 운영, 근로시간 특례 제외 업종 및 4인 이하 사업장에 대한 합리적 개선방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"근로시간 외 업무 지시 금지, 공휴일 민간 적용 및 1년 미만 근무 연차휴가 보장 등 일가정 양립을 위한 종합 개선방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 첫 3개월 육아휴직급여 2배 인상, ’18년에 육아휴직 보너스 제도 도입 등 인센티브 강화 추진","status":"진행중 (공공기관 시행)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=032&aid=0002807499"},{"name":"육아기 근로시간 단축기간 확대를 위한 ‘10 to 4 더불어 돌봄’, 질병ᆞ 사고ᆞ노령 가족을 위한 가족돌봄휴직제도 등 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["주52시간근로","포괄임금제","장시간근로사업장","근로시간","공휴일","연차휴가","일가정양립","육아휴직급여","육아휴직보너스","가족돌봄휴직제도","10to4더불어돌봄"]},{"name":"87: 국방개혁 및 국방 문민화의 강력한 추진","department":["국방부"],"category":["안보/국방","정치/정부","인권"],"description":[{"name":"개혁 추동력 확보를 위해 대통령 직속 ‘국방개혁특별위원회’ 설치 추진, 핵심과제를 재선정하여 ‘국방개혁 2.0’ 수립","status":"세부계획 미정","statuscode":"none"},{"name":"국방개혁특위 - 상부지휘구조 개편 및 50만 명으로의 병력 감축 등 인력구조 개편","status":"세부계획 미정","statuscode":"none"},{"name":"병역자원 부족과 전투력 손실 방지 등에 대한 대책을 강구하여 병 복무기간을 18개월로 단축 추진","status":"세부계획 미정","statuscode":"none"},{"name":"부족 병역자원 확보를 위해 전환ᆞ대체복무 지원인력 조정 및 장교ᆞ 부사관 인력 확보 체계 개선","status":"세부계획 미정","statuscode":"none"},{"name":"문민통제 원칙 구현을 위해 국방부ᆞ방사청에 대한 실질적 문민화 방안 마련 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 사법 개혁 - 심판관제도 폐지, 군판사 인사위원회 설치 등을 통해 장병의 공정한 재판 및 인권 보장","status":"일부 진행중 (개정 군사법원법 시행)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=018&aid=0003869061"},{"name":"현역 감축 및 복무기간 단축을 보완하기 위해 육군 동원전력사령부 창설 검토, 예비군훈련장 과학화 등 예비전력 강화도 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 공항 및 군사시설 이전을 통해 국방력 강화 및 주민 불편 해소","status":"세부계획 미정","statuscode":"none"}],"keywords":["국방개혁","국방개혁특별위원회","상부지휘구조","병력감축","병복무기간","전환대체복무","장교부사관","문민통제","국방부","방사청","심판관제도","군판사인사위원회","군사법개혁","육군동원전력사령부","예비군훈련장과학화","군공항","군사시설"]},{"name":"89: 장병 인권 보장 및 복무 여건의 획기적 개선","department":["국방부"],"category":["인권","안보/국방","여성","주택/부동산"],"description":[{"name":"’22년까지 최저임금의 50%까지 단계적 인상 추진","status":"세부계획 미정","statuscode":"none"},{"name":"공무상 부상을 입은 장병이 최선의 치료를 선택할 권리 보장 - 공무상 부상자에 대한 민간병원 치료비 전액 지원을 단계적으로 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 복무 학점 인정 추진 및 장병 자기개발 지원을 강화하고, 군 급식 시스템 개선을 통한 급식 질 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"국가인권위원회 내 ‘군인권보호관’ 신설 및 군 의문사 진상 규명을 위한 제도 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"여군 인력 및 계급별 진출을 확대하고, 여군의 임신ᆞ출산ᆞ육아지원을 위한 제도 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 성폭력 범죄자 처벌 강화 및 무관용 원칙 엄중 적용","status":"세부계획 미정","statuscode":"none"},{"name":"국세청 등 유관기관 협조를 통해 고위공직자 등 사회적 관심계층의 병적 집중관리 및 상시 모니터링ᆞ검증체계 강화","status":"세부계획 미정","statuscode":"none"},{"name":"맞춤형 주거 지원 및 민간주택을 활용한 공급방식 다변화 등 직업군인 주거 지원 제도 발전","status":"세부계획 미정","statuscode":"none"}],"keywords":["최저임금","공무상부상장병","군복무학점인정","군급식시스템","국가인권위원회","병봉급인상","군인권보호관","군의문사진상규명","여군","군성폭력범죄자","국세청","병적집중관리","직업군인"]},{"name":"92: 북한인권 개선과 이산가족 등 인도적 문제 해결","department":["통일부"],"category":["북한","인권","생활"],"description":[{"name":"북한인권재단 조기 출범, 국제사회와 공조 및 남북 간 대화 시 인권문제 의제화 등을 통해 북한당국에 인권 친화적 방향으로 정책 전환 촉구","status":"세부계획 미정","statuscode":"none"},{"name":"민간단체 인도적 지원 허용, 국제기구 북한지원사업 공여 검토, 당국차원 지원은 국민적 합의를 바탕으로 추진","status":"세부계획 미정","statuscode":"none"},{"name":"이산가족의 신청자의 전면 생사확인ᆞ상봉정례화ᆞ 교류 제도화 추진","status":"세부계획 미정","statuscode":"none"},{"name":"국군포로ᆞ납북자 문제는 당사자의 의견을 존중한 다양한 해결책 마련","status":"세부계획 미정","statuscode":"none"},{"name":"탈북민 정착 지원 - 지원체계 효율화, 맞춤형 지원을 통한 생활밀착형 프로그램 확충 추진, 탈북민 인식 개선 및 지역주민과 소통 활성화 노력","status":"세부계획 미정","statuscode":"none"}],"keywords":["북한인권재단","인도적지원","북한지원사업","이산가족","국군포로","납북자","탈북민"]}]},{"theme":"revise_constitution","keys":[{"name":"6: 국민인권을 우선하는 민주주의 회복과 강화","department":["법무부","행자부","인권위"],"category":["인권","개헌"],"description":[{"name":"’09년 조직 축소 이전 수준으로 인권위 인원ᆞ조직 등 확대 - 개헌을 통한 헌법기관화","status":"추진중","statuscode":"none"},{"name":"인권기본법 제정","status":"인권위 헌법기관화 연동 과제","statuscode":"none"},{"name":"군인권 보호관 신설","status":"인권위 헌법기관화 연동 과제","statuscode":"none"},{"name":"’18년부터 긴급통신제한조치 사후허가 필수화","status":"세부계획 미정","statuscode":"none"},{"name":"’19년부터 형사공공변호인 제도 단계적 도입","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 개인정보 보호 거버넌스 강화","status":"세부계획 미정","statuscode":"none"},{"name":"‘시민사회발전위원회’ 설치","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 전국 단위 민간 자원봉사 인프라 확충","status":"세부계획 미정","statuscode":"none"}],"keywords":["인권","인권위","긴급통신제한조치","형사공공변호인","개인정보","시민사회발전위원회"]},{"name":"7: 국민주권적 개헌 및 국민참여 정치개혁","department":["국조실"],"category":["개헌","정치/정부"],"description":[{"name":"국회 개헌특위 논의 참여 및 지원","status":"국회 2017년 8월 공개토론 개시","statuscode":"none","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=016&aid=0001271336"},{"name":"국민투표 확대","status":"세부계획 미정","statuscode":"none"},{"name":"국민발안제와 국회의원에 대한 국민소환제 도입","status":"법안 발의 (국민소환제: 민주-박주민)","statuscode":"congress","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=014&aid=0003833797"},{"name":"18세로 선거연령 하향","status":"세부계획 미정","statuscode":"none"},{"name":"투표시간 연장","status":"세부계획 미정","statuscode":"none"},{"name":"국회의원 권역별 정당명부 비례대표제 도입","status":"세부계획 미정","statuscode":"none"},{"name":"대통령 결선투표제 도입","status":"세부계획 미정","statuscode":"none"},{"name":"정당 가입 연령제한 폐지","status":"세부계획 미정","statuscode":"none"},{"name":"공무원ᆞ교사의 정치 참여 보장","status":"세부계획 미정","statuscode":"none"},{"name":"장애인ᆞ노령자 투표편의 제공 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["개헌","국민투표","국민발안제","국민소환제","선거연령","투표시간","비례대표제","결선투표제","정치참여"]}]},{"theme":"diplomatic","keys":[{"name":"10: 해외 체류 국민 보호 강화 및 재외동포 지원 확대","department":["외교부"],"category":["정치/정부","외교"],"description":[{"name":"안전정보 적시 제공을 통한 재외국민 사건사고 예방","status":"완료","statusdesc":"해외를 방문 또는 체류 예정인 우리 국민에게 국가별 해외안전여행 정보를 제공하는 카카오톡 플러스친구 ‘해외안전여행’ 서비스를 23일부터 실시. 카카오톡 플러스친구 서비스를 이용해 방문하고자 하는 국가명을 입력할 경우 해당 국가의 ▲여행경보단계 ▲공관 긴급연락처 ▲주요 유의사항 등의 정보를 확인할 수 있다. 플러스 친구 서비스는 규칙에 따라 일정한 정보를 찾아주는 ‘채팅봇’을 활용, 채팅창에 국가명 입력 시 자동적으로 해외안전여행정보 답변을 제공한다.","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841461&pageIndex=11&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"재외동포 대상 한국 언어ᆞ역사ᆞ문화 교육 및 모국 초청 교류 등 정체성 함양 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 재외국민을 위한 통합전자행정시스템(G4K) 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 보안성이 강화된 차세대 전자여권 도입","status":"세부계획 미정","statuscode":"none"}],"keywords":["재외국민","재외동포","전자여권"]},{"name":"96: 국민외교 및 공공외교를 통한 국익 증진","department":["외교부"],"category":["외교","정치/정부"],"description":[{"name":"국민외교시스템 구축 - 외교정책에 대한 대국민 소통ᆞ참여 기능 강화를 위해 온ᆞ오프라인 플랫폼 구축, 여론조사 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"자유로운 소통이 가능한 조직문화 구축, 외교 역량 검증 강화 등을 통한 인사관리 신뢰 확보, 외교인력 확충 및 전문성 강화","status":"진행중 (혁신태스크포스 외무자문위원회 발족)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=003&aid=0008101144"},{"name":"민주주의ᆞ인권ᆞ테러리즘 등 글로벌 이슈 관련 기여 확대, 우리 국민의 국제기구 진출 확대 및 정부 차원의 지원체계 강화","status":"세부계획 미정","statuscode":"none"},{"name":"공공외교 통합조정기구로서 공공외교위원회 구성 추진","status":"세부계획 미정","statuscode":"none"},{"name":"제1차 5개년 공공외교 기본계획 수립 등을 통해 일관되고 체계적인 공공외교 수행 도모","status":"세부계획 미정","statuscode":"none"}],"keywords":["국민외교","국민외교시스템","외교역량","국제기구","공공외교위원회"]},{"name":"97: 주변 4국과의 당당한 협력외교 추진","department":["외교부"],"category":["외교","안보/국방","과거사","정치/정부","경제","FTA"],"description":[{"name":"정상 방미 등 활발한 고위급 외교 전개를 통한 한미동맹을 호혜적 책임동맹관계로 지속 심화ᆞ발전","status":"진행중 (한미정상회담 완료, 국방장관회담 추진중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009445984"},{"name":"미 조야를 대상으로 한 활발한 대미외교 전개로 한미동맹 저변 공고화, 연합방위태세 강화 및 한ᆞ미 간 현안 합리적 해결","status":"세부계획 미정","statuscode":"none"},{"name":"한ᆞ중 양국 정상 및 고위급 간 활발한 교류ᆞ대화, 사드 문제 관련 소통 강화로 신뢰 회복을 통한 실질적 한중 전략적 협력 동반자관계 내실화","status":"추진중 (2017.8 예정)","statuscode":"none","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488642"},{"name":"북핵문제 해결을 위한 한ᆞ중협력 강화, 한ᆞ중 FTA 강화 등을 통한 경제협력 확대, 미세먼지 대응 등 국민체감형 사안 관련 협력 강화","status":"일부 진행중","statusdesc":"한·중·일 환경장관회의, 미세먼지 대응 협력 등 논의 - 중국과는 미세먼지를 비롯한 대기오염 대응 정책·연구·기술 협력강화, 자연환경, 물, 토양 등 환경 전반에 걸친 향후 5년 간(2018~2022년)의 한·중 환경협력계획과 양국간 환경산업·기술 협력에 대해 의견을 나눈다. 일본과는 양국 간 미세먼지(PM2.5) 공동연구 협력에 대해 논의하고, 미국의 파리협정 탈퇴로 그 중요성이 부각되고 있는 기후변화 대응에 대하여 입장을 공유할 계획이다.","statuscode":"partiallywip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841495&pageIndex=9&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"독도 및 역사왜곡에는 단호히 대응하는 등 역사를 직시하면서 한ᆞ일 간 미래지향적 성숙한 협력동반자 관계 발전 - 과거사와 북한 핵ᆞ미사일 대응, 양국 간 실질협력과는 분리 대응","status":"세부계획 미정","statuscode":"none"},{"name":"위안부 문제는 피해자와 국민들이 동의할 수 있는 해결방안 도출","status":"진행중 (위안부 태스크포스 발족)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488248"},{"name":"북핵문제 해결을 위한 전략적 소통 및 한ᆞ러 경제협력 강화를 통해 한ᆞ러 전략적 협력동반자 관계의 실질적 발전 추진 - 정상교류를 포함 고위급 교류 활성화, 극동지역 개발 협력 확대, 북극ᆞ에너지ᆞFTA 등 미래성장동력 확충 등","status":"세부계획 미정","statuscode":"none"}],"keywords":["주변4국","협력외교","한미동맹","대미외교","한미연합방위","한중","북핵","미세먼지","한일","역사왜곡","독도","과거사","위안부","한러","경제협력","극동지역","북극","에너지","FTA"]},{"name":"98: 동북아플러스 책임공동체 형성","department":["외교부"],"category":["FTA","경제","외교"],"description":[{"name":"동북아 다자 안보협력 진전을 위해 정부 간 협의회 정례화ᆞ제도화 모색","status":"세부계획 미정","statuscode":"none"},{"name":"한중일 3국 협력 강화를 비롯한 소다자 협력 추진","status":"세부계획 미정","statuscode":"none"},{"name":"MIKTA지속추진ᆞ강화및동아시아내다양한형태의중견국협력시도","status":"세부계획 미정","statuscode":"none"},{"name":"신남방정책 - 아세안의 수요에 기반한 실질 협력 강화(주변 4국 유사 수준)","status":"세부계획 미정","statuscode":"none"},{"name":"인도와의 전략적 공조 강화 및 실질 경제 협력 확대(특별 전략적 동반자관계)","status":"세부계획 미정","statuscode":"none"},{"name":"신북방정책 - 남북러 3각 협력(나진-하산 물류사업, 철도, 전력망 등) 추진기반 마련","status":"세부계획 미정","statuscode":"none"},{"name":"한-EAEU FTA 추진 및 중국 일대일로 구상 참여","status":"진행중 (유라시아경제연합 정부간 협의중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=015&aid=0003753911"}],"keywords":["FTA","신남방정책","신북방정책","동북아","안보협력","소다자협력","아세안","인도","남북러","나진하산물류사업","MIKTA"]},{"name":"99: 국익을 증진하는 경제외교 및 개발협력 강화","department":["외교부"],"category":["외교","경제"],"description":[{"name":"인도 등 신흥시장 진출을 위해 경제공동위를 통한 양자경제 관리, 경제협력협정 체결을 통한 법적 기반 마련 등 외교적 지원","status":"세부계획 미정","statuscode":"none"},{"name":"기후변화협상 적극 참여, 자발적 감축 공약 제출 준비","status":"진행중 (한-중간)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=123&oid=298&aid=0000225034"},{"name":"기업 등과의 협력사업 및 글로벌 인재양성 확대를 통한 민간 일자리 창출 기여, ODA 분야 공공부문 일자리 창출, 인프라 사업 등 우리나라의 해외진출을 통한 국익 기여","status":"세부계획 미정","statuscode":"none"},{"name":"유ᆞ무상간 전략적 연계, 무상원조의 통합적 추진 및 연계성 강화를 통해 국익을 증진하는 전략적 국제개발 협력 이행 - 국제개발협력위원회(총리실) 및 무상개발협력전략회의(외교부) 등 적극 활용","status":"세부계획 미정","statuscode":"none"}],"keywords":["ODA","경제외교","인도","기후변화협상","기후변화","개발원조","공공부문","일자리","무상원조","국제개발협력","무상개발협력"]},{"name":"100: 보호무역주의 대응 및 전략적 경제협력 강화","department":["산업부"],"category":["경제","외교","FTA"],"description":[{"name":"한미 FTA 상호호혜성을 바탕으로 양국 교역ᆞ투자 발전 - FTA 재협상 등 모든 가능성을 열어놓고 국익 극대화 관점에서 철저 대비","status":"진행중 (재협상 통상교섭본부장 임명)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=422&aid=0000269596"},{"name":"협력채널 재개(통상ᆞ산업ᆞ품질검사 분야 협력채널 조기 개최, 한중 FTA 분야별 이행위원회 개최 등), 협력사업 등을 통해 한중 관계 복원 및 한중 FTA 활용 지속 확대","status":"세부계획 미정","statuscode":"none"},{"name":"RCEP(역내포괄적경제동반자협정) 및 한중일 FTA 적극 참여 등 동아시아 경제통합의 중심역할 수행","status":"진행중 (RCEP 제19차 참석)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=123&oid=298&aid=0000224734"},{"name":"ASEANᆞ인도 등 거대 신흥시장과의 맞춤형 경제 협력을 강화하고, 신규 FTA 협상(남미공동시장(브라질 등 4개국), 유라시아경제연합(러시아 등 5개국), 멕시코 등)을 적극 추진","status":"진행중 (유라시아경제연합 정부간 협의중, 브라질 추진중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=023&aid=0003270032"},{"name":"APEC, WTO 각료회의, ASEM 경제장관회의(’17.9) 등 계기 보호무역 대응 논의를 주도하고, 자유무역 선호국가 간 ‘통상 선진국가 클럽’ 구성 추진","status":"세부계획 미정","statuscode":"none"},{"name":"범정부 통상정책 총괄ᆞ조정 기능 강화, 통상 전문성 제고, 관련 업계 수입규제 대응 원스톱 지원체계 구축 등 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["FTA","한미","한미FTA","RCEP","역내포괄적경제동반자협정","한중일","아세안","인도","브라질","남미공동시장","유라시아경제연합","러시아","멕시코","APEC","WTO","ASEM경제장관회의","보호무역","통상정책","통상","통상역량"]}]},{"theme":"welfare","keys":[{"name":"11: 국가를 위한 헌신을 잊지 않고 보답하는 나라","department":["보훈처"],"category":["복지"],"description":[{"name":"국가유공자에 대한 보상금ᆞ수당 인상 및 의료ᆞ 복지ᆞ안장시설 확충 등으로 영예로운 삶 보장","status":"세부계획 미정","statuscode":"none"},{"name":"’20년 4.19혁명 60주년 및 5.18광주민주화운동 40주년 기념사업 추진","status":"세부계획 미정","statuscode":"none"},{"name":"독립유공자에 대한 예우 확대 및 독립운동 관련 시설물 관리 강화","status":"세부계획 미정","statuscode":"none"},{"name":"2019년 3.1운동 및 임시정부 수립 100주년 기념사업 추진","status":"세부계획 미정","statuscode":"none"},{"name":"제대군인 지원 강화","status":"세부계획 미정","statuscode":"none"},{"name":"위험직무 공상경찰관 특별위로금 지급","status":"세부계획 미정","statuscode":"none"},{"name":"순직ᆞ공상소방관 유가족 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’20년 6‧25전쟁 70주년 계기 UN참전용사에 대한 감사행사 개최","status":"세부계획 미정","statuscode":"none"}],"keywords":["국가유공자","419혁명","5.18","광주민주화운동","독립유공자","3.1운동","임시정부","제대군인","경찰관","소방관","6.25","참전용사"]},{"name":"17: 사회서비스 공공인프라 구축과 일자리 확충","department":["복지부"],"category":["일자리","복지"],"description":[{"name":"사회서비스 공공인프라 확충","status":"세부계획 미정","statuscode":"none"},{"name":"보장성 확대를 통해 ’22년까지 양질의 사회서비스 일자리 34만개 창출","status":"세부계획 미정","statuscode":"none"},{"name":"사회서비스공단 설립을 통해 공공사회서비스 일자리 창출 및 사회서비스 제공인력 처우 개선","status":"세부계획 미정","statuscode":"none"},{"name":"국공립 어린이집, 국공립요양시설, 공공병원 등 공공보건복지인프라 확충을 통한 일자리 창출","status":"세부계획 미정","statuscode":"none"},{"name":"사회서비스 제공인력 보수 인상, 근로시간 단축 등 처우 개선을 통해 사회서비스의 안정적 제공 및 품질 향상","status":"세부계획 미정","statuscode":"none"},{"name":"읍면동 주민센터의 ‘찾아가는 보건ᆞ복지서비스’ 강화 및 지자체 사회 복지전담공무원 대폭 확충","status":"일부 진행중","statusdesc":"올해 행정안전부 주관으로 20개 읍·면·동에 임팩트 사업을 실시하고, 그 성과를 분석해 2018년에는 추진을 희망하는 200개 읍·면·동에 시범사업 실시 예정","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841071&pageIndex=26&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"방문건강관리를 수행하는 간호직 공무원 등을 ’21년까지 확충하고, 0세아와 노인가구를 대상으로 보편적 방문건강관리서비스 제공","status":"세부계획 미정","statuscode":"none"}],"keywords":["사회서비스","공공인프라","일자리","사회서비스공단","공공사회서비스","국공립","어린이집","요양시설","공공병원","공공보건복지인프라","근로시간","주민센터","사회복지전담공무원","방문건강관리","간호직공무원","노인가구"]},{"name":"42: 국민의 기본생활을 보장하는 맞춤형 사회보장","department":["복지부"],"category":["복지","청년","노인","아동","보육"],"description":[{"name":"기초생활보장 주거급여는 ’18년부터 부양의무자 기준 폐지, 생계ᆞ의료급여는 소득재산 하위 70% 중 노인ᆞ중증장애인이 포함된 가구에 대한 부양의무자 기준 적용 제외(’19년부터 단계적 확대)","status":"진행중 (2017년 11월부터 기준완화)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=020&aid=0003084039"},{"name":"’18년부터 0~5세 아동수당 월 10만원 지급","status":"입법예고","statusdesc":"18년 7월부터 지급키로 하고 아동수당법 제정안에 대해 17년 9월 4일까지 입법예고","statuscode":"congress","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841150&pageIndex=22&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"’17년부터 미취업 청년에 대해 청년구직촉진수당(30만원, 3개월) 지급","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 기초연금ᆞ장애인연금(기초급여)을 25만원으로 인상","status":"입법예고","statuscode":"congress","statusdesc":"기존에 기초연금을 수급하는 어르신들은 내년 4월부터 현행 20만 6050원에서 약 5만 원 가량 인상된 25만원을 기초연금으로 받을 수 있음","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841333&pageIndex=15&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"국민연금ᆞ고용보험 등 사회보험 사각지대를 해소하고, 두루누리 사회보험료 지원사업에 건강보험료 추가 지원(신규가입자)","status":"세부계획 미정","statuscode":"none"},{"name":"장애등급제 단계적 폐지 및 종합지원체계 도입 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["기초생활보장","주거급여","부양의무자","생계급여","의료급여","소득재산","노인","중증장애인","아동수당","청년구직촉진수당","기초연금","장애인연금","국민연금","고용보험","건강보험료","장애등급제"]},{"name":"43: 고령사회 대비, 건강하고 품위 있는 노후생활 보장","department":["복지부"],"category":["노인","복지","여성"],"description":[{"name":"국민연금 소득대체율 인상을 ’18년 국민연금 재정계산과 연계하여 사회적 합의하에 추진","status":"세부계획 미정","statuscode":"none"},{"name":"기초연금액을 ’18년 25만원, ’21년 30만원으로 상향지급","status":"세부계획 미정","statuscode":"none"},{"name":"단시간ᆞ일용근로자, 경력단절 여성 등의 국민연금 가입 지원 확대 추진","status":"세부계획 미정","statuscode":"none"},{"name":"두루누리 건강보험 지원 확대, 건강보험 임의 계속 가입기간ᆞ대상 확대 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 전국 252개 치매안심센터 확충 및 치매 안심병원 확충 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 중증치매 환자 본인부담률 인하 및 고비용 진단검사 급여화, 장기요양 치매수급자 본인부담 경감 확대","status":"진행중","statuscode":"wip","statusdesc":"17년 10월부터 중증치매 환자는 건강보험 의료비의 10%만 부담. 중증 치매환자 가운데 정도가 심한 경우엔 일수 제한 없이, 통원치료가 가능한 경우에는 연간 최대 120일의 산정 특례적용.","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841328&pageIndex=16&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"노인 일자리수 ’17년 43.7만개에서 ’22년 80만개로 확대하고, 공익활동 참여수당을 ’20년까지 40만원으로 인상(일자리 유형에 따라 차등)","status":"세부계획 미정","statuscode":"none"},{"name":"국민연금기금운용위원회의 상설화, 기금투자운용 의사결정과정 및 투자내역ᆞ자산내역 공시 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["국민연금","기초연금","소득대체율","두루누리","건강보험","치매안심센터","중증치매환자","노인일자리","국민연금기금운용위원회"]},{"name":"44: 건강보험 보장성 강화 및 예방 중심 건강관리 지원","department":["복지부"],"category":["복지","아동","노인"],"description":[{"name":"건강보험 선별급여 적용항목 확대 및 신포괄수가 확대 등의 추진으로 비급여 풍선효과 해소","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"선택진료 폐지, 상급병실 단계적 급여화, 간호ᆞ간병통합서비스 확대(간호인력 확충 병행) 등 3대 비급여 부담 지속 경감","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"저소득층 의료비 부담 완화를 위해 소득수준을 고려하여 본인부담상한액 설정","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"’17년부터 15세 이하 아동 입원진료비 본인부담률을 5%로 인하하고, 민간실손보험 관리 강화로 건강보험 재정건전성 제고","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"40대 이상 진단 바우처 도입 등 건강검진 사후관리 강화, 초ᆞ중ᆞ고생 독감 예방접종 국가 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"정신건강 관련 서비스 전달체계 개편 및 전문인력 충원과 근무조건 개선, 자살예방 및 생명존중 문화 확산","status":"세부계획 미정","statuscode":"none"},{"name":"건강보험료 부과체계 개편 - 평가소득 폐지, 보수 외 고소득 직장인 보험료 부담 강화, 피부양자 단계적 축소 등 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["건강보험","선별급여","신포괄수가","비급여","본인부담상한액","진단바우처","건강검진","정신건강","평가소득","고소득직장인","건감보험료"]},{"name":"45: 의료공공성 확보 및 환자 중심 의료서비스 제공","department":["복지부"],"category":["복지"],"description":[{"name":"’20년까지 1차의료기관과 대형병원의 역할* 정립을 유도할 수 있는 건강보험 수가구조 개편방안 마련","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"’19년부터 환자 의뢰-회송 본 사업 시행 및 진료권역별 정보교류시스템 구축을 통해 국가적 진료정보 교류 인프라 연계","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 의료 취약지에 300병상 이상 거점 종합병원 확충으로 취약지 의료 수준 제고 - ’19년에 공중보건장학제도 시범사업 실시 및 취약지 공공의료기관 의사 파견지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 응급의료전용헬기, 소아 전문응급센터 및 재활병원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"전국에 권역외상센터 확대 및 심혈관센터 지정ᆞ설립 등으로 환자 중심 응급의료체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 고위험 감염병 및 원인미상 질환 대응을 위한 시설ᆞ장비ᆞ인력을 갖춘 중앙ᆞ권역별 감염병 전문병원 설치","status":"세부계획 미정","statuscode":"none"}],"keywords":["1차의료기관","대형병원","건강보험수가구조","진료정보","의료취약지","응급의료전용헬기","소아전문응급센터","재활병원","권역외상센터","심혈관센터","감염병"]},{"name":"48: 미래세대 투자를 통한 저출산 극복","department":["복지부"],"category":["주택/부동산","복지","보육","아동","여성"],"description":[{"name":"’22년까지 공공임대주택의 30% 신혼부부 우선 공급","status":"세부계획 미정","statuscode":"none"},{"name":"17년부터 난임시술비 등 건강보험 적용","status":"진행중 (2017년 10월 실시)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=018&aid=0003885557"},{"name":"출산지원금 도입방안 검토","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 아동수당 지급(0~5세, 월 10만원)","status":"세부계획 미정","statuscode":"none"},{"name":"매년 어린이집 대폭 확충하여 ’22년 국공립 어린이집 이용률 40% 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 첫 3개월 육아휴직급여 2배 인상, ’18년부터 아빠 육아휴직 보너스 제도 도입 및 육아로 인한 근로시간 단축 지원(10to4 더불어 돌봄)","status":"완료","statusdesc":"다음달 1일부터 육아휴직때 첫 3개월의 육아휴직급여는 통상임금의 80%(상한 150만원, 하한 70만원)로 상향 지급.","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841344&pageIndex=15&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"저출산 대책에 대한 컨트롤타워 기능 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 빅데이터 활용 위기아동 조기 발견 시스템 구축","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공임대주택","신혼부부","난임시술비","출산지원금","아동수당","국공립어린이집","육아휴직급여","육아휴직","저출산","위기아동조기발견시스템"]},{"name":"49: 유아에서 대학까지 교육의 공공성 강화","department":["교육부"],"category":["청년","아동","교육","복지","보육"],"description":[{"name":"’18년 어린이집 누리과정 전액 국고지원","status":"세부계획 미정","statuscode":"none"},{"name":"국ᆞ공립유치원 취학률 확대(’17년 25% → ’22년 40%)","status":"세부계획 미정","statuscode":"none"},{"name":"교사자질 향상과 교사처우 개선(’18년), 전문교육과정 운영, 자격체계 개편 추진(교육부ᆞ복지부)","status":"세부계획 미정","statuscode":"none"},{"name":"온종일 돌봄교실을 초등학교 전 학년으로 점차 확대하고 내실화방안 병행 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’20년부터 고등학교 무상교육 단계적 실시(’22년 완성)를 통해 고등학생 입학금ᆞ수업료ᆞ학교운영지원비ᆞ교과서비 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 대학생이 체감할 수 있는 등록금 부담 경감, 학자금 대출이자 부담 경감 및 입학금 단계적 폐지 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["누리과정","어린이집","국공립유치원","교사처우","돌봄교실","무상교육","고등학교","등록금","입학금","학자금대출이자","대학생"]},{"name":"50: 교실혁명을 통한 공교육 혁신","department":["교육부"],"category":["교육","복지","아동","보육"],"description":[{"name":"유아ᆞ초등학생 적정 학습시간 및 휴식시간 보장 법제화","status":"세부계획 미정","statuscode":"none"},{"name":"초중고교 필수교과 축소 및 선택과목 확대, 문예체 교육 활성화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 고교학점제 도입ᆞ확대, 국가교육회의 (’17년 설치)에서 의견수렴을 통해 단계적 고교체제 개편 추진","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008083961"},{"name":" ’17년 기초학력 보장법 제정을 통해 국가 차원의 기초 학력 보장체제 구축, ’18년 1수업 2교사제 등 단위학교 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 국가수준학업성취도 평가 표집평가로 전환, ’18년부터 초ᆞ중학교 학생 평가제도 개선, 혁신학교(지구)의 성과 일반 학교 확산, 자유학기제의 내실화 및 자유학년제 확산 등 추진","status":"진행중 (학업성취도평가 표집평가 전환완료)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008019382"},{"name":"교장공모제 확대(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"성과제도 개선 등 교원인 사제도 개선","status":"세부계획 미정","statuscode":"none"},{"name":"교ᆞ사대 교육과정(교직과정) 개선방안 마련(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"복잡한 대입전형 단순화 추진ᆞ적용(’18년~), 중장기 대입 제도 개선* 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["유아","초등학생","학습시간","휴식시간","필수교과","고교학점제","기초학력보장법","국가수준학업성취도","교장공모제","교원인사제도","대입전형"]},{"name":"51: 교육의 희망사다리 복원","department":["교육부"],"category":["교육","복지"],"description":[{"name":"사회적 배려 대상자 기회균형 선발 의무화(’21학년도), 선발비율 확대 대학 인센티브 마련","status":"세부계획 미정","statuscode":"none"},{"name":"저소득층ᆞ지방고 졸업생 지방대 의약학 계열 입학 기회 확대*, 법학전문대학원 블라인드 면접 의무화 및 취약계층 학생선발**과 장학금 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"특수교사ᆞ학교(급) 확대, 통합교육 지원교사 (순회교사) 배치, 장애대학생 진로ᆞ취업교육 강화 추진","status":"세부계획 미정","statuscode":"none"},{"name":"국가직 지역인재 9급 채용 단계적 확대 및 공공기관ᆞ민간기업의 고졸채용 유도(’17년~)","status":"세부계획 미정","statuscode":"none"},{"name":"고졸기술인재 국비유학 및 글로벌 인턴 확대, 직업계고 취업처 발굴(’17년~)","status":"세부계획 미정","statuscode":"none"},{"name":"대입에서 출신 고교 블라인드 면접 도입","status":"세부계획 미정","statuscode":"none"},{"name":"공공기관ᆞ지방공기업 블라인드 채용 의무화 및 민간기업 확산 유도","status":"세부계획 미정","statuscode":"none"}],"keywords":["사회적배려대상자","기회균형","대입","저소득층","지방고","블라인드","취약계층","특수교사","특수학급","국가직지역인재","공공기관"]},{"name":"52: 고등교육의 질 제고 및 평생ᆞ직업교육 혁신","department":["교육부"],"category":["교육","복지","4차산업혁명"],"description":[{"name":"지자체와의 연계 강화를 통한 거점 국립대 집중육성 및 지역 강소대학 지원 확대(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"대학 재정지원사업 전면 개편(일반과 특수목적 구분) 및 순수 기초연구 예산 약 2배 증액, 도전적 연구 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 직업교육 마스터플랜 마련 및 직업계고 재정지원 확대, 직업계고 학점제 단계적 운영(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 전문대학에 지원 확대 방안 마련 및 ’19년 공영형 전문대 운영을 통해 전문대를 직업교육 지역거점으로 육성","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 4차 산업분야를 우선으로 분야별 ‘한국형 나노디그리’ 모델 개발ᆞ운영, 성인 비문해자 교육기회 확대, 한국형 무크(K-MOOC) 강좌 확대","status":"세부계획 미정","statuscode":"none"},{"name":"대학-공공기관-지자체가 연계된 산학협력 클러스터 조성, 대학 내 기업ᆞ연구소 등 입주로 상시적 산학협력 촉진","status":"세부계획 미정","statuscode":"none"}],"keywords":["국립대","지역강소대학","기초연구","대학재정지원사업","직업교육","전문대학","나노디그리","한국형무크","산학협력"]},{"name":"53: 아동ᆞ청소년의 안전하고 건강한 성장 지원","department":["여가부"],"category":["아동","복지","보육","청년"],"description":[{"name":"’21년까지 학교밖청소년지원센터 전체 시군구 확대로 접근성ᆞ지원기능 강화","status":"세부계획 미정","statuscode":"none"},{"name":"생애주기별 각종 위기에서 예방부터 보호·치료까지 종합적 지원체계 마련, 가족정책과 아동ᆞ청소년 업무 연계ᆞ통합 추진","status":"세부계획 미정","statuscode":"none"},{"name":"시설 퇴소 아동에게 실질적 도움이 될 수 있는 소득ᆞ주거ᆞ자립지원 강화","status":"세부계획 미정","statuscode":"none"},{"name":"시도 등에 청소년 육성 전담공무원 배치 확대","status":"세부계획 미정","statuscode":"none"},{"name":"청소년 활동 및 자원봉사 운영 내실화, 방과후아카데미 운영 확대","status":"세부계획 미정","statuscode":"none"}],"keywords":["학교밖청소년지원센터","생애주기","시설퇴소아동","청소년육성전담공무원"]},{"name":"54: 미래 교육 환경 조성 및 안전한 학교 구현","department":["교육부"],"category":["교육","복지","아동"],"description":[{"name":"디지털 인문학적 소양을 갖추도록 소프트웨어 교육 내실화 및 선도 핵심교원 육성(’21년, 1만명)","status":"세부계획 미정","statuscode":"none"},{"name":"지능형 학습분석 서비스 제공(’20년) 및 교육용 오픈마켓 구축ᆞ운영(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"교사 1인당 학생 수를 OECD 평균 수준으로 개선, 초ᆞ중등 교과교사와 비교과교사(유아ᆞ특수 등) 확충, 학교 비정규직 정규직화 및 처우 개선","status":"진행중 (2017년 추경 반영, 비교과 압도적 확충)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=020&aid=0003083801"},{"name":"석면 제거, 내진 보강, 분필칠판 및 노후 냉난방기 교체 등 낡은 학교 환경 개선, 공기정화장치 설치 등 학교미세먼지대책 마련(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 아동학대 조기 발견을 위한 시스템 간 연계, 교육환경보호구역 인근 도박시설에 대한 합리적 규제조치 마련(’18년)","status":"세부계획 미정","statuscode":"none"}],"keywords":["소프트웨어교육","지능형학습분석","교과교사","학교비정규직","학교시설","아동학대","학교미세먼지대책"]},{"name":"65: 다양한 가족의 안정적인 삶 지원 및 사회적 차별 해소","department":["여가부"],"category":["보육","복지","아동"],"description":[{"name":"한부모가족 아동양육비 및 지원연령 단계적 인상ᆞ확대","status":"세부계획 미정","statuscode":"none"},{"name":"비양육자의 양육비 이행을 위한 소득재산 조회 등 제도 개선","status":"세부계획 미정","statuscode":"none"},{"name":"‘결혼이민자 자립 지원 패키지’ 및 ‘다문화 자녀 성장 지원 프로그램’ 운영으로 다문화가족의 사회적 자립 도모","status":"세부계획 미정","statuscode":"none"},{"name":"일반국민 대상 다문화 이해교육 확대 실시","status":"세부계획 미정","statuscode":"none"},{"name":"취약ᆞ위기가족 등 지원 서비스 확대로 가족해체 예방","status":"세부계획 미정","statuscode":"none"}],"keywords":["한부모가족","아동양육비","비양육자","결혼이민자","다문화자녀","다문화가족","다문화","취약위기가족","가족해체"]},{"name":"82: 농어업인 소득안전망의 촘촘한 확충","department":["농식품부"],"category":["농산어촌","경제","복지"],"description":[{"name":"쌀은 시장격리, 사료용벼 전환 등 선제적 수확기 수급안정 방안 시행(’17년), ’18년~’19년 생산조정제(15만ha) 한시 도입","status":"세부계획 미정","statuscode":"none"},{"name":"친환경농업직불 단가 인상(’18년), 농업환경보전 프로그램 도입 등 생태ᆞ환경을 보전하는 방향으로 직불제 확대","status":"세부계획 미정","statuscode":"none"},{"name":"농업재해보험이 개발되지 않은 품목(농약대, 대파대, 시설부자재 등 35개)의 복구지원 단가 인상 - ’22년까지 밭고정ᆞ조건불리직불 단가를 단계적 인상, 조건불리수산 직불 단가 인상 및 사업대상을 전체 섬으로 확대 추진","status":"세부계획 미정","statuscode":"none"},{"name":"농어업인에 대한 농어업인안전보험 국고지원을 확대하고 산재보험 수준의 보험상품 개발ᆞ보급","status":"세부계획 미정","statuscode":"none"}],"keywords":["쌀시장격리","쌀","사료용벼","쌀생산조정제","농산물의무자조금","농산물생산안정제","친환경농업직불단가","농업재해보험","농어업인안전보험"]}]},{"theme":"jobs","keys":[{"name":"12: 사회적 가치 실현을 선도하는 공공기관","department":["기재부"],"category":["일자리","정치/정부"],"description":[{"name":"’17년부터 단계적으로 공공기관 비정규직의 정규직 전환","status":"진행중","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=056&aid=0010483766"},{"name":"’17년에 공공기관 성과연봉제 관련 조치 폐기","status":"완료","statuscode":"done","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=018&aid=0003886476"},{"name":"’19년까지 공공기관 공시시스템의 정보제공 내용을 대폭 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 편람 수정을 통해 고용친화적 평가를 실현","status":"진행중/내년 편람 개정시 반영 예정","statuscode":"done","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=018&aid=0003886476"},{"name":"공공기관 운영에 관한 법률 개정 등을 통해 ’18년부터 공공기관 감사 독립성 강화 및 노동이사제 도입","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공기관","비정규직","정규직","성과연봉제","노동이사제"]},{"name":"16: 국민의 눈높이에 맞는 좋은 일자리 창출","department":["고용부"],"category":["일자리"],"description":[{"name":"대통령 직속 일자리위원회 설치 및 범정부적 국가 일자리 정책 집중 관리","status":"완료","statuscode":"done"},{"name":"일자리상황판 설치ᆞ운영으로 일자리 정책 및 현황 점검ᆞ관리","status":"완료/2017년 7월 31일 갱신","statuscode":"done","statuslink":"http://www1.president.go.kr/news/job.php"},{"name":"고용영향평가 확대 및 재정지원 일자리사업 개편으로 재정효율성 제고","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=081&aid=0002840521"},{"name":"공공부문 일자리 충원 로드맵을 마련, ’22년까지 공공부문 일자리 81만개 창출","status":"일부 진행중 (2017 추경)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009425793"},{"name":"사회적 대화를 통한 지역ᆞ산업 맞춤형 일자리 창출 - 노사상생형 일자리 모델(예 : 광주, 담양 등) 전국적 확산, 고용영향평가 등과 연계하여 산업ᆞ지역 중심의 고용정책 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["일자리위원회","대통령직속","일자리","일자리상황판","고용영향평가","재정효율성","공공부문","81만개","노사상생형"]},{"name":"17: 사회서비스 공공인프라 구축과 일자리 확충","department":["복지부"],"category":["일자리","복지"],"description":[{"name":"사회서비스 공공인프라 확충","status":"세부계획 미정","statuscode":"none"},{"name":"보장성 확대를 통해 ’22년까지 양질의 사회서비스 일자리 34만개 창출","status":"세부계획 미정","statuscode":"none"},{"name":"사회서비스공단 설립을 통해 공공사회서비스 일자리 창출 및 사회서비스 제공인력 처우 개선","status":"세부계획 미정","statuscode":"none"},{"name":"국공립 어린이집, 국공립요양시설, 공공병원 등 공공보건복지인프라 확충을 통한 일자리 창출","status":"세부계획 미정","statuscode":"none"},{"name":"사회서비스 제공인력 보수 인상, 근로시간 단축 등 처우 개선을 통해 사회서비스의 안정적 제공 및 품질 향상","status":"세부계획 미정","statuscode":"none"},{"name":"읍면동 주민센터의 ‘찾아가는 보건ᆞ복지서비스’ 강화 및 지자체 사회 복지전담공무원 대폭 확충","status":"일부 진행중","statusdesc":"올해 행정안전부 주관으로 20개 읍·면·동에 임팩트 사업을 실시하고, 그 성과를 분석해 2018년에는 추진을 희망하는 200개 읍·면·동에 시범사업 실시 예정","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841071&pageIndex=26&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"방문건강관리를 수행하는 간호직 공무원 등을 ’21년까지 확충하고, 0세아와 노인가구를 대상으로 보편적 방문건강관리서비스 제공","status":"세부계획 미정","statuscode":"none"}],"keywords":["사회서비스","공공인프라","일자리","사회서비스공단","공공사회서비스","국공립","어린이집","요양시설","공공병원","공공보건복지인프라","근로시간","주민센터","사회복지전담공무원","방문건강관리","간호직공무원","노인가구"]},{"name":"18: 성별ᆞ연령별 맞춤형 일자리 지원 강화","department":["고용부"],"category":["일자리","청년"],"description":[{"name":"’18년부터 공공기관 청년고용 의무비율 상향(매년 정원의 3% → 5%)","status":"세부계획 미정","statuscode":"none"},{"name":"민간부문 청년 신규채용 권고(인센티브 검토)","status":"세부계획 미정","statuscode":"none"},{"name":"중소기업이 청년 3명 정규직 채용 시 1명분 임금 지원(’17년 5천명, ’18년~’20년은 매년 신규 2만명)","status":"세부계획 미정","statuscode":"none"},{"name":"취성패 3단계와 연계한 구직촉진수당(30만원, 3개월) 신설ᆞ지급(’17년~’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"’19년부터 훈련참여ᆞ구직활동 청년에게 구직촉진수당(50만원, 6개월) 지급","status":"세부계획 미정","statuscode":"none"},{"name":"’20년부터 저소득 근로빈곤층을 포함한 한국형 실업부조로 발전","status":"세부계획 미정","statuscode":"none"},{"name":"희망퇴직 남용 방지, 경영상 해고제도 개선방안 등 근로계약 종료 전반에 관한 개선방안 마련(’17년)으로 정년제도 실효성 제고","status":"세부계획 미정","statuscode":"none"},{"name":"‘재직-전직ᆞ재취업-은퇴’ 단계별 재취업 지원","status":"세부계획 미정","statuscode":"none"},{"name":"적극적 고용개선조치 등 적용사업장 확대, 남녀고용평등법 전 사업장 적용","status":"세부계획 미정","statuscode":"none"},{"name":"새일센터 확대(150→175개소), 창업지원ᆞ직업훈련ᆞ취업 장려금 등 일자리 연계기능 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공기관","청년고용","신규채용","중소기업","정규직","구직촉진수당","저소득근로빈곤층","희망퇴직","해고제도","근로계약","재취업","은퇴","고용개선조치","남녀고용평등법","새일센터","창업지원","직업훈련","취업장려금"]},{"name":"19: 실직과 은퇴에 대비하는 일자리 안전망 강화","department":["고용부"],"category":["일자리","청년","노인"],"description":[{"name":"고용보험 가입대상 확대 예술인, 산재보험 적용대상 특고부터 단계적 적용(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"65세 이상 어르신, 자영업자 고용보험 가입요건 완화 및 사회보험료 지원(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 실업급여 지급수준 및 수급기간 상향으로 실업급여 보장성 강화","status":"세부계획 미정","statuscode":"none"},{"name":"초단시간근로자 및 자발적 이직자(장기 실직) 실업급여 수급자격 인정 방안 마련 및 중소 영세기업 근로자 공적퇴직연금 도입 검토","status":"세부계획 미정","statuscode":"none"},{"name":"고용복지+센터 확충","status":"세부계획 미정","statuscode":"none"},{"name":"취업상담인력 충원","status":"세부계획 미정","statuscode":"none"},{"name":"전문성 강화 및 처우개선 등을 통해 구직자가 만족하는 취업지원 서비스 제공(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"’19년 국가일자리정보플랫폼 구축을 통해 수요자 맞춤형 서비스 제공 및 일자리 공약이행을 위한 핵심정보 생산","status":"세부계획 미정","statuscode":"none"},{"name":"미래 유망분야 고급인력 양성 지속 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 재직자 직업능력개발 혁신방안 수립","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 영세자영업자ᆞ신중년 등에 대한 특화훈련 실시","status":"세부계획 미정","statuscode":"none"},{"name":"산업별로 자격-교육ᆞ 훈련-경력이 연계되는 역량체계(SQF) 설계","status":"세부계획 미정","statuscode":"none"}],"keywords":["공영방송","지배구조","지상파","재허가","언론인","해직","임시조치"]},{"name":"20: 좋은 일자리 창출을 위한 서비스 산업 혁신","department":["고용부"],"category":["일자리","경제"],"description":[{"name":"제도개선.정책지원을 통해 공유경제 등  신성장.유망서비스 시장 활성화 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 실태조사를 실시하고, ’18년 공유경제 종합계획 수립","status":"세부계획 미정","statuscode":"none"},{"name":"신유형 서비스 창출 및 업종 간 융합 활성화를 위한 규제개선 등 맞춤형 지원 강화","status":"세부계획 미정","statuscode":"none"},{"name":"서비스 체계 혁신으로 영세 서비스업 생산성 제고 및 저임금 근로자 처우 개선을 지원","status":"세부계획 미정","statuscode":"none"},{"name":"저임금 영세 서비스업종 생산성 혁신을 위해 ICT 활용 등을 지원하고, ’18년까지 저임금 근로자 처우 개선을 위한 중장기계획 마련","status":"세부계획 미정","statuscode":"none"},{"name":"좋은 일자리를 창출할 수 있는 업종을 중심으로 국가적 차원의 전략 마련 - ’17년 중 서비스산업 혁신 로드맵을 수립, 서비스 투자 활성화 및 서비스기업의 해외진출을 적극 지원","status":"세부계획 미정","statuscode":"none"}],"keywords":["공유경제","신성장","유망서비스","규제개선","영세서비스업","생산성","저임금근로자","처우개선","중장기계획","일자리","서비스산업","서비스투자","서비스기업"]},{"name":"41: 대ᆞ중소기업 임금 격차 축소 등을 통한 중소기업 인력난 해소","department":["중기부"],"category":["청년","일자리","경제"],"description":[{"name":"’17년부터 청년추가고용장려금 운영, 중소기업이 청년 3명 정규직 채용 시 1명분 임금 지원","status":"준비중 (2017년 3000명, 2018년 2만명 예정)","statuscode":"await","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=008&aid=0003909010"},{"name":"중소기업 인재 유입을 촉진하고 재교육 확산을 위해 ’22년까지 ICT융합 등 4차 산업혁명 관련 계약학과 대폭 확충 - 마이스터고ᆞ특성화고 우수 학생을 기초R&D 전문인력 등으로 양성하는 ‘영마이스터 육성 과정’을 신설ᆞ운영","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 기업 성장 후 주식ᆞ이익 일부를 근로자와 공유하도록 사전 약정하는 미래성과공유제 도입","status":"세부계획 미정","statuscode":"none"}],"keywords":["청년추가고용장려금","중소기업","정규직","청년","4차산업혁명","마이스터고","특성화고","영마이스터","미래성과공유제"]},{"name":"81: 누구나 살고 싶은 복지 농산어촌 조성","department":["농식품부"],"category":["농산어촌","경제","일자리"],"description":[{"name":"’18년부터 군지역에 100원 택시 등 농어촌형 교통모델 확대","status":"세부계획 미정","statuscode":"none"},{"name":"농지연금 신규상품 도입(’17년), 국민연금 기준소득금액 단계적 상향 지원 검토","status":"진행중 (농지연금 신규상품)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=117&oid=298&aid=0000225158"},{"name":"영농ᆞ가사도우미 지원 확대 및 관련 법 개정을 통해 ’21년부터 여성 농어업인 대상 특화 건강검진 시범실시","status":"세부계획 미정","statuscode":"none"},{"name":"농어업 기반 6차산업 - ’17년 농산어촌 관광상품 개발, ’18년 농촌관광 등급평가제 개편 및 ’22년 우수 관광자원 선정ᆞ홍보 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"농어업 기반 6차산업 - ’18년사회적농업시범사업* 실시 및 관련 법적근거 마련 추진","status":"세부계획 미정","statuscode":"none"},{"name":"산림분야 일자리 - ’18년 나무의사 자격제도 도입 및 ’20년부터 목재산업단지 조성","status":"세부계획 미정","statuscode":"none"},{"name":"산림분야 일자리 - ’22년 전국 권역별 국ᆞ공립 산림복지단지와 국가 숲길 네트워크 조성","status":"세부계획 미정","statuscode":"none"}],"keywords":["농산어촌","군지역","100원택시","농지연금","영농가사도우미","농어업인","6차산업","농산어촌관광상품","농촌관광등급평가제","사회적농업시범사업","산림일자리","나무의사자격제도","목재산업단지","국공립산림복지단지","국가숲길네트워크"]}]},{"theme":"life","keys":[{"name":"14: 민생치안 역량 강화 및 사회적 약자 보호","department":["경찰청"],"category":["생활"],"description":[{"name":"’17년부터 파출소 증설 및 탄력순찰제 등 주민밀착ᆞ 참여형 치안 강화","status":"세부계획 미정","statuscode":"none"},{"name":"범죄예방 환경 디자인(CPTED) 등 예방 시스템 개선과 인프라 확충","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 ‘사회적 약자 보호 3대 치안대책’* 수립 총력 대응","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 치안 R&D 활성화(육안 미확인 법광원, CCTV 영상 검색 고도화 등)로 스마트 폴리스 구현","status":"세부계획 미정","statuscode":"none"},{"name":"국과수 미설치 지역(제주 등 11곳) 합동 감정체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"의무경찰 단계적(5년) 감축 및 경찰 인력 증원","status":"세부계획 미정","statuscode":"none"}],"keywords":["파출소","치안","범죄예방","사회적약자","국과수","의무경찰","경찰"]},{"name":"28: 소상공인ᆞ자영업자 역량 강화","department":["중기부"],"category":["경제","생활"],"description":[{"name":"전통시장 신규 도입 복지수당과 복지포인트의 30%를 온누리상품권 등으로 지급","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 모든 전통시장 화재감지시설 설치 및 주차장 보급률 제고","status":"세부계획 미정","statuscode":"none"},{"name":"소상공인 조직화ᆞ협업화 지원을 강화하고, ’17년 신용카드 우대수수료 적용 가맹점 확대 및 ’19년 카드수수료 인하 등 비용 절감, 성실사업자 의료비ᆞ교육비 세액공제 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 1인 소상공인 고용보험료 30% 지원","status":"세부계획 미정","statuscode":"none"},{"name":"노란우산공제 가입자를 ’22년까지 160만명으로 확대(’17년 105만명)","status":"세부계획 미정","statuscode":"none"},{"name":"골목상권 ’17년에 지역상권 내몰림 방지 및 생계형 적합업종 법제화, 임차인 지위 강화를 위한 상가임대차 보호법 개정 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["전통시장","복지수당","복지포인트","온누리상품권","소상공인","화재감지시설","신용카드","세액공제","노란우산공제","골목상권","상가임대차보호법","임차인"]},{"name":"29: 서민 재산형성 및 금융지원 강화","department":["금융위"],"category":["경제","생활"],"description":[{"name":"’17년부터 개인종합자산관리계좌(Ko-ISA) 비과세 한도 확대 및 부분인출ᆞ중도해지 허용 범위 확대","status":"당정 협의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=057&aid=0001154512"},{"name":"자금지원과 채무조정의 원스톱 서민금융 지원 체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"중ᆞ저금리 대출 공급능력 확보를 위해 ’18년부터 서민금융진흥원 신용보증계정 재원의 안정적 조달 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 사잇돌 대출 공급규모 및 공급기관을 확대하여 중금리 시장 활성화 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 지역에서 예금을 수취하는 금융기관의 영업구역 내 개인ᆞ중소기업 대출의무 등을 부여하는 지역재투자 추진","status":"세부계획 미정","statuscode":"none"},{"name":"서민의 가정경제 파탄 방지를 위해 민영 장발장은행 운영비용 및 개인회생ᆞ파산 신청 시 소요되는 비용 지원 검토","status":"세부계획 미정","statuscode":"none"}],"keywords":["서민","개인종합자산관리계좌","서민금융","중금리","저금리","대출","서민금융진흥원","신용보증계정","사잇돌대출","금융기관","민영장발장은행","개인회생"]},{"name":"31: 교통ᆞ통신비 절감으로 국민 생활비 절감","department":["국토부","미래부"],"category":["통신","생활","교통"],"description":[{"name":"광역알뜰교통카드 도입 등 제도 개선을 통해 싸고 편안한 대중교통 서비스 제공","status":"세부계획 미정","statuscode":"none"},{"name":"법 개정을 통해 ’18년 광역교통청 신설","status":"세부계획 미정","statuscode":"none"},{"name":"광역버스 노선 추가 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 수도권 광역급행철도 단계적 착공, 기존 전철망 단계적 급행열차 도입 및 시설 개선","status":"일부 완료/진행중 (경인선, 경의선, 안산선, 수인선 특급/급행 도입)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=103&oid=421&aid=0002857952"},{"name":"어르신(기초연금수급자) 월 11,000원 신규 감면, 저소득층 월 11,000원 추가 감면, 요금할인율을 현행 20%에서 25%로 상향","status":"입법예고 (2017년 9월 11일까지)","statuscode":"congress","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=105&oid=030&aid=0002629644"},{"name":"공공 와이파이(Wi-Fi) 확대 구축, 알뜰폰 경쟁력 강화 대책 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"단말기 지원금 상한제 조기 폐지, 분리공시제도 도입 등 고가 단말기 가격 투명화 유도, 위법행위 조사ᆞ시정 등을 통해 통신시장 투명화","status":"세부계획 미정","statuscode":"none"}],"keywords":["교통비","통신비","광역알뜰교통카드","대중교통","광역교통청","광역버스","광역급행철도","전철","급행열차","수도권","어르신","기초연급수급자","요금할인율","공용와이파이","알뜰폰","단말기지원금상한제","분리공시제도","통신시장"]},{"name":"46: 서민이 안심하고 사는 주거 환경 조성","department":["국토부"],"category":["생활","주택/부동산"],"description":[{"name":"공공임대주택 연평균 13만호 공급 및 공공지원 임대주택 연평균 4만호 공급 등 공적임대주택 연평균 17만호 공급","status":"세부계획 미정","statuscode":"none"},{"name":"임대주택 입주 시기 예측을 위해 대기자 명부제도를 도입하고, 복잡한 임대주택 유형을 통합하여 관리 효율성 제고","status":"세부계획 미정","statuscode":"none"},{"name":"주거급여 지원대상 지속 확대 및 지원금액 단계적 현실화","status":"세부계획 미정","statuscode":"none"},{"name":"주거약자용 주택 입주자 선정 시 중증장애인 우선 공급","status":"세부계획 미정","statuscode":"none"},{"name":"사회통합형 주택정책 - 자발적 임대주택의 등록 확대를 위한 인센티브 강화, 임대차계약갱신청구권 등의 단계적 제도화 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공임대주택","공공지원임대주택","임대주택","대기자명부제도","주거급여","중증장애인","자발적임대주택","임대차계약갱신청구권"]},{"name":"55: 안전사고 예방 및 재난 안전관리의 국가책임체제 구축","department":["안전처"],"category":["생활","교통","환경/안전"],"description":[{"name":"헌법 개정 시 국민안전권 명시","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 안전취약계층 지원 법적근거 마련 및 취약계층 안전서비스 확대","status":"세부계획 미정","statuscode":"none"},{"name":"범정부 교통안전 추진체계 구축 - ’17년에 스마트 철도안전 기본계획 수립, ’22년까지 항공안전 빅데이터 플랫폼 구축 등 철도와 항공기 안전 강화","status":"세부계획 미정","statuscode":"none"},{"name":"보행자 우선 및 교통약자 보호, 취약계층 배려 중심의 교통정책 추진","status":"세부계획 미정","statuscode":"none"},{"name":"승강기・건설・지하안전 등 부문별 위협요소 제거","status":"세부계획 미정","statuscode":"none"},{"name":"지진 조기경보체계 개선, 내진설계・보강, 활성단층 조사 실시, 지진 대비 교육・훈련 확대 등 ’20년까지 선진국 수준 지진 대응체계 마련 - ’18년까지 지진 조기경보시간 7초~25초로 단축(’16년 50초)","status":"세부계획 미정","statuscode":"none"},{"name":"소방특별조사 인력・대상 확대 및 위험특성별 맞춤형 안전대책 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 전문예보관 양성","status":"준비/진행중","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=103&oid=020&aid=0003082757"},{"name":"수치예보기술 개발(’19년) 및 ’21년까지 한국형 날씨 예측모델 운영 등을 통해 맞춤형 스마트 기상정보 제공","status":"진행중","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=103&oid=020&aid=0003082757"}],"keywords":["헌법","국민안전권","안전취약계층","교통안전","철도","항공기","안전위험요소","지진","조기경보체계","내진설계","활성단층","화재예방","전문예보관","수치예보기술","한국형날씨예측모델"]},{"name":"56: 통합적 재난관리체계 구축 및 현장 즉시대응 역량 강화","department":["안전처"],"category":["환경/안전","생활"],"description":[{"name":"국가위기관리센터 역할 강화","status":"세부계획 미정","statuscode":"none"},{"name":"자치단체ᆞ경찰ᆞ소방ᆞ해경을 유기적으로 연계하여 국가재난관리 역량 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 소방청 독립 및 소방인력과 장비 확충, 119구급서비스 인프라 확충을 통한 현장 중심 육상재난 대비ᆞ대응역량 강화","status":"진행중 (소방청 독립)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008095212"},{"name":"소방공무원의 근속승진 단축 및 국가직화 검토, 소방복합치유센터 설립 등 처우 개선과 치료 지원 확대","status":"법안 계류중","statuscode":"congress","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=022&aid=0003195623"},{"name":"’17년에 해경청 독립 및 수사・정보기능 정상화를 통한 해경의 역할 재정립","status":"완료","statuscode":"done","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=001&aid=0009480297"},{"name":"불법 조업 중국어선 근절을 통한 해양영토주권 수호","status":"세부계획 미정","statuscode":"none"},{"name":"대국민 재난정보 전달체계 전면 개선","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 재난 안전통신망 구축","status":"세부계획 미정","statuscode":"none"},{"name":"지진해일 분석ᆞ예측ᆞ정보전달 체계 고도화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 독립적인 재난사고 조사위원회 설립","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 까지 대국민 재난트라우마 극복 지원을 위한 총괄 지원체계 구축","status":"세부계획 미정","statuscode":"none"}],"keywords":["국가위기관리센터","국가재난관리","소방청","소방인력","소방장비","119","소방공무원","해경청","중국어선","재난정보","재난안전통신망","지진해일","재난사고조사위원회","재난트라우마"]},{"name":"57: 국민 건강을 지키는 생활안전 강화","department":["환경부","식약처"],"category":["환경/안전","생활"],"description":[{"name":"가습기 살균제 피해구제 및 재발방지 - 특별피해구제계정 설치(1,250억원) 등 전향적인 지원대책 마련(’17년, 구제재원ᆞ피해인정범위 확대 및 사후관리 등)","status":"완료 (시행령 통과/2017년 8월 9일부터)","statuscode":"done","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=056&aid=0010488330"},{"name":"화학물질 유해정보 확보 공개 - 1톤 이상 모든 기존 화학물질(7천종)의 정부 등록(~’30년) 의무화 및 영업비밀 남용 차단을 위한 사전승인제 도입(’18년)","status":"완료 ('2018. 7.1 / 2019. 1.1 관련법 순차 발효)","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840812&pageIndex=5&startDate=1997-01-01&endDate=2017-08-10&repCodeType=&repCode=&srchWord="},{"name":"층간소음ᆞ빛공해 등 생활불편 해소 및 지반침하ᆞ환경오염 물질, 방사선 등 생활환경안전 확보","status":"세부계획 미정","statuscode":"none"},{"name":"인체직접적용제품 독성DB 구축(3천건), 인체위해성 평가 및 공산품에 대한 안전관리 강화","status":"세부계획 미정","statuscode":"none"},{"name":"생산(잔류물질 관리 강화 등), 수입(무검사 억류제 도입 등), 제조ᆞ유통(HACCP 의무적용 확산), 소비(식품표시 강화) 등 전 주기적 먹거리 안전관리 강화 및 범정부적 기본계획 수립","status":"세부계획 미정","statuscode":"none"},{"name":"공공급식지원센터 설치로 영양사가 없는 급식시설의 안전과 영양을 지원","status":"세부계획 미정","statuscode":"none"},{"name":"식품사고 피해구제 집단소송제 도입 등 식품안전 소비자 권리 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["가습기살균제","특별피해구제계정","화학물질","유해정보","층간소음","빛공해","지반침하","환경오염물질","방사선","인체직접적용제품","독성데이터베이스","먹거리안전","공공급식지원센터","영양사","식품사고피해구제집단소송제"]},{"name":"58: 미세먼지 걱정 없는 쾌적한 대기환경 조성","department":["환경부"],"category":["환경/안전","생활","경제"],"description":[{"name":"환경위성 발사(’20년), 측정망 확충, 한중 공동 연구('17년5월∼'20년) 등을 통해 미세먼지 발생원인 규명","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 도심 측정소 대폭 확충 및 고농도 시 예보정확도 74% 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 봄철 노후 석탄발전소(8기) 일시 가동중단 및 신규 건설 불허","status":"진행중","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=055&aid=0000552374"},{"name":"’18년 사업장 먼지총량제 시행 및 배출허용기준 20% 이상 강화","status":"세부계획 미정","statuscode":"none"},{"name":"임기 내(’22년) 30년 이상된 노후 화력발전소(10기) 전면 폐쇄","status":"세부계획 미정","statuscode":"none"},{"name":"노후경유차 운행제한 확대(서울→수도권), 조기폐차 사업 확대 등 경유차 비중 축소","status":"진행중 (정부-서울시 정책공조)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=003&aid=0008101291"},{"name":"’18년 저공해 건설기계 사용 의무화 및 디젤기관차 배출기준 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 전기차 등 친환경차 보급 획기적 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’19년 배출원이 밀집한 충청ᆞ동남ᆞ광양만권 특별관리지역 지정","status":"세부계획 미정","statuscode":"none"},{"name":"’19년까지 한중 협력의지를 담은 미세먼지 공동선언문 발표","status":"세부계획 미정","statuscode":"none"}],"keywords":["미세먼지","석탄발전소","먼지총량제","화력발전소","노후경유차","저공해건설기계","디젤기관차","전기차","배출원","한중정상회담"]},{"name":"59: 지속가능한 국토환경 조성","department":["환경부"],"category":["환경/안전","생활"],"description":[{"name":"’18년부터 환경영향평가 비용 공탁제* 등 평가제도 혁신","status":"세부계획 미정","statuscode":"none"},{"name":"보전총량 설정(’19년) 및 훼손가치만큼 복원ᆞ대체 의무화(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"반려동물지원센터 설치, 유기동물 입양 활성화, 길고양이 중성화사업 지원(’18년~) 등으로 동물 보호수준 제고","status":"세부계획 미정","statuscode":"none"},{"name":"6개 보 상시 개방 후 ’18년 10개 보 개방방안 등을 포함한 4대강 16개보 처리방안 확정","status":"진행중 (일부 개방)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=437&aid=0000157553"},{"name":"’19년부터 4대강 재자연화 대책에 따라 자연성 회복ᆞ복원사업 추진","status":"세부계획 미정","statuscode":"none"},{"name":"물관리 일원화(’17년), 유역관리위 설치 등 유역 거버넌스 구축(’19년)","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008098450"},{"name":"’22년까지 취수원 다각화, 광역ᆞ지방 상수도 통합으로 안정적 물공급","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 노후 상수관망 현대화(1,717km), 물순환도시 5개소 건설, 하수 재이용(1.1억톤/년 이상) 등 상시 가뭄 극복 물순환 체계 구축","status":"세부계획 미정","statuscode":"none"}],"keywords":["환경영향평가비용공탁제","보전총량","반려동물지원센터","유기동물","길고양이중성화사업","4대강","물관리"]},{"name":"67: 지역과 일상에서 문화를 누리는 생활문화 시대","department":["문체부"],"category":["생활","문화"],"description":[{"name":"저소득층에게 연간 6만원이 지급되고 있는 통합문화이용권을 연차별로 확대하여 ’21년부터 10만원 지급","status":"일부 진행중","statusdesc":"18년부터 7만원으로 1만원 인상","statuscode":"partiallywip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841678&pageIndex=1&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"생애주기별 문화예술교육 확대로 ’22년 문화 예술교육 수혜자 수 360만명 달성","status":"세부계획 미정","statuscode":"none"},{"name":"분야별 문화도시 지정을 확대하고, 문화마을 (읍면동 단위 중심) 신규 조성 추진","status":"진행중","statusdesc":"시·군·구 단위로 문화도시를 2018년 신규로 7개소(19개소 계속 지원) 조성 지원하고, 읍·면·동 단위로 문화마을을 2018년 신규로 8개소(17개소 계속 지원) 조성해 특화된 문화 환경을 만들어 나갈 계획","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841678&pageIndex=1&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"매장문화재조사 공영제 도입으로 ’22년까지 연간 지표조사 및 발굴조사 지속 확대","status":"세부계획 미정","statuscode":"none"},{"name":"문화재돌봄법(가칭) 제정으로 상시관리 대상 문화재 지속 확대","status":"세부계획 미정","statuscode":"none"},{"name":"전통무형문화의 원형보전 강화 및 국민적 향유를 위한 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"가야 문화권 조사ᆞ연구 및 정비 등","status":"세부계획 미정","statuscode":"none"},{"name":"연차별로 문화분야 재원 적극 확대","status":"세부계획 미정","statuscode":"none"}],"keywords":["저소득층","기초문화생활","통합문화이용권","생애주기","문화예술교육","문화도시","문화마을","매장문화재조사공영제","문화재돌봄법","전통무형문화","가야문화권"]},{"name":"71: 휴식 있는 삶을 위한 일ᆞ생활의 균형 실현","department":["고용부"],"category":["문화","생활","노동","보육","인권"],"description":[{"name":"’17년부터 주 52시간 근로 확립 등 법ᆞ제도 개선","status":"국회 논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009444133"},{"name":"포괄임금제 규제","status":"세부계획 미정","statuscode":"none"},{"name":"장시간 근로사업장 지도ᆞ감독 강화, 근로시간 단축에 따른 중소기업ᆞ근로자 부담 완화 지원","status":"세부계획 미정","statuscode":"none"},{"name":"근로시간 단축 종합점검추진단 운영, 근로시간 특례 제외 업종 및 4인 이하 사업장에 대한 합리적 개선방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"근로시간 외 업무 지시 금지, 공휴일 민간 적용 및 1년 미만 근무 연차휴가 보장 등 일가정 양립을 위한 종합 개선방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 첫 3개월 육아휴직급여 2배 인상, ’18년에 육아휴직 보너스 제도 도입 등 인센티브 강화 추진","status":"진행중 (공공기관 시행)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=032&aid=0002807499"},{"name":"육아기 근로시간 단축기간 확대를 위한 ‘10 to 4 더불어 돌봄’, 질병ᆞ 사고ᆞ노령 가족을 위한 가족돌봄휴직제도 등 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["주52시간근로","포괄임금제","장시간근로사업장","근로시간","공휴일","연차휴가","일가정양립","육아휴직급여","육아휴직보너스","가족돌봄휴직제도","10to4더불어돌봄"]},{"name":"72: 모든 국민이 스포츠를 즐기는 활기찬 나라","department":["문체부"],"category":["문화","생활"],"description":[{"name":"생활체육 환경 조성 -1시군구 1스포츠클럽 운영, 공공체육시설 확충, 지도자 배치 확대 추진","status":"세부계획 미정","statuscode":"none"},{"name":"범정부 협조체계 구축 및 온ᆞ오프라인 홍보 강화, 상황실을 통한 실시간 대회 운영 점검 등을 통해 평창동계올림픽ᆞ패럴림픽 성공 개최","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 국기 태권도 문화콘텐츠화 추진위원회 구성ᆞ운영을 통해 ’22년 태권도 10대 문화콘텐츠 개발ᆞ홍보","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공체육시설","생활체육","평창동계올림픽","태권도","국기태권도문화콘텐츠화추진위원회"]},{"name":"73: 관광복지 확대와 관광산업 활성화","department":["문체부"],"category":["노동","생활","관광"],"description":[{"name":"노동자 휴가지원제 도입(’18년부터 제도설계 등 추진), 열린관광지 확대(5년간 100개 조성 지원)","status":"세부계획 미정","statuscode":"none"},{"name":"대체공휴일 확대 등 공휴일 제도 개선(’18년 관련 규정 개정)","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 개별관광객 맞춤형 관광코스 개발 확대 및 온라인 플랫폼 운영ᆞ개선 지속","status":"세부계획 미정","statuscode":"none"},{"name":"관광품질인증제의 법적근거 마련을 통한 체계적 관리(’18년부터 적용)","status":"완료 (시행)","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840787&pageIndex=2&startDate=1997-01-01&endDate=2017-08-08&repCodeType=&repCode=&srchWord="},{"name":"국가관광전략회의 신설ᆞ운영","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 800개 관광벤처기업 발굴ᆞ지원, 융합관광산업 육성(VRᆞAR 콘텐츠 제작 등)","status":"세부계획 미정","statuscode":"none"},{"name":"지역 특화관광명소 집중 육성(’21년까지 테마여행 10선 추진), 관광두레 지속 확대, 외국인이 많이 찾는 ‘글로컬’ 관광지 육성)","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 중국 외 방한 관광객 850만명 등 관광객 다변화","status":"세부계획 미정","statuscode":"none"},{"name":"고부가 관광산업 육성(웰니스 관광클러스터 지원 등), 관광산업 펀드 조성","status":"세부계획 미정","statuscode":"none"}],"keywords":["노동자휴가지원제","노동자","열린관광지","대체공휴일","개별관광객맞춤형관광코스","관광품질인증제","국가관광전략회의","관광벤처기업","융합관광산업","지역특화관광명소","관광두레","중국외방한관광객","외국인","고부가관광산업","관광산업펀드"]},{"name":"79: 도시경쟁력 강화 및 삶의 질 개선을 위한 도시재생뉴딜 추진","department":["국토부"],"category":["주택/부동산","경제","생활"],"description":[{"name":"도시재생뉴딜사업 발굴ᆞ지원 - 구도심과 노후주거지 등을 포함하여 정비가 시급히 필요한 곳부터 우선적으로 선정하여 지역특성에 맞게 지원","status":"일부 진행중 (2017.8.2 부동산대책 영향)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=277&aid=0004048087"},{"name":"’17년까지 도시재생뉴딜 사업 추진방안 및 부처협업 TFT 구축 등 추진기반 마련, 매년 도시재생뉴딜 사업지역 선정ᆞ지원","status":"일부 진행중 (2017.8.2 부동산대책 영향)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=277&aid=0004048087"},{"name":"지역 중심의 뉴딜사업 추진을 위해 지자체ᆞ지역전문가 등 추진주체 역량 강화 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’17년까지 도시재생 연계형 공공 임대주택 공급 방안 마련 및 ’18년부터 본격 공급","status":"세부계획 미정","statuscode":"none"},{"name":"주거취약계층 녹색건축물 우선 적용 - ’18년부터 공공임대주택 등 소형 주택 에너지성능을 패시브하우스 수준으로 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["도시재생뉴딜사업","구도심","노후주거지","도시재생연계형공공임대주택","공공임대주택","녹색건축물","에너지성능"]},{"name":"92: 북한인권 개선과 이산가족 등 인도적 문제 해결","department":["통일부"],"category":["북한","인권","생활"],"description":[{"name":"북한인권재단 조기 출범, 국제사회와 공조 및 남북 간 대화 시 인권문제 의제화 등을 통해 북한당국에 인권 친화적 방향으로 정책 전환 촉구","status":"세부계획 미정","statuscode":"none"},{"name":"민간단체 인도적 지원 허용, 국제기구 북한지원사업 공여 검토, 당국차원 지원은 국민적 합의를 바탕으로 추진","status":"세부계획 미정","statuscode":"none"},{"name":"이산가족의 신청자의 전면 생사확인ᆞ상봉정례화ᆞ 교류 제도화 추진","status":"세부계획 미정","statuscode":"none"},{"name":"국군포로ᆞ납북자 문제는 당사자의 의견을 존중한 다양한 해결책 마련","status":"세부계획 미정","statuscode":"none"},{"name":"탈북민 정착 지원 - 지원체계 효율화, 맞춤형 지원을 통한 생활밀착형 프로그램 확충 추진, 탈북민 인식 개선 및 지역주민과 소통 활성화 노력","status":"세부계획 미정","statuscode":"none"}],"keywords":["북한인권재단","인도적지원","북한지원사업","이산가족","국군포로","납북자","탈북민"]}]},{"theme":"economy","keys":[{"name":"15: 과세형평 제고 및 납세자 친화적 세무행정 구축","department":["기재부"],"category":["경제"],"description":[{"name":"’17년에 국민의견을 토대로 조세ᆞ재정을 포괄적으로 개혁할 수 있는 기구 설치","status":"2018년 예정 ('조세·재정개혁 특별위원회')","statuscode":"none","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=008&aid=0003906241"},{"name":"’18년에 개혁보고서 작성 및 대통령ᆞ국회 보고","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 자산소득ᆞ초고소득 및 탈루소득 과세는 강화하고 대기업 과세 정상화","status":"세부계획 미정","statuscode":"none"},{"name":"중산층ᆞ서민 등의 세제 지원은 확대","status":"세부계획 미정","statuscode":"none"},{"name":"대주주 주식양도차익 등 자본이득ᆞ초고소득ᆞ금융소득 과세 강화","status":"세부계획 미정","statuscode":"none"},{"name":"상속ᆞ증여세 신고세액 공제율은 축소","status":"세부계획 미정","statuscode":"none"},{"name":"상속ᆞ증여세 과세체계 개편 등도 추진","status":"세부계획 미정","statuscode":"none"},{"name":"대기업 비과세ᆞ감면 지속 정비","status":"당정 협의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=011&aid=0003077071"},{"name":"대기업 일감몰아주기 과세 강화","status":"세부계획 미정","statuscode":"none"},{"name":"부가가치세 대리납부제 단계적 도입","status":"세부계획 미정","statuscode":"none"},{"name":"해외금융계좌 신고대상 확대 추진","status":"완료 (신고기준 금액 5억원 초과로 확대)","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840555&pageIndex=7&startDate=1997-01-01&endDate=2017-08-08&repCodeType=&repCode=&srchWord="},{"name":"근로소득증대세제 지원 및 월세세액공제율(현행 10%) 확대","status":"개정안 발표 (중소기업 특별감면제도 중복적용 허용)","statuscode":"congress","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840551&pageIndex=8&startDate=1997-01-01&endDate=2017-08-08&repCodeType=&repCode=&srchWord="},{"name":"폐업한 자영업자 사업 재개 및 취업 시 소액체납 면제 추진","status":"개정안 발표 (1인당 3000만원까지 면제)","statuscode":"congress","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840551&pageIndex=8&startDate=1997-01-01&endDate=2017-08-08&repCodeType=&repCode=&srchWord="},{"name":"’17년부터 국세청 납세자보호위원회 신설 및 독립성 강화","status":"완료","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840555&pageIndex=7&startDate=1997-01-01&endDate=2017-08-08&repCodeType=&repCode=&srchWord="},{"name":"세무조사 남용 방지 장치 보완 및 조세통계 정보공개 획기적 확대 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["조세","재정","자산소득","초고소득","탈루소득","과세","대기업","중산층","서민","세제지원","상속세","증여세","과세체계","비과세","일감몰아주기","부가가치세","해외금융계좌","근로소득중대세제","월세세액공제율","자영업자","납세자보호위원회","국세청","세무조사"]},{"name":"20: 좋은 일자리 창출을 위한 서비스 산업 혁신","department":["고용부"],"category":["일자리","경제"],"description":[{"name":"제도개선.정책지원을 통해 공유경제 등  신성장.유망서비스 시장 활성화 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 실태조사를 실시하고, ’18년 공유경제 종합계획 수립","status":"세부계획 미정","statuscode":"none"},{"name":"신유형 서비스 창출 및 업종 간 융합 활성화를 위한 규제개선 등 맞춤형 지원 강화","status":"세부계획 미정","statuscode":"none"},{"name":"서비스 체계 혁신으로 영세 서비스업 생산성 제고 및 저임금 근로자 처우 개선을 지원","status":"세부계획 미정","statuscode":"none"},{"name":"저임금 영세 서비스업종 생산성 혁신을 위해 ICT 활용 등을 지원하고, ’18년까지 저임금 근로자 처우 개선을 위한 중장기계획 마련","status":"세부계획 미정","statuscode":"none"},{"name":"좋은 일자리를 창출할 수 있는 업종을 중심으로 국가적 차원의 전략 마련 - ’17년 중 서비스산업 혁신 로드맵을 수립, 서비스 투자 활성화 및 서비스기업의 해외진출을 적극 지원","status":"세부계획 미정","statuscode":"none"}],"keywords":["공유경제","신성장","유망서비스","규제개선","영세서비스업","생산성","저임금근로자","처우개선","중장기계획","일자리","서비스산업","서비스투자","서비스기업"]},{"name":"21: 소득 주도 성장을 위한 가계부채 위험 해소","department":["금융위"],"category":["경제","주택/부동산"],"description":[{"name":"주택 담보 대출 비율(LTV) 및 소득 대비 부채 비율(DTI) 합리적 개선","status":"일부 완료 (2017.8.2 투기과열지구에서 40%로 강화)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=025&aid=0002741751"},{"name":"’17년부터 총체적 상환능력 심사(DSR)의 단계적 도입으로 가계부채 연착륙 유도","status":"진행중 (2019년까지 단계적 시행 예정)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=421&aid=0002856998"},{"name":"’17년에 대부업법과 이자제한법상의 최고금리를 일원화 하고, 단계적으로 20%로 인하","status":"진행중 (2018.1월 대부업법/이자제한법 최고금리 24%로 인하)","statuscode":"congress","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840768&pageIndex=1"},{"name":"국민행복기금 및 공공기관 보유 잔여채권 등에 대해 ’17년 중 적극적인 정리방안 마련ᆞ추진","status":"진행중 (2017년 8월말까지 소각 예정)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=032&aid=0002807032"},{"name":"’17년부터 소멸시효 완성채권 추심ᆞ매각 금지 법제화(채권추심법 개정) 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 중 금융소비자보호법 제정으로 동일기능-동일 규제 체계 도입, 피해구제 실효성 제고 등 금융소비자 보호 강화 노력","status":"세부계획 미정","statuscode":"none"},{"name":"취약계층 보호를 위해 집값만큼만 상환하는 비소구 주택담보대출은 정책모기지부터 민간으로 단계적 확대(’19년)","status":"세부계획 미정","statuscode":"none"}],"keywords":["주택담보대출비율","소득대비부채비율","LTV","DTI","가계부채","총체적상환능력심사","DSR","대부업법","이자제한법","최고금리","국민행복기금","공공기관","보유잔여채권","소멸시효완성채권","채권추심법","금융소비자보호법","금융소비자","취약계층","비소구주택담보대출"]},{"name":"22: 금융산업 구조 선진화","department":["금융위"],"category":["경제"],"description":[{"name":"’17년부터 진입규제 등 사전규제를 획기적으로 완화하고, 대신 사후규제를 강화하여 금융업의 경쟁과 혁신을 유도","status":"세부계획 미정","statuscode":"none"},{"name":"징벌적 과징금 도입, 금융감독원의 검사ᆞ감독체계 등도 개편","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 금융위원회 조직을 기능별로 개편하고, 향후 정부조직개편과 연계하여 정책과 감독 분리 검토","status":"준비중 (7월 23일 조직혁신기획단 출범)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=421&aid=0002853917"},{"name":"’17년부터 정책실명제 확대","status":"준비중 (7월 23일 조직혁신기획단 출범)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=421&aid=0002853917"},{"name":"전문직공무원 제도 내실화 등을 통해 금융행정 인프라 선진화 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 금융권의 단기성과 중심의 고액성과급 지급 관행 해소 및 내부통제의 질 향상 등 투명성 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 중 제2금융권 최대주주에 대한 주기적 적격성심사 제도 개선","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 이후 법ᆞ제도 정비를 통해 빅데이터ᆞ핀테크 등 혁신적 금융서비스 개발ᆞ유통 여건 마련","status":"세부계획 미정","statuscode":"none"}],"keywords":["진입규제","사전규제","사후규제","금융업","징벌적과징금","금융감독원","금융위원회","정부조직개편","정책실명제","전문직공무원","금융행정","금융권","고액성과급","제2금융권","최대주주","빅데이터","핀테크"]},{"name":"23: 공정한 시장질서 확립","department":["공정위"],"category":["경제"],"description":[{"name":"국가적 차원에서 갑을문제 개선ᆞ해소를 위한 대통령 직속 ‘을지로위원회’ 설치 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 중 하도급ᆞ가맹ᆞ유통ᆞ대리점 분야 불공정행위 근절을 위한 제도 개선 및 법집행 강화","status":"일부 진행중 (암행 감시 예정)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=016&aid=0001270192"},{"name":"징벌적 손해배상제 확대","status":"진행중 (2017년 8월 법개정안 제출 예정)","statuscode":"congress","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=004&oid=374&aid=0000136666"},{"name":"’17년 중 자본시장법상 불공정거래 행위에 대한 제재 강화 및 기업회계 규율 정비","status":"일부 진행중 (담합 벌금 인상 예정)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=079&aid=0002993165"},{"name":"금감원 감리주기 단축(25→10년) 및 분식회계·부실감사에 대한 제재 강화(형벌 : 5~7년 → 10년, 과징금한도 : 20억 → 폐지)","status":"세부계획 미정","statuscode":"none"}],"keywords":["갑을","을지로위원회","하도급","가맹","불공정행위","자본시장법","불공정거래","기업회계","금감원"]},{"name":"24: 재벌 총수 일가 전횡 방지 및 소유ᆞ지배구조 개선","department":["공정위"],"category":["경제"],"description":[{"name":"’18년까지 다중대표소송제ᆞ전자투표제 도입, 집중투표제 의무화 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년~’18년 기간 중 지주회사 행위제한 규제 강화","status":"세부계획 미정","statuscode":"none"},{"name":"인적분할 시 자사주 의결권 부활 방지","status":"세부계획 미정","statuscode":"none"},{"name":"기존 순환출자 단계적 해소 방안 마련 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 총수 일가 사익편취 규제의 적용대상 확대, 사익편취 행위 상시 감시","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 금융보험사의 계열사에 대한 의결권 제한 강화, ’18년부터는 금융그룹 통합감독도 시행","status":"세부계획 미정","statuscode":"none"}],"keywords":["재벌","총수","순환출자","지주회사","금융보험사","금융그룹","의결권"]},{"name":"25: 공정거래 감시 역량 및 소비자 피해구제 강화","department":["공정위"],"category":["경제"],"description":[{"name":"‘공정거래 법집행체계 개선 TFT’를 구성ᆞ운영하여 의무고발요청기관 확대, 공정위 소관 일부 법률에서 전속고발제 폐지 등 종합적 개선 방안 마련ᆞ추진","status":"방침 변화 (전속고발제 단계적 폐지)","statuscode":"question","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=421&aid=0002861052"},{"name":"’18년까지 법위반 조사권 일부를 광역지자체와 분담","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 소비자분야에 집단소송제를 도입하고, 소비자 피해구제 지원 등 소비자권익증진사업을 안정적으로 수행하기 위한 재원 조성ᆞ추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["공정거래","법집행체계","의무고발요청기관","공정위","전속고발제","소비자","집단소송제","피해구제"]},{"name":"26: 사회적경제 활성화","department":["기재부"],"category":["경제"],"description":[{"name":"’17년 사회적경제기본법 등 정부 대안 마련, 사회적경제 정책 조정ᆞ 시행을 위한 전담조직 (사회적경제발전위원회 구성, 5개년 사회적경제발전 기본계획 수립, 사회적경제 발전위원회 사무처 설치 등) 구축 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 사회혁신기금, 사회투자펀드 조성, 신용보증 심사기준 및 한도 완화 등 사회적경제의 특성이 반영된 금융시스템 구축 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 공공조달 과정에서 사회적 가치 반영 등 사회책임조달 체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 인력 양성 로드맵 수립, 사회적경제 학습체계 구축 등 사회적 경제에 대한 인력 양성 체계 마련","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 유휴 국ᆞ공유 시설 등의 사회적경제기업의 활용을 촉진토록 제도를 개선하는 등 공유경제 실현","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 도시재생 분야 등의 진출을 지원하고, ’18년부터 지역 일자리 사업 등과의 연계 강화 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["사회적경제기본법","사회적경제","사회적경제발전위원회","사회적경제발전","사회혁신기금","사회투자펀드","금융시스템","공공조달","사회적가치","사회적경제기업","도시재생"]},{"name":"27: 더불어 발전하는 대ᆞ중소기업 상생 협력","department":["중기부"],"category":["경제"],"description":[{"name":"’18년부터 적합업종 해제 품목 중 민생에 영향이 큰 업종을 생계형 적합업종으로 지정(’17년 중 특별법 제정)","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 복합쇼핑몰에 대하여 대형마트 수준의 영업제한 등을 통해 골목상권을 보호","status":"세부계획 미정","statuscode":"none"},{"name":"중소기업단체 ‘불공정행위 신고센터’ 설치ᆞ운영 지원 및 단계별 확대*","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 대ᆞ중소기업이 이익을 공유하는 협력이익배분제 모델 개발, ’22년까지 200개 기업으로 확산","status":"세부계획 미정","statuscode":"none"}],"keywords":["적합업종","중소기업","복합쇼핑몰","대형마트","골목상권","불공정행위","대기업","협력이익배분제"]},{"name":"28: 소상공인ᆞ자영업자 역량 강화","department":["중기부"],"category":["경제","생활"],"description":[{"name":"전통시장 신규 도입 복지수당과 복지포인트의 30%를 온누리상품권 등으로 지급","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 모든 전통시장 화재감지시설 설치 및 주차장 보급률 제고","status":"세부계획 미정","statuscode":"none"},{"name":"소상공인 조직화ᆞ협업화 지원을 강화하고, ’17년 신용카드 우대수수료 적용 가맹점 확대 및 ’19년 카드수수료 인하 등 비용 절감, 성실사업자 의료비ᆞ교육비 세액공제 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 1인 소상공인 고용보험료 30% 지원","status":"세부계획 미정","statuscode":"none"},{"name":"노란우산공제 가입자를 ’22년까지 160만명으로 확대(’17년 105만명)","status":"세부계획 미정","statuscode":"none"},{"name":"골목상권 ’17년에 지역상권 내몰림 방지 및 생계형 적합업종 법제화, 임차인 지위 강화를 위한 상가임대차 보호법 개정 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["전통시장","복지수당","복지포인트","온누리상품권","소상공인","화재감지시설","신용카드","세액공제","노란우산공제","골목상권","상가임대차보호법","임차인"]},{"name":"29: 서민 재산형성 및 금융지원 강화","department":["금융위"],"category":["경제","생활"],"description":[{"name":"’17년부터 개인종합자산관리계좌(Ko-ISA) 비과세 한도 확대 및 부분인출ᆞ중도해지 허용 범위 확대","status":"당정 협의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=057&aid=0001154512"},{"name":"자금지원과 채무조정의 원스톱 서민금융 지원 체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"중ᆞ저금리 대출 공급능력 확보를 위해 ’18년부터 서민금융진흥원 신용보증계정 재원의 안정적 조달 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 사잇돌 대출 공급규모 및 공급기관을 확대하여 중금리 시장 활성화 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 지역에서 예금을 수취하는 금융기관의 영업구역 내 개인ᆞ중소기업 대출의무 등을 부여하는 지역재투자 추진","status":"세부계획 미정","statuscode":"none"},{"name":"서민의 가정경제 파탄 방지를 위해 민영 장발장은행 운영비용 및 개인회생ᆞ파산 신청 시 소요되는 비용 지원 검토","status":"세부계획 미정","statuscode":"none"}],"keywords":["서민","개인종합자산관리계좌","서민금융","중금리","저금리","대출","서민금융진흥원","신용보증계정","사잇돌대출","금융기관","민영장발장은행","개인회생"]},{"name":"30: 민생과 혁신을 위한 규제 재설계","department":["국조실"],"category":["경제"],"description":[{"name":"’17년부터 단속보다는 사전예방 중심의 규제 행정 도입, 소상공인 등의 부담 경감을 위한 규제차등화","status":"세부계획 미정","statuscode":"none"},{"name":"국민 생활 불편ᆞ부조리 개선 및 불합리한 행정조사 정비 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 생명ᆞ안전ᆞ환경 관련 주요규제 완화 시 심사절차 도입 및 규제 도입 시 사회적 비용 ᆞ편익 분석 강화, 과태료ᆞ과징금의 규제심사 대상 제외 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 ‘원칙허용- 예외금지’의 네거티브 규제 전환, 신기술ᆞ신산업 분야 규제 개선방안 마련 및 미래지향적 규제지도 구축 추진, 일자리 창출을 저해하는 규제 개선 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["사전예방","소상공인","규제차등화","행정조사","규제","네거티브규제","신기술","신산업"]},{"name":"38: 주력산업 경쟁력 제고로 산업경제의 활력 회복","department":["산업부"],"category":["4차산업혁명","경제"],"description":[{"name":"’17년에 4차 산업혁명 대응을 위한 제조업 부흥전략 수립","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 스마트 공장 인증제도 도입 및 금융지원 등 확대","status":"세부계획 미정","statuscode":"none"},{"name":"매년 50개 기업 사업재편 지원, 사업재편 기업에 대한 인센티브 강화로 ’19년까지 산업 전반으로 선제적 구조조정 확산","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 국가 브랜드 전략과 산업ᆞ무역정책을 연계한 ‘Korean-Made 전략’ 수립 및 맞춤형 지원 등 강화*로 수출기업화 촉진","status":"세부계획 미정","statuscode":"none"},{"name":"신산업 및 고용창출 효과가 높은 외국인투자ᆞ유턴기업을 중점 유치하는 방향으로 ’18년까지 관련 지원제도 개편","status":"세부계획 미정","statuscode":"none"}],"keywords":["4차산업혁명","제조업","스마트공장","금융지원","사업재편","국가브랜드전략","무역정책","수출기업화","신산업","고용창출","외국인투자","유턴기업","Korean-Made"]},{"name":"39: 혁신을 응원하는 창업국가 조성","department":["중기부"],"category":["경제"],"description":[{"name":"기업투자촉진법(가칭) 제정","status":"세부계획 미정","statuscode":"none"},{"name":"엔젤투자 활성화 및 펀드조성 확대 등을 통해 ’22년 신규 벤처펀드 5조원 돌파","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 기술창업자 5.6만명 육성 및 성장단계별 정책자금 확충으로 기술인력 혁신창업 촉진","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 창업기업 부담금 면제범위 확대","status":"세부계획 미정","statuscode":"none"},{"name":"공공 조달 의무구매제도 도입, 벤처기업 확인제도 개편 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 정책금융 연대보증 면제대상 확대(창업 7년 이내) 및 사업 실패자의 소액체납세금 한시적 면제","status":"완료","statusdesc":"17년 하반기 은행 대출심사시 기술력, 특허권 등 기업가치를 정교하게 반영할 수 있는 기반을 강화하고 실패에 대한 두려움 없이 창업할 수 있도록 연대보증을 폐지하기로 했다. 정책금융을 중심으로 17년 8월 중 연대보증 폐지대상을 확대하고 18년 상반기 책임경영심사 등을 통한 전면 폐지를 추진하기로 했다.","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841571&pageIndex=7&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"’18년 정책금융 부실채권 채무조정 범위 확대 등 창업 실패 부담 완화","status":"세부계획 미정","statuscode":"none"},{"name":"성실실패 재창업자를 대상으로 맞춤형 교육, 사업화, 자금 등 패키지식 지원 확대(’22년까지 5.5천명)","status":"세부계획 미정","statuscode":"none"}],"keywords":["성실실패재창업자","정책금융","창업실패","창업","연대보증","부실채권","사업실패자","소액체납세금","공공조달","의무구매제도","벤처기업","창업기업","기술창업자","혁신창업","엔젤투자","벤처펀드","창업"]},{"name":"40: 중소기업의 튼튼한 성장 환경 구축","department":["중기부"],"category":["경제"],"description":[{"name":"중소벤처기업부 신설로 중소기업 정책 일원화 및 지원사업 유사중복 등 조정기능 강화","status":"완료","statuscode":"done"},{"name":"정부 중소기업 전용 R&D 2배 확대 및 R&D 지원체계를 수요자 중심으로 재설계*","status":"세부계획 미정","statuscode":"none"},{"name":"약속어음제도 단계적 폐지(’22년)","status":"세부계획 미정","statuscode":"none"},{"name":"국가계약법에 공동사업제품 조합추천제도 근거 마련","status":"세부계획 미정","statuscode":"none"},{"name":"해외직접판매 지원체계 마련, 온라인 수출 통합지원을 위한 온라인수출 통합플랫폼 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 글로벌 강소기업 및 히든챔피언 1200개 육성","status":"세부계획 미정","statuscode":"none"},{"name":"정부 법령ᆞ지원제도 조사 후 중소기업 성장걸림돌 발굴ᆞ개선","status":"세부계획 미정","statuscode":"none"}],"keywords":["중소벤처기업부","중소기업","약속어음제도","국가계약법","해외직접판매","온라인수출","글로벌강소기업"]},{"name":"41: 대ᆞ중소기업 임금 격차 축소 등을 통한 중소기업 인력난 해소","department":["중기부"],"category":["청년","일자리","경제"],"description":[{"name":"’17년부터 청년추가고용장려금 운영, 중소기업이 청년 3명 정규직 채용 시 1명분 임금 지원","status":"준비중 (2017년 3000명, 2018년 2만명 예정)","statuscode":"await","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=008&aid=0003909010"},{"name":"중소기업 인재 유입을 촉진하고 재교육 확산을 위해 ’22년까지 ICT융합 등 4차 산업혁명 관련 계약학과 대폭 확충 - 마이스터고ᆞ특성화고 우수 학생을 기초R&D 전문인력 등으로 양성하는 ‘영마이스터 육성 과정’을 신설ᆞ운영","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 기업 성장 후 주식ᆞ이익 일부를 근로자와 공유하도록 사전 약정하는 미래성과공유제 도입","status":"세부계획 미정","statuscode":"none"}],"keywords":["청년추가고용장려금","중소기업","정규직","청년","4차산업혁명","마이스터고","특성화고","영마이스터","미래성과공유제"]},{"name":"58: 미세먼지 걱정 없는 쾌적한 대기환경 조성","department":["환경부"],"category":["환경/안전","생활","경제"],"description":[{"name":"환경위성 발사(’20년), 측정망 확충, 한중 공동 연구('17년5월∼'20년) 등을 통해 미세먼지 발생원인 규명","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 도심 측정소 대폭 확충 및 고농도 시 예보정확도 74% 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 봄철 노후 석탄발전소(8기) 일시 가동중단 및 신규 건설 불허","status":"진행중","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=055&aid=0000552374"},{"name":"’18년 사업장 먼지총량제 시행 및 배출허용기준 20% 이상 강화","status":"세부계획 미정","statuscode":"none"},{"name":"임기 내(’22년) 30년 이상된 노후 화력발전소(10기) 전면 폐쇄","status":"세부계획 미정","statuscode":"none"},{"name":"노후경유차 운행제한 확대(서울→수도권), 조기폐차 사업 확대 등 경유차 비중 축소","status":"진행중 (정부-서울시 정책공조)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=003&aid=0008101291"},{"name":"’18년 저공해 건설기계 사용 의무화 및 디젤기관차 배출기준 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 전기차 등 친환경차 보급 획기적 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’19년 배출원이 밀집한 충청ᆞ동남ᆞ광양만권 특별관리지역 지정","status":"세부계획 미정","statuscode":"none"},{"name":"’19년까지 한중 협력의지를 담은 미세먼지 공동선언문 발표","status":"세부계획 미정","statuscode":"none"}],"keywords":["미세먼지","석탄발전소","먼지총량제","화력발전소","노후경유차","저공해건설기계","디젤기관차","전기차","배출원","한중정상회담"]},{"name":"78: 전 지역이 고르게 잘사는 국가균형발전","department":["산업부","국토부","행자부"],"category":["정치/정부","경제"],"description":[{"name":"국가균형발전위원회 명칭 복원 및 위상 강화를 통해 강력한 균형발전 지원체계를 구축하고 지역의 자율ᆞ책임성 강화","status":"세부계획 미정","statuscode":"none"},{"name":"세종시 - 명실상부한 행정중심복합도시의 기능을 수행하기 위해 중앙행정기관 추가 이전","status":"세부계획 미정","statuscode":"none"},{"name":"서울-세종 고속도로 조기 구축 등 추진","status":"진행중 (재정사업 전환, 구리~안성 구간 공사시작)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=057&aid=0001155079"},{"name":"이미 조성된 혁신도시 중심으로 신산업 테스트베드 구축, 기업유치 등을 통해 혁신클러스터 조성","status":"세부계획 미정","statuscode":"none"},{"name":"속도감 있는 새만금 사업추진을 위해 공공주도 매립, 국제공항ᆞ 신항만 등 물류교통망 조기 구축","status":"세부계획 미정","statuscode":"none"},{"name":"업종 고도화를 넘어 도시재생과 연계한 창업ᆞ혁신, 문화ᆞ복지공간까지 어우러진 산업단지 혁신 2.0 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["국가균형발전위원회","균형발전","세종특별자치시","행정중심복합도시","중앙행정기관","서울세종고속도로","혁신도시","혁신클러스터","새만금","물류교통망","산업단지혁신2.0"]},{"name":"79: 도시경쟁력 강화 및 삶의 질 개선을 위한 도시재생뉴딜 추진","department":["국토부"],"category":["주택/부동산","경제","생활"],"description":[{"name":"도시재생뉴딜사업 발굴ᆞ지원 - 구도심과 노후주거지 등을 포함하여 정비가 시급히 필요한 곳부터 우선적으로 선정하여 지역특성에 맞게 지원","status":"일부 진행중 (2017.8.2 부동산대책 영향)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=277&aid=0004048087"},{"name":"’17년까지 도시재생뉴딜 사업 추진방안 및 부처협업 TFT 구축 등 추진기반 마련, 매년 도시재생뉴딜 사업지역 선정ᆞ지원","status":"일부 진행중 (2017.8.2 부동산대책 영향)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=277&aid=0004048087"},{"name":"지역 중심의 뉴딜사업 추진을 위해 지자체ᆞ지역전문가 등 추진주체 역량 강화 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’17년까지 도시재생 연계형 공공 임대주택 공급 방안 마련 및 ’18년부터 본격 공급","status":"세부계획 미정","statuscode":"none"},{"name":"주거취약계층 녹색건축물 우선 적용 - ’18년부터 공공임대주택 등 소형 주택 에너지성능을 패시브하우스 수준으로 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["도시재생뉴딜사업","구도심","노후주거지","도시재생연계형공공임대주택","공공임대주택","녹색건축물","에너지성능"]},{"name":"80: 해운ᆞ조선 상생을 통한 해운강국 건설","department":["해수부"],"category":["경제","해양"],"description":[{"name":"’17년 한국해양진흥공사법 제정 및 ’18년 공사 발족 이후 해운 선사에 대해 원스톱 지원 시행","status":"추진중","statuscode":"none"},{"name":"’17년 국적선사 간 협의체인 한국해운연합(KSP)을 결성하여 중복노선 구조조정과 신항로 개척으로 국적선대의 경쟁력 제고","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 외항선박에 친환경선박 폐선보조금 지급, ’20년 연안화물선으로 확대하여 ’22년까지 총 100척 건조","status":"세부계획 미정","statuscode":"none"},{"name":" ’17년부터 친환경ᆞ고효율선박 기술개발 착수, ’20년 LNG추진선 기반 구축, ‘22년 해양플랜트 기자재 국산화로 조선산업 활력 회복","status":"세부계획 미정","statuscode":"none"},{"name":"’19년부터 국가필수해운제도를 도입하여 비상시 화물운송체계 구축, 선ᆞ화주 상생으로 국적선사 이용비율 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 해양산업클러스터 2개 지정 및 ’19년 완공, ’17년부터 부산북항 상부시설, 광양항 묘도, 인천항 영종도 재개발 착공","status":"세부계획 미정","statuscode":"none"}],"keywords":["해운","한국해양진흥공사법","한국해양진흥공사","한국해운연합","외항선박","친환경선박","폐선보조금","연안화물선","고효율선박","LNG추진선","해양플랜트","조선산업","국가필수해운제도","해양산업클러스터","인천항영종도","광양항묘도","부산북항"]},{"name":"81: 누구나 살고 싶은 복지 농산어촌 조성","department":["농식품부"],"category":["농산어촌","경제","일자리"],"description":[{"name":"’18년부터 군지역에 100원 택시 등 농어촌형 교통모델 확대","status":"세부계획 미정","statuscode":"none"},{"name":"농지연금 신규상품 도입(’17년), 국민연금 기준소득금액 단계적 상향 지원 검토","status":"진행중 (농지연금 신규상품)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=117&oid=298&aid=0000225158"},{"name":"영농ᆞ가사도우미 지원 확대 및 관련 법 개정을 통해 ’21년부터 여성 농어업인 대상 특화 건강검진 시범실시","status":"세부계획 미정","statuscode":"none"},{"name":"농어업 기반 6차산업 - ’17년 농산어촌 관광상품 개발, ’18년 농촌관광 등급평가제 개편 및 ’22년 우수 관광자원 선정ᆞ홍보 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"농어업 기반 6차산업 - ’18년사회적농업시범사업* 실시 및 관련 법적근거 마련 추진","status":"세부계획 미정","statuscode":"none"},{"name":"산림분야 일자리 - ’18년 나무의사 자격제도 도입 및 ’20년부터 목재산업단지 조성","status":"세부계획 미정","statuscode":"none"},{"name":"산림분야 일자리 - ’22년 전국 권역별 국ᆞ공립 산림복지단지와 국가 숲길 네트워크 조성","status":"세부계획 미정","statuscode":"none"}],"keywords":["농산어촌","군지역","100원택시","농지연금","영농가사도우미","농어업인","6차산업","농산어촌관광상품","농촌관광등급평가제","사회적농업시범사업","산림일자리","나무의사자격제도","목재산업단지","국공립산림복지단지","국가숲길네트워크"]},{"name":"82: 농어업인 소득안전망의 촘촘한 확충","department":["농식품부"],"category":["농산어촌","경제","복지"],"description":[{"name":"쌀은 시장격리, 사료용벼 전환 등 선제적 수확기 수급안정 방안 시행(’17년), ’18년~’19년 생산조정제(15만ha) 한시 도입","status":"세부계획 미정","statuscode":"none"},{"name":"친환경농업직불 단가 인상(’18년), 농업환경보전 프로그램 도입 등 생태ᆞ환경을 보전하는 방향으로 직불제 확대","status":"세부계획 미정","statuscode":"none"},{"name":"농업재해보험이 개발되지 않은 품목(농약대, 대파대, 시설부자재 등 35개)의 복구지원 단가 인상 - ’22년까지 밭고정ᆞ조건불리직불 단가를 단계적 인상, 조건불리수산 직불 단가 인상 및 사업대상을 전체 섬으로 확대 추진","status":"세부계획 미정","statuscode":"none"},{"name":"농어업인에 대한 농어업인안전보험 국고지원을 확대하고 산재보험 수준의 보험상품 개발ᆞ보급","status":"세부계획 미정","statuscode":"none"}],"keywords":["쌀시장격리","쌀","사료용벼","쌀생산조정제","농산물의무자조금","농산물생산안정제","친환경농업직불단가","농업재해보험","농어업인안전보험"]},{"name":"84: 깨끗한 바다, 풍요로운 어장","department":["해수부"],"category":["해양","경제","환경/안전"],"description":[{"name":"’18년 휴어제, ’19년 어구관리법 제정, ’21년 전자 어구 실명제 도입을 통해 ’22년 연근해 어업생산량 110만톤 회복","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 명태 인공종자 매년 100만 마리 방류, ’19년부터 명태 양식을 시작하여 ‘22년 명태 자원 회복 및 대량 양식생산체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 ICT 첨단양식기술 개발계획 수립, ’21년부터 스마트양식장 구축 등으로 ’22년 양식 생산량 230만톤 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 수산물 수출지원센터 4개소 설치 및 단계적 확장으로 ’22년 주요국 수출거점 구축 완료 및 수산물 수출 40억달러 달성","status":"진행중","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=022&aid=0003192055"},{"name":"’19년 수산물 이력추적관리제 단계적 확대, ’17년부터 양식장 HACCP 등록을 매년 30개씩 확대하여 ’22년 180개소 등록 - 산지거점 유통센터 6개소, 소비지물류센터 2개소 건립 등 유통구조 혁신","status":"진행중 (2017.4부터 양식장 HACCP 확대추진)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=421&aid=0002655974"},{"name":"’17년 해양공간계획법 제정, ’18년 남해안부터 ’21년 동해안까지 공간계획을 수립하여 ‘22년 전 해역을 통합관리 - ’22년까지 해양보호구역 34개소 지정, 갯벌복원 20개소 완료","status":"세부계획 미정","statuscode":"none"}],"keywords":["휴어제","어구관리법","전자어구실명제","연근해어업생산량","명태인공종자","첨단양식기술","스마트양식장","수산물수출지원센터","수산물이력추적관리제","해양공간계획법"]},{"name":"88: 방산비리 척결과 4차 산업혁명 시대에 걸맞은 방위산업 육성","department":["국방부"],"category":["4차산업혁명","안보/국방","경제","과학"],"description":[{"name":"방위사업 비리에 대한 처벌 및 예방시스템 강화","status":"진행중 (대통령 수석보좌관회의 발언, 수사 진행중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=015&aid=0003797291"},{"name":"국방획득체계 전반의 업무수행에 대한 투명성ᆞ 전문성ᆞ효율성ᆞ경쟁력 향상 방안 모색","status":"세부계획 미정","statuscode":"none"},{"name":"국방R&D 기획체계 개선, 국가R&D 역량 국방분야 활용 증진 등을 통해 방산 경쟁력 강화 및 첨단무기 국내 개발 기반 구축","status":"세부계획 미정","statuscode":"none"},{"name":"인센티브 중심으로 방산 생태계를 조성하고, 4차 산업혁명 등 기술변화에 대응하는 국방R&D 수행체계 개편","status":"세부계획 미정","statuscode":"none"},{"name":"방산 중소‧벤처기업 육성으로 안정적 수출기반 마련 및 방산 인프라 강화를 통한 양질의 일자리 창출","status":"세부계획 미정","statuscode":"none"},{"name":"국방항공 유지보수 운영(MRO) 분야와 성과기반 군수(PBS) 확대로 민간산업 활성화 지원","status":"세부계획 미정","statuscode":"none"}],"keywords":["방위사업","국방획득체계","첨단무기","인센티브","4차산업혁명","방산생태계","방산중소벤처기업","국방항공","국방R&D"]},{"name":"90: 한반도 신경제지도 구상 및 경제통일 구현","department":["통일부"],"category":["경제","북한","환경/안전","관광"],"description":[{"name":"한반도 신경제지도 - 3대 벨트 구축을 통해 한반도 신성장동력 확보 및 북방경제 연계 추진","status":"세부계획 미정","statuscode":"none"},{"name":"동해권 에너지ᆞ자원벨트 : 금강산, 원산ᆞ단천, 청진ᆞ나선을 남북이 공동개발 후 우리 동해안과 러시아를 연결","status":"세부계획 미정","statuscode":"none"},{"name":"서해안 산업ᆞ물류ᆞ교통벨트 : 수도권, 개성공단, 평양ᆞ남포, 신의주를 연결하는 서해안 경협벨트 건설","status":"세부계획 미정","statuscode":"none"},{"name":"DMZ 환경ᆞ관광벨트 : 설악산, 금강산, 원산, 백두산을 잇는 관광벨트 구축 및 DMZ를 생태ᆞ평화안보 관광지구로 개발","status":"세부계획 미정","statuscode":"none"},{"name":"민ᆞ관 협력 네트워크를 통해 남북한 하나의 시장 협력 방안을 마련하고, 여건 조성 시 남북 시장협력을 단계적으로 실행 하여 생활공동체 형성","status":"세부계획 미정","statuscode":"none"},{"name":"남북경협기업 피해 조속 지원을 실시하고, 남북관계 상황을 감안하여 유연하게 민간경협 재개 추진","status":"진행중 (2017년내 남북경협기업 피해지원 목표)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009430862"},{"name":"여건 조성 시 개성공단 정상화 및 금강산 관광을 재개하고, 남북공동 자원 활용을 위한 협력 추진","status":"세부계획 미정","statuscode":"none"},{"name":"통일경제특구 지정ᆞ운영, 남북 협의를 통해 남북 접경지역 공동관리위원회 설치, 서해 평화협력특별지대 추진 여건 조성","status":"세부계획 미정","statuscode":"none"}],"keywords":["한반도신경제지도","3대벨트","신성장동력","북방경제","동해권에너지자원벨트","서해안산업물류교통벨트","DMZ환경관광벨트","남북경협기업","개성공단","금강산관광","남북공동자원","통일경제특구","남북접경지역공동관리위원회","서해평화협력특별지대"]},{"name":"97: 주변 4국과의 당당한 협력외교 추진","department":["외교부"],"category":["외교","안보/국방","과거사","정치/정부","경제","FTA"],"description":[{"name":"정상 방미 등 활발한 고위급 외교 전개를 통한 한미동맹을 호혜적 책임동맹관계로 지속 심화ᆞ발전","status":"진행중 (한미정상회담 완료, 국방장관회담 추진중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009445984"},{"name":"미 조야를 대상으로 한 활발한 대미외교 전개로 한미동맹 저변 공고화, 연합방위태세 강화 및 한ᆞ미 간 현안 합리적 해결","status":"세부계획 미정","statuscode":"none"},{"name":"한ᆞ중 양국 정상 및 고위급 간 활발한 교류ᆞ대화, 사드 문제 관련 소통 강화로 신뢰 회복을 통한 실질적 한중 전략적 협력 동반자관계 내실화","status":"추진중 (2017.8 예정)","statuscode":"none","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488642"},{"name":"북핵문제 해결을 위한 한ᆞ중협력 강화, 한ᆞ중 FTA 강화 등을 통한 경제협력 확대, 미세먼지 대응 등 국민체감형 사안 관련 협력 강화","status":"일부 진행중","statusdesc":"한·중·일 환경장관회의, 미세먼지 대응 협력 등 논의 - 중국과는 미세먼지를 비롯한 대기오염 대응 정책·연구·기술 협력강화, 자연환경, 물, 토양 등 환경 전반에 걸친 향후 5년 간(2018~2022년)의 한·중 환경협력계획과 양국간 환경산업·기술 협력에 대해 의견을 나눈다. 일본과는 양국 간 미세먼지(PM2.5) 공동연구 협력에 대해 논의하고, 미국의 파리협정 탈퇴로 그 중요성이 부각되고 있는 기후변화 대응에 대하여 입장을 공유할 계획이다.","statuscode":"partiallywip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841495&pageIndex=9&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"독도 및 역사왜곡에는 단호히 대응하는 등 역사를 직시하면서 한ᆞ일 간 미래지향적 성숙한 협력동반자 관계 발전 - 과거사와 북한 핵ᆞ미사일 대응, 양국 간 실질협력과는 분리 대응","status":"세부계획 미정","statuscode":"none"},{"name":"위안부 문제는 피해자와 국민들이 동의할 수 있는 해결방안 도출","status":"진행중 (위안부 태스크포스 발족)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488248"},{"name":"북핵문제 해결을 위한 전략적 소통 및 한ᆞ러 경제협력 강화를 통해 한ᆞ러 전략적 협력동반자 관계의 실질적 발전 추진 - 정상교류를 포함 고위급 교류 활성화, 극동지역 개발 협력 확대, 북극ᆞ에너지ᆞFTA 등 미래성장동력 확충 등","status":"세부계획 미정","statuscode":"none"}],"keywords":["주변4국","협력외교","한미동맹","대미외교","한미연합방위","한중","북핵","미세먼지","한일","역사왜곡","독도","과거사","위안부","한러","경제협력","극동지역","북극","에너지","FTA"]},{"name":"98: 동북아플러스 책임공동체 형성","department":["외교부"],"category":["FTA","경제","외교"],"description":[{"name":"동북아 다자 안보협력 진전을 위해 정부 간 협의회 정례화ᆞ제도화 모색","status":"세부계획 미정","statuscode":"none"},{"name":"한중일 3국 협력 강화를 비롯한 소다자 협력 추진","status":"세부계획 미정","statuscode":"none"},{"name":"MIKTA지속추진ᆞ강화및동아시아내다양한형태의중견국협력시도","status":"세부계획 미정","statuscode":"none"},{"name":"신남방정책 - 아세안의 수요에 기반한 실질 협력 강화(주변 4국 유사 수준)","status":"세부계획 미정","statuscode":"none"},{"name":"인도와의 전략적 공조 강화 및 실질 경제 협력 확대(특별 전략적 동반자관계)","status":"세부계획 미정","statuscode":"none"},{"name":"신북방정책 - 남북러 3각 협력(나진-하산 물류사업, 철도, 전력망 등) 추진기반 마련","status":"세부계획 미정","statuscode":"none"},{"name":"한-EAEU FTA 추진 및 중국 일대일로 구상 참여","status":"진행중 (유라시아경제연합 정부간 협의중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=015&aid=0003753911"}],"keywords":["FTA","신남방정책","신북방정책","동북아","안보협력","소다자협력","아세안","인도","남북러","나진하산물류사업","MIKTA"]},{"name":"99: 국익을 증진하는 경제외교 및 개발협력 강화","department":["외교부"],"category":["외교","경제"],"description":[{"name":"인도 등 신흥시장 진출을 위해 경제공동위를 통한 양자경제 관리, 경제협력협정 체결을 통한 법적 기반 마련 등 외교적 지원","status":"세부계획 미정","statuscode":"none"},{"name":"기후변화협상 적극 참여, 자발적 감축 공약 제출 준비","status":"진행중 (한-중간)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=123&oid=298&aid=0000225034"},{"name":"기업 등과의 협력사업 및 글로벌 인재양성 확대를 통한 민간 일자리 창출 기여, ODA 분야 공공부문 일자리 창출, 인프라 사업 등 우리나라의 해외진출을 통한 국익 기여","status":"세부계획 미정","statuscode":"none"},{"name":"유ᆞ무상간 전략적 연계, 무상원조의 통합적 추진 및 연계성 강화를 통해 국익을 증진하는 전략적 국제개발 협력 이행 - 국제개발협력위원회(총리실) 및 무상개발협력전략회의(외교부) 등 적극 활용","status":"세부계획 미정","statuscode":"none"}],"keywords":["ODA","경제외교","인도","기후변화협상","기후변화","개발원조","공공부문","일자리","무상원조","국제개발협력","무상개발협력"]},{"name":"100: 보호무역주의 대응 및 전략적 경제협력 강화","department":["산업부"],"category":["경제","외교","FTA"],"description":[{"name":"한미 FTA 상호호혜성을 바탕으로 양국 교역ᆞ투자 발전 - FTA 재협상 등 모든 가능성을 열어놓고 국익 극대화 관점에서 철저 대비","status":"진행중 (재협상 통상교섭본부장 임명)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=422&aid=0000269596"},{"name":"협력채널 재개(통상ᆞ산업ᆞ품질검사 분야 협력채널 조기 개최, 한중 FTA 분야별 이행위원회 개최 등), 협력사업 등을 통해 한중 관계 복원 및 한중 FTA 활용 지속 확대","status":"세부계획 미정","statuscode":"none"},{"name":"RCEP(역내포괄적경제동반자협정) 및 한중일 FTA 적극 참여 등 동아시아 경제통합의 중심역할 수행","status":"진행중 (RCEP 제19차 참석)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=123&oid=298&aid=0000224734"},{"name":"ASEANᆞ인도 등 거대 신흥시장과의 맞춤형 경제 협력을 강화하고, 신규 FTA 협상(남미공동시장(브라질 등 4개국), 유라시아경제연합(러시아 등 5개국), 멕시코 등)을 적극 추진","status":"진행중 (유라시아경제연합 정부간 협의중, 브라질 추진중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=023&aid=0003270032"},{"name":"APEC, WTO 각료회의, ASEM 경제장관회의(’17.9) 등 계기 보호무역 대응 논의를 주도하고, 자유무역 선호국가 간 ‘통상 선진국가 클럽’ 구성 추진","status":"세부계획 미정","statuscode":"none"},{"name":"범정부 통상정책 총괄ᆞ조정 기능 강화, 통상 전문성 제고, 관련 업계 수입규제 대응 원스톱 지원체계 구축 등 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["FTA","한미","한미FTA","RCEP","역내포괄적경제동반자협정","한중일","아세안","인도","브라질","남미공동시장","유라시아경제연합","러시아","멕시코","APEC","WTO","ASEM경제장관회의","보호무역","통상정책","통상","통상역량"]}]},{"theme":"younggen","keys":[{"name":"18: 성별ᆞ연령별 맞춤형 일자리 지원 강화","department":["고용부"],"category":["일자리","청년"],"description":[{"name":"’18년부터 공공기관 청년고용 의무비율 상향(매년 정원의 3% → 5%)","status":"세부계획 미정","statuscode":"none"},{"name":"민간부문 청년 신규채용 권고(인센티브 검토)","status":"세부계획 미정","statuscode":"none"},{"name":"중소기업이 청년 3명 정규직 채용 시 1명분 임금 지원(’17년 5천명, ’18년~’20년은 매년 신규 2만명)","status":"세부계획 미정","statuscode":"none"},{"name":"취성패 3단계와 연계한 구직촉진수당(30만원, 3개월) 신설ᆞ지급(’17년~’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"’19년부터 훈련참여ᆞ구직활동 청년에게 구직촉진수당(50만원, 6개월) 지급","status":"세부계획 미정","statuscode":"none"},{"name":"’20년부터 저소득 근로빈곤층을 포함한 한국형 실업부조로 발전","status":"세부계획 미정","statuscode":"none"},{"name":"희망퇴직 남용 방지, 경영상 해고제도 개선방안 등 근로계약 종료 전반에 관한 개선방안 마련(’17년)으로 정년제도 실효성 제고","status":"세부계획 미정","statuscode":"none"},{"name":"‘재직-전직ᆞ재취업-은퇴’ 단계별 재취업 지원","status":"세부계획 미정","statuscode":"none"},{"name":"적극적 고용개선조치 등 적용사업장 확대, 남녀고용평등법 전 사업장 적용","status":"세부계획 미정","statuscode":"none"},{"name":"새일센터 확대(150→175개소), 창업지원ᆞ직업훈련ᆞ취업 장려금 등 일자리 연계기능 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공기관","청년고용","신규채용","중소기업","정규직","구직촉진수당","저소득근로빈곤층","희망퇴직","해고제도","근로계약","재취업","은퇴","고용개선조치","남녀고용평등법","새일센터","창업지원","직업훈련","취업장려금"]},{"name":"19: 실직과 은퇴에 대비하는 일자리 안전망 강화","department":["고용부"],"category":["일자리","청년","노인"],"description":[{"name":"고용보험 가입대상 확대 예술인, 산재보험 적용대상 특고부터 단계적 적용(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"65세 이상 어르신, 자영업자 고용보험 가입요건 완화 및 사회보험료 지원(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 실업급여 지급수준 및 수급기간 상향으로 실업급여 보장성 강화","status":"세부계획 미정","statuscode":"none"},{"name":"초단시간근로자 및 자발적 이직자(장기 실직) 실업급여 수급자격 인정 방안 마련 및 중소 영세기업 근로자 공적퇴직연금 도입 검토","status":"세부계획 미정","statuscode":"none"},{"name":"고용복지+센터 확충","status":"세부계획 미정","statuscode":"none"},{"name":"취업상담인력 충원","status":"세부계획 미정","statuscode":"none"},{"name":"전문성 강화 및 처우개선 등을 통해 구직자가 만족하는 취업지원 서비스 제공(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"’19년 국가일자리정보플랫폼 구축을 통해 수요자 맞춤형 서비스 제공 및 일자리 공약이행을 위한 핵심정보 생산","status":"세부계획 미정","statuscode":"none"},{"name":"미래 유망분야 고급인력 양성 지속 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 재직자 직업능력개발 혁신방안 수립","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 영세자영업자ᆞ신중년 등에 대한 특화훈련 실시","status":"세부계획 미정","statuscode":"none"},{"name":"산업별로 자격-교육ᆞ 훈련-경력이 연계되는 역량체계(SQF) 설계","status":"세부계획 미정","statuscode":"none"}],"keywords":["공영방송","지배구조","지상파","재허가","언론인","해직","임시조치"]},{"name":"36: 청년과학자와 기초연구 지원으로 과학기술 미래역량 확충","department":["과기부"],"category":["청년","과학","4차산업혁명","여성"],"description":[{"name":"기초연구 지원 확대 - 연구자 주도 기초연구 예산 2배 확대(’17년 1.2조원), 연구과제 관리・평가제도 등의 개선을 통해 연구자 자율성 강화","status":"세부계획 미정","statuscode":"none"},{"name":"박사후 연구원 등에 근로계약 체결 및 4대 보험 보장 의무화","status":"세부계획 미정","statuscode":"none"},{"name":"중소기업 R&D 부서에 취업하는 청년 과학기술인 연금 지원","status":"세부계획 미정","statuscode":"none"},{"name":"미취업 석ᆞ박사의 기업 연구과제 참여 지원, 과제기반 테뉴어 제도 도입","status":"세부계획 미정","statuscode":"none"},{"name":"경력단절 여성 과학기술인과 산‧학‧연 기관 매칭, 대체인력 지원 등으로 여성과학기술인의 경력 단절 방지","status":"세부계획 미정","statuscode":"none"}],"keywords":["기초연구","과학","연구자","연구과제","박사후연구원","근로계약","4대보험","중소기업","과학기술인","청년","석박사","경력단절","여성","R&D"]},{"name":"41: 대ᆞ중소기업 임금 격차 축소 등을 통한 중소기업 인력난 해소","department":["중기부"],"category":["청년","일자리","경제"],"description":[{"name":"’17년부터 청년추가고용장려금 운영, 중소기업이 청년 3명 정규직 채용 시 1명분 임금 지원","status":"준비중 (2017년 3000명, 2018년 2만명 예정)","statuscode":"await","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=008&aid=0003909010"},{"name":"중소기업 인재 유입을 촉진하고 재교육 확산을 위해 ’22년까지 ICT융합 등 4차 산업혁명 관련 계약학과 대폭 확충 - 마이스터고ᆞ특성화고 우수 학생을 기초R&D 전문인력 등으로 양성하는 ‘영마이스터 육성 과정’을 신설ᆞ운영","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 기업 성장 후 주식ᆞ이익 일부를 근로자와 공유하도록 사전 약정하는 미래성과공유제 도입","status":"세부계획 미정","statuscode":"none"}],"keywords":["청년추가고용장려금","중소기업","정규직","청년","4차산업혁명","마이스터고","특성화고","영마이스터","미래성과공유제"]},{"name":"42: 국민의 기본생활을 보장하는 맞춤형 사회보장","department":["복지부"],"category":["복지","청년","노인","아동","보육"],"description":[{"name":"기초생활보장 주거급여는 ’18년부터 부양의무자 기준 폐지, 생계ᆞ의료급여는 소득재산 하위 70% 중 노인ᆞ중증장애인이 포함된 가구에 대한 부양의무자 기준 적용 제외(’19년부터 단계적 확대)","status":"진행중 (2017년 11월부터 기준완화)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=020&aid=0003084039"},{"name":"’18년부터 0~5세 아동수당 월 10만원 지급","status":"입법예고","statusdesc":"18년 7월부터 지급키로 하고 아동수당법 제정안에 대해 17년 9월 4일까지 입법예고","statuscode":"congress","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841150&pageIndex=22&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"’17년부터 미취업 청년에 대해 청년구직촉진수당(30만원, 3개월) 지급","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 기초연금ᆞ장애인연금(기초급여)을 25만원으로 인상","status":"입법예고","statuscode":"congress","statusdesc":"기존에 기초연금을 수급하는 어르신들은 내년 4월부터 현행 20만 6050원에서 약 5만 원 가량 인상된 25만원을 기초연금으로 받을 수 있음","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841333&pageIndex=15&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"국민연금ᆞ고용보험 등 사회보험 사각지대를 해소하고, 두루누리 사회보험료 지원사업에 건강보험료 추가 지원(신규가입자)","status":"세부계획 미정","statuscode":"none"},{"name":"장애등급제 단계적 폐지 및 종합지원체계 도입 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["기초생활보장","주거급여","부양의무자","생계급여","의료급여","소득재산","노인","중증장애인","아동수당","청년구직촉진수당","기초연금","장애인연금","국민연금","고용보험","건강보험료","장애등급제"]},{"name":"47: 청년과 신혼부부 주거 부담 경감","department":["국토부"],"category":["주택/부동산","청년"],"description":[{"name":"’22년까지 20만호(전체의 30%) 임대주택 신혼부부 공급(준공기준) - 신혼부부 특화주택 건설 및 공공임대주택 입주자 선정 시 신혼부부 특별공급 비율 상향","status":"진행중","statusdesc":"청년/신혼부부 전세임대주택 3200채, 시세 30% 수준의 청년매입임대주택 1500호 2017년 내 공급","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840953&pageIndex=28&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"’18년에 신혼부부 전용 전세자금 및 구입자금 대출 상품 출시 및 저소득 신혼부부 대상 주거비 경감 지원 실시","status":"세부계획 발표/준비중","statuscode":"await","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=421&aid=0002865860"},{"name":"임대료가 저렴한 셰어형 임대주택(5만실) 및 역세권 등 주변 청년주택(20만실) 공급, 기숙사 확대(5만명) 등","status":"진행중","statusdesc":"청년/신혼부부 전세임대주택 3200채, 시세 30% 수준의 청년매입임대주택 1500호 2017년 내 공급","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840953&pageIndex=28&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="}],"keywords":["신혼부부","임대주택","공공임대주택","전세자금","저소득신혼부부","셰어형임대주택","청년주택","기숙사확대"]},{"name":"49: 유아에서 대학까지 교육의 공공성 강화","department":["교육부"],"category":["청년","아동","교육","복지","보육"],"description":[{"name":"’18년 어린이집 누리과정 전액 국고지원","status":"세부계획 미정","statuscode":"none"},{"name":"국ᆞ공립유치원 취학률 확대(’17년 25% → ’22년 40%)","status":"세부계획 미정","statuscode":"none"},{"name":"교사자질 향상과 교사처우 개선(’18년), 전문교육과정 운영, 자격체계 개편 추진(교육부ᆞ복지부)","status":"세부계획 미정","statuscode":"none"},{"name":"온종일 돌봄교실을 초등학교 전 학년으로 점차 확대하고 내실화방안 병행 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’20년부터 고등학교 무상교육 단계적 실시(’22년 완성)를 통해 고등학생 입학금ᆞ수업료ᆞ학교운영지원비ᆞ교과서비 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 대학생이 체감할 수 있는 등록금 부담 경감, 학자금 대출이자 부담 경감 및 입학금 단계적 폐지 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["누리과정","어린이집","국공립유치원","교사처우","돌봄교실","무상교육","고등학교","등록금","입학금","학자금대출이자","대학생"]},{"name":"53: 아동ᆞ청소년의 안전하고 건강한 성장 지원","department":["여가부"],"category":["아동","복지","보육","청년"],"description":[{"name":"’21년까지 학교밖청소년지원센터 전체 시군구 확대로 접근성ᆞ지원기능 강화","status":"세부계획 미정","statuscode":"none"},{"name":"생애주기별 각종 위기에서 예방부터 보호·치료까지 종합적 지원체계 마련, 가족정책과 아동ᆞ청소년 업무 연계ᆞ통합 추진","status":"세부계획 미정","statuscode":"none"},{"name":"시설 퇴소 아동에게 실질적 도움이 될 수 있는 소득ᆞ주거ᆞ자립지원 강화","status":"세부계획 미정","statuscode":"none"},{"name":"시도 등에 청소년 육성 전담공무원 배치 확대","status":"세부계획 미정","statuscode":"none"},{"name":"청소년 활동 및 자원봉사 운영 내실화, 방과후아카데미 운영 확대","status":"세부계획 미정","statuscode":"none"}],"keywords":["학교밖청소년지원센터","생애주기","시설퇴소아동","청소년육성전담공무원"]},{"name":"83: 지속가능한 농식품 산업 기반 조성","department":["농식품부"],"category":["농산어촌","청년","정치/정부"],"description":[{"name":"’18년 청년농업인 영농정착지원제 도입, 귀농ᆞ귀촌 임대주택단지 조성 등 영농창업 초기 생활안정ᆞ정착지원 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 6차산업형 친환경농업지구 100개소 조성 등 친환경ᆞ동물복지 농축산업 확산","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 가축질병 방역체계 강화를 위한 보험제도 도입, ’20년 한국형 구제역 백신 생산, ’22년까지 깨끗한 축산농장 5천호 조성 추진","status":"추진중 (가축질병보험 18년 시범운영)","statuscode":"none"},{"name":"’22년까지 스마트팜 시설원예 7천ha, 축산 5천호 보급 및 관련 R&D 투자 확대","status":"세부계획 미정","statuscode":"none"},{"name":"농식품바우처 시범사업, 유기ᆞ이력제 수산물 학교급식 확대, GAP 및 HACCP 인증농가 확대 등","status":"세부계획 미정","statuscode":"none"},{"name":"’20년 기능성식품산업육성법 제정 등 기능성식품, 발효식품 육성","status":"세부계획 미정","statuscode":"none"},{"name":"대통령 직속 농어업ᆞ농어촌 특별위원회 설치 추진 및 농어업회의소 법적 근거 마련, 지방분권형 농정 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["청년농업인","영농정착지원제","귀농","귀촌","영농창업","친환경농업지구","가축질병방역체계","한국형구제역백신","깨끗한축산농장","스마트팜","농식품바우처","유기이력제수산물","기능성식품산업육성법","대통령직속농어업농어촌특별위원회","농어업회의소"]}]},{"theme":"oldgen","keys":[{"name":"19: 실직과 은퇴에 대비하는 일자리 안전망 강화","department":["고용부"],"category":["일자리","청년","노인"],"description":[{"name":"고용보험 가입대상 확대 예술인, 산재보험 적용대상 특고부터 단계적 적용(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"65세 이상 어르신, 자영업자 고용보험 가입요건 완화 및 사회보험료 지원(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 실업급여 지급수준 및 수급기간 상향으로 실업급여 보장성 강화","status":"세부계획 미정","statuscode":"none"},{"name":"초단시간근로자 및 자발적 이직자(장기 실직) 실업급여 수급자격 인정 방안 마련 및 중소 영세기업 근로자 공적퇴직연금 도입 검토","status":"세부계획 미정","statuscode":"none"},{"name":"고용복지+센터 확충","status":"세부계획 미정","statuscode":"none"},{"name":"취업상담인력 충원","status":"세부계획 미정","statuscode":"none"},{"name":"전문성 강화 및 처우개선 등을 통해 구직자가 만족하는 취업지원 서비스 제공(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"’19년 국가일자리정보플랫폼 구축을 통해 수요자 맞춤형 서비스 제공 및 일자리 공약이행을 위한 핵심정보 생산","status":"세부계획 미정","statuscode":"none"},{"name":"미래 유망분야 고급인력 양성 지속 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 재직자 직업능력개발 혁신방안 수립","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 영세자영업자ᆞ신중년 등에 대한 특화훈련 실시","status":"세부계획 미정","statuscode":"none"},{"name":"산업별로 자격-교육ᆞ 훈련-경력이 연계되는 역량체계(SQF) 설계","status":"세부계획 미정","statuscode":"none"}],"keywords":["공영방송","지배구조","지상파","재허가","언론인","해직","임시조치"]},{"name":"42: 국민의 기본생활을 보장하는 맞춤형 사회보장","department":["복지부"],"category":["복지","청년","노인","아동","보육"],"description":[{"name":"기초생활보장 주거급여는 ’18년부터 부양의무자 기준 폐지, 생계ᆞ의료급여는 소득재산 하위 70% 중 노인ᆞ중증장애인이 포함된 가구에 대한 부양의무자 기준 적용 제외(’19년부터 단계적 확대)","status":"진행중 (2017년 11월부터 기준완화)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=020&aid=0003084039"},{"name":"’18년부터 0~5세 아동수당 월 10만원 지급","status":"입법예고","statusdesc":"18년 7월부터 지급키로 하고 아동수당법 제정안에 대해 17년 9월 4일까지 입법예고","statuscode":"congress","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841150&pageIndex=22&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"’17년부터 미취업 청년에 대해 청년구직촉진수당(30만원, 3개월) 지급","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 기초연금ᆞ장애인연금(기초급여)을 25만원으로 인상","status":"입법예고","statuscode":"congress","statusdesc":"기존에 기초연금을 수급하는 어르신들은 내년 4월부터 현행 20만 6050원에서 약 5만 원 가량 인상된 25만원을 기초연금으로 받을 수 있음","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841333&pageIndex=15&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"국민연금ᆞ고용보험 등 사회보험 사각지대를 해소하고, 두루누리 사회보험료 지원사업에 건강보험료 추가 지원(신규가입자)","status":"세부계획 미정","statuscode":"none"},{"name":"장애등급제 단계적 폐지 및 종합지원체계 도입 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["기초생활보장","주거급여","부양의무자","생계급여","의료급여","소득재산","노인","중증장애인","아동수당","청년구직촉진수당","기초연금","장애인연금","국민연금","고용보험","건강보험료","장애등급제"]},{"name":"43: 고령사회 대비, 건강하고 품위 있는 노후생활 보장","department":["복지부"],"category":["노인","복지","여성"],"description":[{"name":"국민연금 소득대체율 인상을 ’18년 국민연금 재정계산과 연계하여 사회적 합의하에 추진","status":"세부계획 미정","statuscode":"none"},{"name":"기초연금액을 ’18년 25만원, ’21년 30만원으로 상향지급","status":"세부계획 미정","statuscode":"none"},{"name":"단시간ᆞ일용근로자, 경력단절 여성 등의 국민연금 가입 지원 확대 추진","status":"세부계획 미정","statuscode":"none"},{"name":"두루누리 건강보험 지원 확대, 건강보험 임의 계속 가입기간ᆞ대상 확대 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 전국 252개 치매안심센터 확충 및 치매 안심병원 확충 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 중증치매 환자 본인부담률 인하 및 고비용 진단검사 급여화, 장기요양 치매수급자 본인부담 경감 확대","status":"진행중","statuscode":"wip","statusdesc":"17년 10월부터 중증치매 환자는 건강보험 의료비의 10%만 부담. 중증 치매환자 가운데 정도가 심한 경우엔 일수 제한 없이, 통원치료가 가능한 경우에는 연간 최대 120일의 산정 특례적용.","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841328&pageIndex=16&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"노인 일자리수 ’17년 43.7만개에서 ’22년 80만개로 확대하고, 공익활동 참여수당을 ’20년까지 40만원으로 인상(일자리 유형에 따라 차등)","status":"세부계획 미정","statuscode":"none"},{"name":"국민연금기금운용위원회의 상설화, 기금투자운용 의사결정과정 및 투자내역ᆞ자산내역 공시 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["국민연금","기초연금","소득대체율","두루누리","건강보험","치매안심센터","중증치매환자","노인일자리","국민연금기금운용위원회"]},{"name":"44: 건강보험 보장성 강화 및 예방 중심 건강관리 지원","department":["복지부"],"category":["복지","아동","노인"],"description":[{"name":"건강보험 선별급여 적용항목 확대 및 신포괄수가 확대 등의 추진으로 비급여 풍선효과 해소","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"선택진료 폐지, 상급병실 단계적 급여화, 간호ᆞ간병통합서비스 확대(간호인력 확충 병행) 등 3대 비급여 부담 지속 경감","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"저소득층 의료비 부담 완화를 위해 소득수준을 고려하여 본인부담상한액 설정","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"’17년부터 15세 이하 아동 입원진료비 본인부담률을 5%로 인하하고, 민간실손보험 관리 강화로 건강보험 재정건전성 제고","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"40대 이상 진단 바우처 도입 등 건강검진 사후관리 강화, 초ᆞ중ᆞ고생 독감 예방접종 국가 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"정신건강 관련 서비스 전달체계 개편 및 전문인력 충원과 근무조건 개선, 자살예방 및 생명존중 문화 확산","status":"세부계획 미정","statuscode":"none"},{"name":"건강보험료 부과체계 개편 - 평가소득 폐지, 보수 외 고소득 직장인 보험료 부담 강화, 피부양자 단계적 축소 등 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["건강보험","선별급여","신포괄수가","비급여","본인부담상한액","진단바우처","건강검진","정신건강","평가소득","고소득직장인","건감보험료"]}]},{"theme":"housing","keys":[{"name":"21: 소득 주도 성장을 위한 가계부채 위험 해소","department":["금융위"],"category":["경제","주택/부동산"],"description":[{"name":"주택 담보 대출 비율(LTV) 및 소득 대비 부채 비율(DTI) 합리적 개선","status":"일부 완료 (2017.8.2 투기과열지구에서 40%로 강화)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=025&aid=0002741751"},{"name":"’17년부터 총체적 상환능력 심사(DSR)의 단계적 도입으로 가계부채 연착륙 유도","status":"진행중 (2019년까지 단계적 시행 예정)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=421&aid=0002856998"},{"name":"’17년에 대부업법과 이자제한법상의 최고금리를 일원화 하고, 단계적으로 20%로 인하","status":"진행중 (2018.1월 대부업법/이자제한법 최고금리 24%로 인하)","statuscode":"congress","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840768&pageIndex=1"},{"name":"국민행복기금 및 공공기관 보유 잔여채권 등에 대해 ’17년 중 적극적인 정리방안 마련ᆞ추진","status":"진행중 (2017년 8월말까지 소각 예정)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=032&aid=0002807032"},{"name":"’17년부터 소멸시효 완성채권 추심ᆞ매각 금지 법제화(채권추심법 개정) 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 중 금융소비자보호법 제정으로 동일기능-동일 규제 체계 도입, 피해구제 실효성 제고 등 금융소비자 보호 강화 노력","status":"세부계획 미정","statuscode":"none"},{"name":"취약계층 보호를 위해 집값만큼만 상환하는 비소구 주택담보대출은 정책모기지부터 민간으로 단계적 확대(’19년)","status":"세부계획 미정","statuscode":"none"}],"keywords":["주택담보대출비율","소득대비부채비율","LTV","DTI","가계부채","총체적상환능력심사","DSR","대부업법","이자제한법","최고금리","국민행복기금","공공기관","보유잔여채권","소멸시효완성채권","채권추심법","금융소비자보호법","금융소비자","취약계층","비소구주택담보대출"]},{"name":"46: 서민이 안심하고 사는 주거 환경 조성","department":["국토부"],"category":["생활","주택/부동산"],"description":[{"name":"공공임대주택 연평균 13만호 공급 및 공공지원 임대주택 연평균 4만호 공급 등 공적임대주택 연평균 17만호 공급","status":"세부계획 미정","statuscode":"none"},{"name":"임대주택 입주 시기 예측을 위해 대기자 명부제도를 도입하고, 복잡한 임대주택 유형을 통합하여 관리 효율성 제고","status":"세부계획 미정","statuscode":"none"},{"name":"주거급여 지원대상 지속 확대 및 지원금액 단계적 현실화","status":"세부계획 미정","statuscode":"none"},{"name":"주거약자용 주택 입주자 선정 시 중증장애인 우선 공급","status":"세부계획 미정","statuscode":"none"},{"name":"사회통합형 주택정책 - 자발적 임대주택의 등록 확대를 위한 인센티브 강화, 임대차계약갱신청구권 등의 단계적 제도화 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공임대주택","공공지원임대주택","임대주택","대기자명부제도","주거급여","중증장애인","자발적임대주택","임대차계약갱신청구권"]},{"name":"47: 청년과 신혼부부 주거 부담 경감","department":["국토부"],"category":["주택/부동산","청년"],"description":[{"name":"’22년까지 20만호(전체의 30%) 임대주택 신혼부부 공급(준공기준) - 신혼부부 특화주택 건설 및 공공임대주택 입주자 선정 시 신혼부부 특별공급 비율 상향","status":"진행중","statusdesc":"청년/신혼부부 전세임대주택 3200채, 시세 30% 수준의 청년매입임대주택 1500호 2017년 내 공급","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840953&pageIndex=28&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"’18년에 신혼부부 전용 전세자금 및 구입자금 대출 상품 출시 및 저소득 신혼부부 대상 주거비 경감 지원 실시","status":"세부계획 발표/준비중","statuscode":"await","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=421&aid=0002865860"},{"name":"임대료가 저렴한 셰어형 임대주택(5만실) 및 역세권 등 주변 청년주택(20만실) 공급, 기숙사 확대(5만명) 등","status":"진행중","statusdesc":"청년/신혼부부 전세임대주택 3200채, 시세 30% 수준의 청년매입임대주택 1500호 2017년 내 공급","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840953&pageIndex=28&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="}],"keywords":["신혼부부","임대주택","공공임대주택","전세자금","저소득신혼부부","셰어형임대주택","청년주택","기숙사확대"]},{"name":"48: 미래세대 투자를 통한 저출산 극복","department":["복지부"],"category":["주택/부동산","복지","보육","아동","여성"],"description":[{"name":"’22년까지 공공임대주택의 30% 신혼부부 우선 공급","status":"세부계획 미정","statuscode":"none"},{"name":"17년부터 난임시술비 등 건강보험 적용","status":"진행중 (2017년 10월 실시)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=018&aid=0003885557"},{"name":"출산지원금 도입방안 검토","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 아동수당 지급(0~5세, 월 10만원)","status":"세부계획 미정","statuscode":"none"},{"name":"매년 어린이집 대폭 확충하여 ’22년 국공립 어린이집 이용률 40% 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 첫 3개월 육아휴직급여 2배 인상, ’18년부터 아빠 육아휴직 보너스 제도 도입 및 육아로 인한 근로시간 단축 지원(10to4 더불어 돌봄)","status":"완료","statusdesc":"다음달 1일부터 육아휴직때 첫 3개월의 육아휴직급여는 통상임금의 80%(상한 150만원, 하한 70만원)로 상향 지급.","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841344&pageIndex=15&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"저출산 대책에 대한 컨트롤타워 기능 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 빅데이터 활용 위기아동 조기 발견 시스템 구축","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공임대주택","신혼부부","난임시술비","출산지원금","아동수당","국공립어린이집","육아휴직급여","육아휴직","저출산","위기아동조기발견시스템"]},{"name":"79: 도시경쟁력 강화 및 삶의 질 개선을 위한 도시재생뉴딜 추진","department":["국토부"],"category":["주택/부동산","경제","생활"],"description":[{"name":"도시재생뉴딜사업 발굴ᆞ지원 - 구도심과 노후주거지 등을 포함하여 정비가 시급히 필요한 곳부터 우선적으로 선정하여 지역특성에 맞게 지원","status":"일부 진행중 (2017.8.2 부동산대책 영향)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=277&aid=0004048087"},{"name":"’17년까지 도시재생뉴딜 사업 추진방안 및 부처협업 TFT 구축 등 추진기반 마련, 매년 도시재생뉴딜 사업지역 선정ᆞ지원","status":"일부 진행중 (2017.8.2 부동산대책 영향)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=277&aid=0004048087"},{"name":"지역 중심의 뉴딜사업 추진을 위해 지자체ᆞ지역전문가 등 추진주체 역량 강화 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’17년까지 도시재생 연계형 공공 임대주택 공급 방안 마련 및 ’18년부터 본격 공급","status":"세부계획 미정","statuscode":"none"},{"name":"주거취약계층 녹색건축물 우선 적용 - ’18년부터 공공임대주택 등 소형 주택 에너지성능을 패시브하우스 수준으로 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["도시재생뉴딜사업","구도심","노후주거지","도시재생연계형공공임대주택","공공임대주택","녹색건축물","에너지성능"]},{"name":"89: 장병 인권 보장 및 복무 여건의 획기적 개선","department":["국방부"],"category":["인권","안보/국방","여성","주택/부동산"],"description":[{"name":"’22년까지 최저임금의 50%까지 단계적 인상 추진","status":"세부계획 미정","statuscode":"none"},{"name":"공무상 부상을 입은 장병이 최선의 치료를 선택할 권리 보장 - 공무상 부상자에 대한 민간병원 치료비 전액 지원을 단계적으로 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 복무 학점 인정 추진 및 장병 자기개발 지원을 강화하고, 군 급식 시스템 개선을 통한 급식 질 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"국가인권위원회 내 ‘군인권보호관’ 신설 및 군 의문사 진상 규명을 위한 제도 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"여군 인력 및 계급별 진출을 확대하고, 여군의 임신ᆞ출산ᆞ육아지원을 위한 제도 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 성폭력 범죄자 처벌 강화 및 무관용 원칙 엄중 적용","status":"세부계획 미정","statuscode":"none"},{"name":"국세청 등 유관기관 협조를 통해 고위공직자 등 사회적 관심계층의 병적 집중관리 및 상시 모니터링ᆞ검증체계 강화","status":"세부계획 미정","statuscode":"none"},{"name":"맞춤형 주거 지원 및 민간주택을 활용한 공급방식 다변화 등 직업군인 주거 지원 제도 발전","status":"세부계획 미정","statuscode":"none"}],"keywords":["최저임금","공무상부상장병","군복무학점인정","군급식시스템","국가인권위원회","병봉급인상","군인권보호관","군의문사진상규명","여군","군성폭력범죄자","국세청","병적집중관리","직업군인"]}]},{"theme":"telecom","keys":[{"name":"31: 교통ᆞ통신비 절감으로 국민 생활비 절감","department":["국토부","미래부"],"category":["통신","생활","교통"],"description":[{"name":"광역알뜰교통카드 도입 등 제도 개선을 통해 싸고 편안한 대중교통 서비스 제공","status":"세부계획 미정","statuscode":"none"},{"name":"법 개정을 통해 ’18년 광역교통청 신설","status":"세부계획 미정","statuscode":"none"},{"name":"광역버스 노선 추가 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 수도권 광역급행철도 단계적 착공, 기존 전철망 단계적 급행열차 도입 및 시설 개선","status":"일부 완료/진행중 (경인선, 경의선, 안산선, 수인선 특급/급행 도입)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=103&oid=421&aid=0002857952"},{"name":"어르신(기초연금수급자) 월 11,000원 신규 감면, 저소득층 월 11,000원 추가 감면, 요금할인율을 현행 20%에서 25%로 상향","status":"입법예고 (2017년 9월 11일까지)","statuscode":"congress","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=105&oid=030&aid=0002629644"},{"name":"공공 와이파이(Wi-Fi) 확대 구축, 알뜰폰 경쟁력 강화 대책 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"단말기 지원금 상한제 조기 폐지, 분리공시제도 도입 등 고가 단말기 가격 투명화 유도, 위법행위 조사ᆞ시정 등을 통해 통신시장 투명화","status":"세부계획 미정","statuscode":"none"}],"keywords":["교통비","통신비","광역알뜰교통카드","대중교통","광역교통청","광역버스","광역급행철도","전철","급행열차","수도권","어르신","기초연급수급자","요금할인율","공용와이파이","알뜰폰","단말기지원금상한제","분리공시제도","통신시장"]},{"name":"33: 소프트웨어 강국, ICT 르네상스로 4차 산업혁명 선도 기반 구축","department":["과기부"],"category":["통신","4차산업혁명"],"description":[{"name":"대통령 직속 4차 산업혁명위원회 신설(’17년 8월) 및 범부처 4차 산업혁명 대응 추진계획 수립(’17년 3분기)","status":"세부계획 미정","statuscode":"none"},{"name":"지능정보 핵심기술 R&D, 인재양성 등에 집중투자하고, ICT 신기술ᆞ서비스 시장진입이 원활하도록 규제 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 IoT 전용망 구축","status":"일부 완료 (민간사업자 SKT)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=105&oid=031&aid=0000417744"},{"name":"’18년 10기가 인터넷서비스 상용화","status":"진행중 (민간사업자 SKT)","statuscode":"wip","statuslink":"http://www.zdnet.co.kr/news/news_view.asp?artice_id=20170803091522"},{"name":"’19년 5G 조기 상용화","status":"진행중 (민간이통사업자 중심/KT 2018년 세계최초 시범서비스)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=105&oid=003&aid=0008099268"},{"name":"소프트웨어 법체계 및 공공시장 혁신, 인재ᆞ 기술 역량 강화 등을 통해, 소프트웨어를 가장 잘하는 나라, 소프트웨어 기업하기 좋은 나라 실현","status":"세부계획 미정","statuscode":"none"},{"name":"AI 기반 사이버 보안 위협 대응체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"신정보격차 해소 계획 수립ᆞ시행","status":"세부계획 미정","statuscode":"none"},{"name":"통신분쟁조정제도 도입 등 이용자 보호 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["4차산업혁명위원회","4차산업혁명","R&D","지능정보","인재양성","인터넷","소프트웨어","공공시장","사이버보안","보안위협","신정보격차","통신분쟁조정제도","5G","IoT","10기가"]}]},{"theme":"transport","keys":[{"name":"31: 교통ᆞ통신비 절감으로 국민 생활비 절감","department":["국토부","미래부"],"category":["통신","생활","교통"],"description":[{"name":"광역알뜰교통카드 도입 등 제도 개선을 통해 싸고 편안한 대중교통 서비스 제공","status":"세부계획 미정","statuscode":"none"},{"name":"법 개정을 통해 ’18년 광역교통청 신설","status":"세부계획 미정","statuscode":"none"},{"name":"광역버스 노선 추가 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 수도권 광역급행철도 단계적 착공, 기존 전철망 단계적 급행열차 도입 및 시설 개선","status":"일부 완료/진행중 (경인선, 경의선, 안산선, 수인선 특급/급행 도입)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=103&oid=421&aid=0002857952"},{"name":"어르신(기초연금수급자) 월 11,000원 신규 감면, 저소득층 월 11,000원 추가 감면, 요금할인율을 현행 20%에서 25%로 상향","status":"입법예고 (2017년 9월 11일까지)","statuscode":"congress","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=105&oid=030&aid=0002629644"},{"name":"공공 와이파이(Wi-Fi) 확대 구축, 알뜰폰 경쟁력 강화 대책 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"단말기 지원금 상한제 조기 폐지, 분리공시제도 도입 등 고가 단말기 가격 투명화 유도, 위법행위 조사ᆞ시정 등을 통해 통신시장 투명화","status":"세부계획 미정","statuscode":"none"}],"keywords":["교통비","통신비","광역알뜰교통카드","대중교통","광역교통청","광역버스","광역급행철도","전철","급행열차","수도권","어르신","기초연급수급자","요금할인율","공용와이파이","알뜰폰","단말기지원금상한제","분리공시제도","통신시장"]},{"name":"32: 국가기간교통망 공공성 강화 및 국토교통산업 경쟁력 강화","department":["국토부"],"category":["교통"],"description":[{"name":"건설산업 경쟁력 강화: 간접비 지급방식 개선, 임금지급보증제 도입 등 불공정 해소 및 유망분야 육성, 해외진출 지원 통한 일자리 창출","status":"세부계획 미정","statuscode":"none"},{"name":"화물운송 종사자 보호강화: ’18년 화물자동차법 개정, ’20년 표준운임 산정위원회 구성ᆞ운영 등을 통해 ’21년부터 표준운임제 본격 시행","status":"일부 완료/진행중 (근로기준법 개정 추진)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=003&aid=0008093633"},{"name":"도로통행료 인하, 벽지노선 운영, 일반철도 서비스 개선 등을 통해 공공성 강화, 간선망 구축 등 교통 네트워크 효율화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 노후 철도차량ᆞ시설 개선을 위한 중장기 개량 계획 수립, 성능기반의 철도시설 관리체계 마련 및 노후도로 개선","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 공공형 택시를 시ᆞ군에 보급","status":"세부계획 미정","statuscode":"none"}],"keywords":["국가기간교통망","건설산업","간접비","임금지급보증제","해외진출","화물운송","화물자동차법","표준운임산정위원회","표준운임제","도료통행료","벽지노선","일반철도","간선망","교통네트워크","노후철도차량","노후철도시설","철도시설","공공형택시"]},{"name":"34: 고부가가치 창출 미래형 신산업 발굴ᆞ육성","department":["산업부","과기부","국토부","복지부"],"category":["4차산업혁명","과학","교통"],"description":[{"name":"전기차ᆞ수소차 충전 인프라 확충","status":"진행중 (2017년 말까지 급속충전소 2배 증가)","statusdesc":"환경부는 ‘전기차 충전 인프라 설치·운영 지침’을 개정해 18일부터 공용 완속 충전기 설치를 대폭 확대하며 신청은 전기차 충전소 홈페이지(www.ev.or.kr)에서 할 수 있다. 기존의 완속충전기 설치는 주차면 100면 이상인 공동주택·사업장 등으로 제한됐으나 이번 지침 개정으로 공용 충전기 설치공간이 있고 관리인력이 있으면 누구나 설치 신청을 할 수 있다.","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841262&pageIndex=17&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"자율차ᆞ전기차ᆞ수소차 안전기준 마련","status":"세부계획 미정","statuscode":"none"},{"name":"지능형 로봇, 3D프린팅, ARᆞVR, IoT가전, 스마트선박, 나노ᆞ바이오, 항공ᆞ우주 등 첨단기술 산업 육성을 위해 R&D 및 실증ᆞ인프라 구축 지원","status":"세부계획 미정","statuscode":"none"},{"name":"핵심기술 개발, 인력양성, 사업화 및 해외진출 지원 등을 통해 제약ᆞ바이오ᆞ마이크로의료로봇 등 의료기기 산업 성장 생태계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"자율주행차 테스트베드ᆞ인프라, 자율협력주행 커넥티드 서비스, 스마트도로 등을 구축하고 ’20년 준자율주행차 조기 상용화","status":"세부계획 미정","statuscode":"none"},{"name":"드론산업 활성화 지원 로드맵 마련(’17년) 및 인프라 구축, 제도 개선, 기술개발, 융합생태계 조성 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"신속인증제 운영 활성화, 범부처 TBT대응지원 센터 운영, 신속표준제도* 도입 등 신산업 표준ᆞ인증제도 혁신","status":"세부계획 미정","statuscode":"none"}],"keywords":["전기차","수소차","충전인프라","자율차","자율주행","로봇","나노","바이오","항공","우주","첨단기술","해외진출","의료기기","인프라","자율협력주행","스마트도로","준자율주행차","드론산업","신속인증제","신속표준제도","AR","VR","IoT","3D프린팅"]},{"name":"55: 안전사고 예방 및 재난 안전관리의 국가책임체제 구축","department":["안전처"],"category":["생활","교통","환경/안전"],"description":[{"name":"헌법 개정 시 국민안전권 명시","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 안전취약계층 지원 법적근거 마련 및 취약계층 안전서비스 확대","status":"세부계획 미정","statuscode":"none"},{"name":"범정부 교통안전 추진체계 구축 - ’17년에 스마트 철도안전 기본계획 수립, ’22년까지 항공안전 빅데이터 플랫폼 구축 등 철도와 항공기 안전 강화","status":"세부계획 미정","statuscode":"none"},{"name":"보행자 우선 및 교통약자 보호, 취약계층 배려 중심의 교통정책 추진","status":"세부계획 미정","statuscode":"none"},{"name":"승강기・건설・지하안전 등 부문별 위협요소 제거","status":"세부계획 미정","statuscode":"none"},{"name":"지진 조기경보체계 개선, 내진설계・보강, 활성단층 조사 실시, 지진 대비 교육・훈련 확대 등 ’20년까지 선진국 수준 지진 대응체계 마련 - ’18년까지 지진 조기경보시간 7초~25초로 단축(’16년 50초)","status":"세부계획 미정","statuscode":"none"},{"name":"소방특별조사 인력・대상 확대 및 위험특성별 맞춤형 안전대책 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 전문예보관 양성","status":"준비/진행중","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=103&oid=020&aid=0003082757"},{"name":"수치예보기술 개발(’19년) 및 ’21년까지 한국형 날씨 예측모델 운영 등을 통해 맞춤형 스마트 기상정보 제공","status":"진행중","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=103&oid=020&aid=0003082757"}],"keywords":["헌법","국민안전권","안전취약계층","교통안전","철도","항공기","안전위험요소","지진","조기경보체계","내진설계","활성단층","화재예방","전문예보관","수치예보기술","한국형날씨예측모델"]}]},{"theme":"4thgen_industrial","keys":[{"name":"33: 소프트웨어 강국, ICT 르네상스로 4차 산업혁명 선도 기반 구축","department":["과기부"],"category":["통신","4차산업혁명"],"description":[{"name":"대통령 직속 4차 산업혁명위원회 신설(’17년 8월) 및 범부처 4차 산업혁명 대응 추진계획 수립(’17년 3분기)","status":"세부계획 미정","statuscode":"none"},{"name":"지능정보 핵심기술 R&D, 인재양성 등에 집중투자하고, ICT 신기술ᆞ서비스 시장진입이 원활하도록 규제 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 IoT 전용망 구축","status":"일부 완료 (민간사업자 SKT)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=105&oid=031&aid=0000417744"},{"name":"’18년 10기가 인터넷서비스 상용화","status":"진행중 (민간사업자 SKT)","statuscode":"wip","statuslink":"http://www.zdnet.co.kr/news/news_view.asp?artice_id=20170803091522"},{"name":"’19년 5G 조기 상용화","status":"진행중 (민간이통사업자 중심/KT 2018년 세계최초 시범서비스)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=105&oid=003&aid=0008099268"},{"name":"소프트웨어 법체계 및 공공시장 혁신, 인재ᆞ 기술 역량 강화 등을 통해, 소프트웨어를 가장 잘하는 나라, 소프트웨어 기업하기 좋은 나라 실현","status":"세부계획 미정","statuscode":"none"},{"name":"AI 기반 사이버 보안 위협 대응체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"신정보격차 해소 계획 수립ᆞ시행","status":"세부계획 미정","statuscode":"none"},{"name":"통신분쟁조정제도 도입 등 이용자 보호 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["4차산업혁명위원회","4차산업혁명","R&D","지능정보","인재양성","인터넷","소프트웨어","공공시장","사이버보안","보안위협","신정보격차","통신분쟁조정제도","5G","IoT","10기가"]},{"name":"34: 고부가가치 창출 미래형 신산업 발굴ᆞ육성","department":["산업부","과기부","국토부","복지부"],"category":["4차산업혁명","과학","교통"],"description":[{"name":"전기차ᆞ수소차 충전 인프라 확충","status":"진행중 (2017년 말까지 급속충전소 2배 증가)","statusdesc":"환경부는 ‘전기차 충전 인프라 설치·운영 지침’을 개정해 18일부터 공용 완속 충전기 설치를 대폭 확대하며 신청은 전기차 충전소 홈페이지(www.ev.or.kr)에서 할 수 있다. 기존의 완속충전기 설치는 주차면 100면 이상인 공동주택·사업장 등으로 제한됐으나 이번 지침 개정으로 공용 충전기 설치공간이 있고 관리인력이 있으면 누구나 설치 신청을 할 수 있다.","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841262&pageIndex=17&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"자율차ᆞ전기차ᆞ수소차 안전기준 마련","status":"세부계획 미정","statuscode":"none"},{"name":"지능형 로봇, 3D프린팅, ARᆞVR, IoT가전, 스마트선박, 나노ᆞ바이오, 항공ᆞ우주 등 첨단기술 산업 육성을 위해 R&D 및 실증ᆞ인프라 구축 지원","status":"세부계획 미정","statuscode":"none"},{"name":"핵심기술 개발, 인력양성, 사업화 및 해외진출 지원 등을 통해 제약ᆞ바이오ᆞ마이크로의료로봇 등 의료기기 산업 성장 생태계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"자율주행차 테스트베드ᆞ인프라, 자율협력주행 커넥티드 서비스, 스마트도로 등을 구축하고 ’20년 준자율주행차 조기 상용화","status":"세부계획 미정","statuscode":"none"},{"name":"드론산업 활성화 지원 로드맵 마련(’17년) 및 인프라 구축, 제도 개선, 기술개발, 융합생태계 조성 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"신속인증제 운영 활성화, 범부처 TBT대응지원 센터 운영, 신속표준제도* 도입 등 신산업 표준ᆞ인증제도 혁신","status":"세부계획 미정","statuscode":"none"}],"keywords":["전기차","수소차","충전인프라","자율차","자율주행","로봇","나노","바이오","항공","우주","첨단기술","해외진출","의료기기","인프라","자율협력주행","스마트도로","준자율주행차","드론산업","신속인증제","신속표준제도","AR","VR","IoT","3D프린팅"]},{"name":"35: 자율과 책임의 과학기술 혁신 생태계 조성","department":["과기부"],"category":["과학","4차산업혁명","북한"],"description":[{"name":"’17년 국가과학기술정책 자문ᆞ조정 기구통합","status":"세부계획 미정 (과학기술기본법 개정 필요)","statuscode":"none"},{"name":"과학기술총괄부처의 연구개발 관련 예산권한 강화 및 정책-예산-평가간 연계 강화","status":"세부계획 미정","statuscode":"none"},{"name":"각종 R&D 관리규정 및 시스템ᆞ서식 일원화와 간소화 추진, ’19년부터 연구비 통합관리시스템 본격 운영","status":"세부계획 미정","statuscode":"none"},{"name":"정부R&D 정보 제공 체계 개선으로 관련정보*의 개방 확대, 국민참여 기반의 국민생활문제 해결 R&D 추진","status":"세부계획 미정","statuscode":"none"},{"name":"재외 동포 및 북한 과학기술인 교류 확대, 인류 공동 문제해결에 기여하는 과학연구로 글로벌사회 국가 지위 향상","status":"세부계획 미정","statuscode":"none"}],"keywords":["국가과학기술정책","자문","과학기술총괄부처","연구개발","예산","연구비통합관리시스템","재외동포","북한과학기술인","과학","R&D"]},{"name":"36: 청년과학자와 기초연구 지원으로 과학기술 미래역량 확충","department":["과기부"],"category":["청년","과학","4차산업혁명","여성"],"description":[{"name":"기초연구 지원 확대 - 연구자 주도 기초연구 예산 2배 확대(’17년 1.2조원), 연구과제 관리・평가제도 등의 개선을 통해 연구자 자율성 강화","status":"세부계획 미정","statuscode":"none"},{"name":"박사후 연구원 등에 근로계약 체결 및 4대 보험 보장 의무화","status":"세부계획 미정","statuscode":"none"},{"name":"중소기업 R&D 부서에 취업하는 청년 과학기술인 연금 지원","status":"세부계획 미정","statuscode":"none"},{"name":"미취업 석ᆞ박사의 기업 연구과제 참여 지원, 과제기반 테뉴어 제도 도입","status":"세부계획 미정","statuscode":"none"},{"name":"경력단절 여성 과학기술인과 산‧학‧연 기관 매칭, 대체인력 지원 등으로 여성과학기술인의 경력 단절 방지","status":"세부계획 미정","statuscode":"none"}],"keywords":["기초연구","과학","연구자","연구과제","박사후연구원","근로계약","4대보험","중소기업","과학기술인","청년","석박사","경력단절","여성","R&D"]},{"name":"38: 주력산업 경쟁력 제고로 산업경제의 활력 회복","department":["산업부"],"category":["4차산업혁명","경제"],"description":[{"name":"’17년에 4차 산업혁명 대응을 위한 제조업 부흥전략 수립","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 스마트 공장 인증제도 도입 및 금융지원 등 확대","status":"세부계획 미정","statuscode":"none"},{"name":"매년 50개 기업 사업재편 지원, 사업재편 기업에 대한 인센티브 강화로 ’19년까지 산업 전반으로 선제적 구조조정 확산","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 국가 브랜드 전략과 산업ᆞ무역정책을 연계한 ‘Korean-Made 전략’ 수립 및 맞춤형 지원 등 강화*로 수출기업화 촉진","status":"세부계획 미정","statuscode":"none"},{"name":"신산업 및 고용창출 효과가 높은 외국인투자ᆞ유턴기업을 중점 유치하는 방향으로 ’18년까지 관련 지원제도 개편","status":"세부계획 미정","statuscode":"none"}],"keywords":["4차산업혁명","제조업","스마트공장","금융지원","사업재편","국가브랜드전략","무역정책","수출기업화","신산업","고용창출","외국인투자","유턴기업","Korean-Made"]},{"name":"52: 고등교육의 질 제고 및 평생ᆞ직업교육 혁신","department":["교육부"],"category":["교육","복지","4차산업혁명"],"description":[{"name":"지자체와의 연계 강화를 통한 거점 국립대 집중육성 및 지역 강소대학 지원 확대(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"대학 재정지원사업 전면 개편(일반과 특수목적 구분) 및 순수 기초연구 예산 약 2배 증액, 도전적 연구 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 직업교육 마스터플랜 마련 및 직업계고 재정지원 확대, 직업계고 학점제 단계적 운영(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 전문대학에 지원 확대 방안 마련 및 ’19년 공영형 전문대 운영을 통해 전문대를 직업교육 지역거점으로 육성","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 4차 산업분야를 우선으로 분야별 ‘한국형 나노디그리’ 모델 개발ᆞ운영, 성인 비문해자 교육기회 확대, 한국형 무크(K-MOOC) 강좌 확대","status":"세부계획 미정","statuscode":"none"},{"name":"대학-공공기관-지자체가 연계된 산학협력 클러스터 조성, 대학 내 기업ᆞ연구소 등 입주로 상시적 산학협력 촉진","status":"세부계획 미정","statuscode":"none"}],"keywords":["국립대","지역강소대학","기초연구","대학재정지원사업","직업교육","전문대학","나노디그리","한국형무크","산학협력"]},{"name":"69: 공정한 문화산업 생태계 조성 및 세계 속 한류 확산","department":["문체부"],"category":["문화","4차산업혁명"],"description":[{"name":"콘텐츠 주요 구성원 간 불공정 거래 개선을 위해 ’17년부터 (영화) 제정 (애니메이션) 불공정 관행 개선 및 제정 (만화·웹툰·2차적 저작물) 계약서 보완 (대중문화) 대중문화예술인 대상 계약서 제정 (방송) 방송작가 집필표준계약서 제정","status":"세부계획 미정","statuscode":"none"},{"name":"4차산업에 기반한 융합 플랫폼 구축 및 성장 단계별 지원과 첨단기술이 결합한 뉴콘텐츠 육성ᆞ확대*","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 현재 6천만명 한류팬을 1억명으로 확대, ’22년까지 세종 학당 지속 확대","status":"세부계획 미정","statuscode":"none"}],"keywords":["콘텐츠","불공정거래","표준계약서","뉴콘텐츠","4차산업","한류","세종학당"]},{"name":"88: 방산비리 척결과 4차 산업혁명 시대에 걸맞은 방위산업 육성","department":["국방부"],"category":["4차산업혁명","안보/국방","경제","과학"],"description":[{"name":"방위사업 비리에 대한 처벌 및 예방시스템 강화","status":"진행중 (대통령 수석보좌관회의 발언, 수사 진행중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=015&aid=0003797291"},{"name":"국방획득체계 전반의 업무수행에 대한 투명성ᆞ 전문성ᆞ효율성ᆞ경쟁력 향상 방안 모색","status":"세부계획 미정","statuscode":"none"},{"name":"국방R&D 기획체계 개선, 국가R&D 역량 국방분야 활용 증진 등을 통해 방산 경쟁력 강화 및 첨단무기 국내 개발 기반 구축","status":"세부계획 미정","statuscode":"none"},{"name":"인센티브 중심으로 방산 생태계를 조성하고, 4차 산업혁명 등 기술변화에 대응하는 국방R&D 수행체계 개편","status":"세부계획 미정","statuscode":"none"},{"name":"방산 중소‧벤처기업 육성으로 안정적 수출기반 마련 및 방산 인프라 강화를 통한 양질의 일자리 창출","status":"세부계획 미정","statuscode":"none"},{"name":"국방항공 유지보수 운영(MRO) 분야와 성과기반 군수(PBS) 확대로 민간산업 활성화 지원","status":"세부계획 미정","statuscode":"none"}],"keywords":["방위사업","국방획득체계","첨단무기","인센티브","4차산업혁명","방산생태계","방산중소벤처기업","국방항공","국방R&D"]}]},{"theme":"science","keys":[{"name":"34: 고부가가치 창출 미래형 신산업 발굴ᆞ육성","department":["산업부","과기부","국토부","복지부"],"category":["4차산업혁명","과학","교통"],"description":[{"name":"전기차ᆞ수소차 충전 인프라 확충","status":"진행중 (2017년 말까지 급속충전소 2배 증가)","statusdesc":"환경부는 ‘전기차 충전 인프라 설치·운영 지침’을 개정해 18일부터 공용 완속 충전기 설치를 대폭 확대하며 신청은 전기차 충전소 홈페이지(www.ev.or.kr)에서 할 수 있다. 기존의 완속충전기 설치는 주차면 100면 이상인 공동주택·사업장 등으로 제한됐으나 이번 지침 개정으로 공용 충전기 설치공간이 있고 관리인력이 있으면 누구나 설치 신청을 할 수 있다.","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841262&pageIndex=17&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"자율차ᆞ전기차ᆞ수소차 안전기준 마련","status":"세부계획 미정","statuscode":"none"},{"name":"지능형 로봇, 3D프린팅, ARᆞVR, IoT가전, 스마트선박, 나노ᆞ바이오, 항공ᆞ우주 등 첨단기술 산업 육성을 위해 R&D 및 실증ᆞ인프라 구축 지원","status":"세부계획 미정","statuscode":"none"},{"name":"핵심기술 개발, 인력양성, 사업화 및 해외진출 지원 등을 통해 제약ᆞ바이오ᆞ마이크로의료로봇 등 의료기기 산업 성장 생태계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"자율주행차 테스트베드ᆞ인프라, 자율협력주행 커넥티드 서비스, 스마트도로 등을 구축하고 ’20년 준자율주행차 조기 상용화","status":"세부계획 미정","statuscode":"none"},{"name":"드론산업 활성화 지원 로드맵 마련(’17년) 및 인프라 구축, 제도 개선, 기술개발, 융합생태계 조성 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"신속인증제 운영 활성화, 범부처 TBT대응지원 센터 운영, 신속표준제도* 도입 등 신산업 표준ᆞ인증제도 혁신","status":"세부계획 미정","statuscode":"none"}],"keywords":["전기차","수소차","충전인프라","자율차","자율주행","로봇","나노","바이오","항공","우주","첨단기술","해외진출","의료기기","인프라","자율협력주행","스마트도로","준자율주행차","드론산업","신속인증제","신속표준제도","AR","VR","IoT","3D프린팅"]},{"name":"35: 자율과 책임의 과학기술 혁신 생태계 조성","department":["과기부"],"category":["과학","4차산업혁명","북한"],"description":[{"name":"’17년 국가과학기술정책 자문ᆞ조정 기구통합","status":"세부계획 미정 (과학기술기본법 개정 필요)","statuscode":"none"},{"name":"과학기술총괄부처의 연구개발 관련 예산권한 강화 및 정책-예산-평가간 연계 강화","status":"세부계획 미정","statuscode":"none"},{"name":"각종 R&D 관리규정 및 시스템ᆞ서식 일원화와 간소화 추진, ’19년부터 연구비 통합관리시스템 본격 운영","status":"세부계획 미정","statuscode":"none"},{"name":"정부R&D 정보 제공 체계 개선으로 관련정보*의 개방 확대, 국민참여 기반의 국민생활문제 해결 R&D 추진","status":"세부계획 미정","statuscode":"none"},{"name":"재외 동포 및 북한 과학기술인 교류 확대, 인류 공동 문제해결에 기여하는 과학연구로 글로벌사회 국가 지위 향상","status":"세부계획 미정","statuscode":"none"}],"keywords":["국가과학기술정책","자문","과학기술총괄부처","연구개발","예산","연구비통합관리시스템","재외동포","북한과학기술인","과학","R&D"]},{"name":"36: 청년과학자와 기초연구 지원으로 과학기술 미래역량 확충","department":["과기부"],"category":["청년","과학","4차산업혁명","여성"],"description":[{"name":"기초연구 지원 확대 - 연구자 주도 기초연구 예산 2배 확대(’17년 1.2조원), 연구과제 관리・평가제도 등의 개선을 통해 연구자 자율성 강화","status":"세부계획 미정","statuscode":"none"},{"name":"박사후 연구원 등에 근로계약 체결 및 4대 보험 보장 의무화","status":"세부계획 미정","statuscode":"none"},{"name":"중소기업 R&D 부서에 취업하는 청년 과학기술인 연금 지원","status":"세부계획 미정","statuscode":"none"},{"name":"미취업 석ᆞ박사의 기업 연구과제 참여 지원, 과제기반 테뉴어 제도 도입","status":"세부계획 미정","statuscode":"none"},{"name":"경력단절 여성 과학기술인과 산‧학‧연 기관 매칭, 대체인력 지원 등으로 여성과학기술인의 경력 단절 방지","status":"세부계획 미정","statuscode":"none"}],"keywords":["기초연구","과학","연구자","연구과제","박사후연구원","근로계약","4대보험","중소기업","과학기술인","청년","석박사","경력단절","여성","R&D"]},{"name":"85: 북핵 등 비대칭 위협 대응능력 강화","department":["국방부"],"category":["안보/국방","북한","과학"],"description":[{"name":"국방예산 증액‧효율화 - 적정 소요를 반영한 수준으로 예산증가율 책정, 예산ᆞ조직ᆞ인력 분야 전반의 구조조정ᆞ절감을 통해 지출 성과 극대화","status":"세부계획 미정","statuscode":"none"},{"name":"북핵ᆞ미사일 위협 대비 독자적 한국형 3축체계는 핵심전력소요에 대한 우선순위를 판단, 조기구축 추진 - 북한 전역에 대한 감시ᆞ타격능력(Kill Chain), 핵심시설 방어능력(KAMD), 대량응징보복 수행능력(KMPR) 구축","status":"세부계획 미정","statuscode":"none"},{"name":"합참의 ‘핵ᆞWMD 대응센터’를 ‘핵ᆞWMD 대응작전본부’로 확대 개편하고 임기 내 ‘전략사령부’ 창설 적극 검토","status":"세부계획 미정","statuscode":"none"},{"name":"국가안보실 중심의 사이버안보 컨트롤타워 강화 및 체계적인 사이버안보 수행체계 정립ᆞ발전","status":"세부계획 미정","statuscode":"none"}],"keywords":["국방예산","예산증가율","북핵","미사일","한국형3축체계","킬체인","핵심시설방어능력","대량응징보복수행능력","KAMD","KMPR","핵WMD 대응작전본부","전략사령부","국가안보실","사이버안보"]},{"name":"88: 방산비리 척결과 4차 산업혁명 시대에 걸맞은 방위산업 육성","department":["국방부"],"category":["4차산업혁명","안보/국방","경제","과학"],"description":[{"name":"방위사업 비리에 대한 처벌 및 예방시스템 강화","status":"진행중 (대통령 수석보좌관회의 발언, 수사 진행중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=015&aid=0003797291"},{"name":"국방획득체계 전반의 업무수행에 대한 투명성ᆞ 전문성ᆞ효율성ᆞ경쟁력 향상 방안 모색","status":"세부계획 미정","statuscode":"none"},{"name":"국방R&D 기획체계 개선, 국가R&D 역량 국방분야 활용 증진 등을 통해 방산 경쟁력 강화 및 첨단무기 국내 개발 기반 구축","status":"세부계획 미정","statuscode":"none"},{"name":"인센티브 중심으로 방산 생태계를 조성하고, 4차 산업혁명 등 기술변화에 대응하는 국방R&D 수행체계 개편","status":"세부계획 미정","statuscode":"none"},{"name":"방산 중소‧벤처기업 육성으로 안정적 수출기반 마련 및 방산 인프라 강화를 통한 양질의 일자리 창출","status":"세부계획 미정","statuscode":"none"},{"name":"국방항공 유지보수 운영(MRO) 분야와 성과기반 군수(PBS) 확대로 민간산업 활성화 지원","status":"세부계획 미정","statuscode":"none"}],"keywords":["방위사업","국방획득체계","첨단무기","인센티브","4차산업혁명","방산생태계","방산중소벤처기업","국방항공","국방R&D"]}]},{"theme":"northkorea","keys":[{"name":"35: 자율과 책임의 과학기술 혁신 생태계 조성","department":["과기부"],"category":["과학","4차산업혁명","북한"],"description":[{"name":"’17년 국가과학기술정책 자문ᆞ조정 기구통합","status":"세부계획 미정 (과학기술기본법 개정 필요)","statuscode":"none"},{"name":"과학기술총괄부처의 연구개발 관련 예산권한 강화 및 정책-예산-평가간 연계 강화","status":"세부계획 미정","statuscode":"none"},{"name":"각종 R&D 관리규정 및 시스템ᆞ서식 일원화와 간소화 추진, ’19년부터 연구비 통합관리시스템 본격 운영","status":"세부계획 미정","statuscode":"none"},{"name":"정부R&D 정보 제공 체계 개선으로 관련정보*의 개방 확대, 국민참여 기반의 국민생활문제 해결 R&D 추진","status":"세부계획 미정","statuscode":"none"},{"name":"재외 동포 및 북한 과학기술인 교류 확대, 인류 공동 문제해결에 기여하는 과학연구로 글로벌사회 국가 지위 향상","status":"세부계획 미정","statuscode":"none"}],"keywords":["국가과학기술정책","자문","과학기술총괄부처","연구개발","예산","연구비통합관리시스템","재외동포","북한과학기술인","과학","R&D"]},{"name":"85: 북핵 등 비대칭 위협 대응능력 강화","department":["국방부"],"category":["안보/국방","북한","과학"],"description":[{"name":"국방예산 증액‧효율화 - 적정 소요를 반영한 수준으로 예산증가율 책정, 예산ᆞ조직ᆞ인력 분야 전반의 구조조정ᆞ절감을 통해 지출 성과 극대화","status":"세부계획 미정","statuscode":"none"},{"name":"북핵ᆞ미사일 위협 대비 독자적 한국형 3축체계는 핵심전력소요에 대한 우선순위를 판단, 조기구축 추진 - 북한 전역에 대한 감시ᆞ타격능력(Kill Chain), 핵심시설 방어능력(KAMD), 대량응징보복 수행능력(KMPR) 구축","status":"세부계획 미정","statuscode":"none"},{"name":"합참의 ‘핵ᆞWMD 대응센터’를 ‘핵ᆞWMD 대응작전본부’로 확대 개편하고 임기 내 ‘전략사령부’ 창설 적극 검토","status":"세부계획 미정","statuscode":"none"},{"name":"국가안보실 중심의 사이버안보 컨트롤타워 강화 및 체계적인 사이버안보 수행체계 정립ᆞ발전","status":"세부계획 미정","statuscode":"none"}],"keywords":["국방예산","예산증가율","북핵","미사일","한국형3축체계","킬체인","핵심시설방어능력","대량응징보복수행능력","KAMD","KMPR","핵WMD 대응작전본부","전략사령부","국가안보실","사이버안보"]},{"name":"90: 한반도 신경제지도 구상 및 경제통일 구현","department":["통일부"],"category":["경제","북한","환경/안전","관광"],"description":[{"name":"한반도 신경제지도 - 3대 벨트 구축을 통해 한반도 신성장동력 확보 및 북방경제 연계 추진","status":"세부계획 미정","statuscode":"none"},{"name":"동해권 에너지ᆞ자원벨트 : 금강산, 원산ᆞ단천, 청진ᆞ나선을 남북이 공동개발 후 우리 동해안과 러시아를 연결","status":"세부계획 미정","statuscode":"none"},{"name":"서해안 산업ᆞ물류ᆞ교통벨트 : 수도권, 개성공단, 평양ᆞ남포, 신의주를 연결하는 서해안 경협벨트 건설","status":"세부계획 미정","statuscode":"none"},{"name":"DMZ 환경ᆞ관광벨트 : 설악산, 금강산, 원산, 백두산을 잇는 관광벨트 구축 및 DMZ를 생태ᆞ평화안보 관광지구로 개발","status":"세부계획 미정","statuscode":"none"},{"name":"민ᆞ관 협력 네트워크를 통해 남북한 하나의 시장 협력 방안을 마련하고, 여건 조성 시 남북 시장협력을 단계적으로 실행 하여 생활공동체 형성","status":"세부계획 미정","statuscode":"none"},{"name":"남북경협기업 피해 조속 지원을 실시하고, 남북관계 상황을 감안하여 유연하게 민간경협 재개 추진","status":"진행중 (2017년내 남북경협기업 피해지원 목표)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009430862"},{"name":"여건 조성 시 개성공단 정상화 및 금강산 관광을 재개하고, 남북공동 자원 활용을 위한 협력 추진","status":"세부계획 미정","statuscode":"none"},{"name":"통일경제특구 지정ᆞ운영, 남북 협의를 통해 남북 접경지역 공동관리위원회 설치, 서해 평화협력특별지대 추진 여건 조성","status":"세부계획 미정","statuscode":"none"}],"keywords":["한반도신경제지도","3대벨트","신성장동력","북방경제","동해권에너지자원벨트","서해안산업물류교통벨트","DMZ환경관광벨트","남북경협기업","개성공단","금강산관광","남북공동자원","통일경제특구","남북접경지역공동관리위원회","서해평화협력특별지대"]},{"name":"91: 남북기본협정 체결 및 남북관계 재정립","department":["통일부"],"category":["북한","안보/국방"],"description":[{"name":"남북연락채널 복원 추진, 적십자회담ᆞ군사실무회담 개최 등을 통해 남북관계 재개 여건 조성","status":"시도중 (2017.7 기준 북 무응답)","statuscode":"question","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010483859"},{"name":"남북회담 체계화ᆞ정례화를 추진하고 여건에 따라 고위급회담 개최, 남북기본협정 채택 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"기존 남북합의를 존중하면서 남북관계에 맞는 새로운 합의를 도출하기 위해 기본협정 체결 추진","status":"세부계획 미정","statuscode":"none"},{"name":"국회 비준동의, UN총회 지지 결의 등 남북기본협정 지지 확보 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["남북연락채널","적십자회담","군사실무회담","남북기본협정","고위급회담"]},{"name":"92: 북한인권 개선과 이산가족 등 인도적 문제 해결","department":["통일부"],"category":["북한","인권","생활"],"description":[{"name":"북한인권재단 조기 출범, 국제사회와 공조 및 남북 간 대화 시 인권문제 의제화 등을 통해 북한당국에 인권 친화적 방향으로 정책 전환 촉구","status":"세부계획 미정","statuscode":"none"},{"name":"민간단체 인도적 지원 허용, 국제기구 북한지원사업 공여 검토, 당국차원 지원은 국민적 합의를 바탕으로 추진","status":"세부계획 미정","statuscode":"none"},{"name":"이산가족의 신청자의 전면 생사확인ᆞ상봉정례화ᆞ 교류 제도화 추진","status":"세부계획 미정","statuscode":"none"},{"name":"국군포로ᆞ납북자 문제는 당사자의 의견을 존중한 다양한 해결책 마련","status":"세부계획 미정","statuscode":"none"},{"name":"탈북민 정착 지원 - 지원체계 효율화, 맞춤형 지원을 통한 생활밀착형 프로그램 확충 추진, 탈북민 인식 개선 및 지역주민과 소통 활성화 노력","status":"세부계획 미정","statuscode":"none"}],"keywords":["북한인권재단","인도적지원","북한지원사업","이산가족","국군포로","납북자","탈북민"]},{"name":"93: 남북교류 활성화를 통한 남북관계 발전","department":["통일부"],"category":["북한","문화","정치/정부"],"description":[{"name":"체육ᆞ종교 분야 남북교류를 재개하고, 민족동질성 회복을 위한 겨레말큰사전 편찬 및 개성만월대 발굴사업 등 추진 - 평창동계올림픽은 북한 참가 지원 등으로 평화올림픽으로 추진","status":"일부 진행중 (평창올림픽 북 참가요청)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=032&aid=0002805180"},{"name":"남북교류협력 - 학술ᆞ역사ᆞ언어ᆞ교육ᆞ문화유산 등 다양한 분야의 사회문화 교류협력 확대 및 제도화","status":"세부계획 미정","statuscode":"none"},{"name":"남북교류협력 - 교류협력 네트워크 확대 및 내실화, 지자체와 민간단체의 자율적인 활동 공간 확보 지원(지자체 차원 교류협력 등) 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"남북교류협력법 등 관련 규정 정비, 인터넷에 기반한 남북교류협력시스템 개선 등 법‧제도화를 통한 교류협력기반 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["남북교류","개성만월대","겨레말큰사전","평창동계올림픽","남북교류협력","남북교류협력법","남북교류협력시스템"]},{"name":"94: 통일 공감대 확산과 통일국민협약 추진","department":["통일부"],"category":["북한","문화","정치/정부"],"description":[{"name":"국회 협의ᆞ국민 소통 기반 아래 통일국민협약 체결 추진, ’22년까지 협약 체결 및 이행ᆞ소통체계 등 제도 기반도 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 매년 단계별로 광역시도에 통일센터 설치","status":"세부계획 미정","statuscode":"none"},{"name":"국내외 전문가 양성 프로그램을 연구개발, 단계적 으로 확대 실시하여 통일 대비 인적 기반 및 역량 강화","status":"세부계획 미정","statuscode":"none"},{"name":"범국민 통일교육 거버넌스 구축ᆞ운영으로 통일교육의 주요 원칙에 관한 사회적 합의 도출 및 미래세대의 통일인식 제고","status":"세부계획 미정","statuscode":"none"}],"keywords":["퉁일국민협약","통일","통일센터","통일전문가","통일교육"]},{"name":"95: 북핵문제의 평화적 해결 및 평화체제 구축","department":["외교부"],"category":["북한","안보/국방"],"description":[{"name":"’20년 합의 도출을 위해 동결에서 완전한 핵폐기로 이어지는 포괄적 비핵화 협상 방안 마련, 비핵화 초기 조치 확보 및 포괄적 비핵화 협상 재개 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"대북제재 상황을 감안하면서, 남북대화‧교류협력 등 남북관계 차원의 북한 비핵화 견인","status":"세부계획 미정","statuscode":"none"},{"name":"남북 간 정치ᆞ군사적 신뢰 구축 - 북한 비핵화 추진과 함께 남북대화를 통해 초보적 신뢰 구축 조치부터 단계적으로 심화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 중 로드맵을 마련하고 비핵화 진전에 따라 평화체제 협상 추진, 북핵 완전해결 단계에서 협정 체결 및 평화체제 안정적 관리","status":"세부계획 미정","statuscode":"none"}],"keywords":["북핵","핵폐기","비핵화","대북제재","남북대화","남북교류협력","평화체제"]}]},{"theme":"women","keys":[{"name":"36: 청년과학자와 기초연구 지원으로 과학기술 미래역량 확충","department":["과기부"],"category":["청년","과학","4차산업혁명","여성"],"description":[{"name":"기초연구 지원 확대 - 연구자 주도 기초연구 예산 2배 확대(’17년 1.2조원), 연구과제 관리・평가제도 등의 개선을 통해 연구자 자율성 강화","status":"세부계획 미정","statuscode":"none"},{"name":"박사후 연구원 등에 근로계약 체결 및 4대 보험 보장 의무화","status":"세부계획 미정","statuscode":"none"},{"name":"중소기업 R&D 부서에 취업하는 청년 과학기술인 연금 지원","status":"세부계획 미정","statuscode":"none"},{"name":"미취업 석ᆞ박사의 기업 연구과제 참여 지원, 과제기반 테뉴어 제도 도입","status":"세부계획 미정","statuscode":"none"},{"name":"경력단절 여성 과학기술인과 산‧학‧연 기관 매칭, 대체인력 지원 등으로 여성과학기술인의 경력 단절 방지","status":"세부계획 미정","statuscode":"none"}],"keywords":["기초연구","과학","연구자","연구과제","박사후연구원","근로계약","4대보험","중소기업","과학기술인","청년","석박사","경력단절","여성","R&D"]},{"name":"43: 고령사회 대비, 건강하고 품위 있는 노후생활 보장","department":["복지부"],"category":["노인","복지","여성"],"description":[{"name":"국민연금 소득대체율 인상을 ’18년 국민연금 재정계산과 연계하여 사회적 합의하에 추진","status":"세부계획 미정","statuscode":"none"},{"name":"기초연금액을 ’18년 25만원, ’21년 30만원으로 상향지급","status":"세부계획 미정","statuscode":"none"},{"name":"단시간ᆞ일용근로자, 경력단절 여성 등의 국민연금 가입 지원 확대 추진","status":"세부계획 미정","statuscode":"none"},{"name":"두루누리 건강보험 지원 확대, 건강보험 임의 계속 가입기간ᆞ대상 확대 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 전국 252개 치매안심센터 확충 및 치매 안심병원 확충 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 중증치매 환자 본인부담률 인하 및 고비용 진단검사 급여화, 장기요양 치매수급자 본인부담 경감 확대","status":"진행중","statuscode":"wip","statusdesc":"17년 10월부터 중증치매 환자는 건강보험 의료비의 10%만 부담. 중증 치매환자 가운데 정도가 심한 경우엔 일수 제한 없이, 통원치료가 가능한 경우에는 연간 최대 120일의 산정 특례적용.","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841328&pageIndex=16&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"노인 일자리수 ’17년 43.7만개에서 ’22년 80만개로 확대하고, 공익활동 참여수당을 ’20년까지 40만원으로 인상(일자리 유형에 따라 차등)","status":"세부계획 미정","statuscode":"none"},{"name":"국민연금기금운용위원회의 상설화, 기금투자운용 의사결정과정 및 투자내역ᆞ자산내역 공시 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["국민연금","기초연금","소득대체율","두루누리","건강보험","치매안심센터","중증치매환자","노인일자리","국민연금기금운용위원회"]},{"name":"48: 미래세대 투자를 통한 저출산 극복","department":["복지부"],"category":["주택/부동산","복지","보육","아동","여성"],"description":[{"name":"’22년까지 공공임대주택의 30% 신혼부부 우선 공급","status":"세부계획 미정","statuscode":"none"},{"name":"17년부터 난임시술비 등 건강보험 적용","status":"진행중 (2017년 10월 실시)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=018&aid=0003885557"},{"name":"출산지원금 도입방안 검토","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 아동수당 지급(0~5세, 월 10만원)","status":"세부계획 미정","statuscode":"none"},{"name":"매년 어린이집 대폭 확충하여 ’22년 국공립 어린이집 이용률 40% 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 첫 3개월 육아휴직급여 2배 인상, ’18년부터 아빠 육아휴직 보너스 제도 도입 및 육아로 인한 근로시간 단축 지원(10to4 더불어 돌봄)","status":"완료","statusdesc":"다음달 1일부터 육아휴직때 첫 3개월의 육아휴직급여는 통상임금의 80%(상한 150만원, 하한 70만원)로 상향 지급.","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841344&pageIndex=15&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"저출산 대책에 대한 컨트롤타워 기능 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 빅데이터 활용 위기아동 조기 발견 시스템 구축","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공임대주택","신혼부부","난임시술비","출산지원금","아동수당","국공립어린이집","육아휴직급여","육아휴직","저출산","위기아동조기발견시스템"]},{"name":"66: 실질적 성평등 사회 실현","department":["여가부"],"category":["여성","인권"],"description":[{"name":"대통령 직속 성평등위원회 설치 추진, 성평등 정책 기본계획 수립 및 이행 총괄 관리, 성별영향분석평가와 성인지 예산 성과관리 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 공공부문(관리직 공무원, 공공기관 임원ᆞ관리자, 군ᆞ경찰 등) 여성 진출 대폭 확대를 위한 5개년 계획 수립ᆞ이행","status":"세부계획 미정","statuscode":"none"},{"name":"성평등 교육 강화, 언론ᆞ미디어 종사자 및 공적 서비스 전달자 대상 성인지 교육 실시","status":"세부계획 미정","statuscode":"none"},{"name":"18년 젠더폭력방지기본법(가칭) 제정 및 국가행동계획 수립ᆞ이행을 통해 다양한 젠더폭력 대응 강화 - 새롭게 대두되는 젠더폭력(스토킹, 온라인 성범죄 등) 처벌 및 피해자 보호 체계 마련(’17년~)","status":"유사법안 발의 (민주-표창원)","statuscode":"congress","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009443860"},{"name":"’18년 일본군 ‘위안부’ 피해자 기림일 지정 및 ’19년 일본군 ‘위안부’ 피해자 연구소(가칭) 설치ᆞ운영","status":"세부계획 미정","statuscode":"none"},{"name":"’20년 피해자 역사관 건립을 통해 조사ᆞ연구사업 체계화","status":"세부계획 미정","statuscode":"none"}],"keywords":["대통령직속성평등위원회","성평등","성평등정책","성별영향분석평가","성인지","공공부문","여성진출","젠더폭력방지기본법","일본군위안부","위안부피해자기림일","위안부피해자연구소","위안부피해자역사관"]},{"name":"89: 장병 인권 보장 및 복무 여건의 획기적 개선","department":["국방부"],"category":["인권","안보/국방","여성","주택/부동산"],"description":[{"name":"’22년까지 최저임금의 50%까지 단계적 인상 추진","status":"세부계획 미정","statuscode":"none"},{"name":"공무상 부상을 입은 장병이 최선의 치료를 선택할 권리 보장 - 공무상 부상자에 대한 민간병원 치료비 전액 지원을 단계적으로 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 복무 학점 인정 추진 및 장병 자기개발 지원을 강화하고, 군 급식 시스템 개선을 통한 급식 질 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"국가인권위원회 내 ‘군인권보호관’ 신설 및 군 의문사 진상 규명을 위한 제도 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"여군 인력 및 계급별 진출을 확대하고, 여군의 임신ᆞ출산ᆞ육아지원을 위한 제도 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 성폭력 범죄자 처벌 강화 및 무관용 원칙 엄중 적용","status":"세부계획 미정","statuscode":"none"},{"name":"국세청 등 유관기관 협조를 통해 고위공직자 등 사회적 관심계층의 병적 집중관리 및 상시 모니터링ᆞ검증체계 강화","status":"세부계획 미정","statuscode":"none"},{"name":"맞춤형 주거 지원 및 민간주택을 활용한 공급방식 다변화 등 직업군인 주거 지원 제도 발전","status":"세부계획 미정","statuscode":"none"}],"keywords":["최저임금","공무상부상장병","군복무학점인정","군급식시스템","국가인권위원회","병봉급인상","군인권보호관","군의문사진상규명","여군","군성폭력범죄자","국세청","병적집중관리","직업군인"]}]},{"theme":"environ_safety","keys":[{"name":"37:  친환경 미래 에너지 발굴ᆞ육성","department":["산업부"],"category":["환경/안전"],"description":[{"name":"재생에너지 소규모 사업자의 참여 여건 및 기업투자 여건 개선 등을 통해 ’30년 재생에너지 발전량 비중 20% 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 공공기관에 ESS 설치 의무화 및 지능형 계량 시스템 전국 설치 완료","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 주요 산업기기 에너지 최저효율제 도입","status":"세부계획 미정","statuscode":"none"},{"name":"’20년에 공공부문 제로에너지건축물 인증 의무화 및 국가 열지도 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 에너지바우처 지원대상에 중증희귀질환자 가구 추가 등 에너지 소외계층 복지 지원 확대","status":"세부계획 미정","statuscode":"none"}],"keywords":["재생에너지","소규모사업자","기업투자","공공기관","지능형계량시스템","산업기기","에너지","최저효율제","공공부문","제로에너지건축물","국가열지도","에너지바우처","중증희귀질환자","소외계층","ESS"]},{"name":"55: 안전사고 예방 및 재난 안전관리의 국가책임체제 구축","department":["안전처"],"category":["생활","교통","환경/안전"],"description":[{"name":"헌법 개정 시 국민안전권 명시","status":"세부계획 미정","statuscode":"none"},{"name":"’18년까지 안전취약계층 지원 법적근거 마련 및 취약계층 안전서비스 확대","status":"세부계획 미정","statuscode":"none"},{"name":"범정부 교통안전 추진체계 구축 - ’17년에 스마트 철도안전 기본계획 수립, ’22년까지 항공안전 빅데이터 플랫폼 구축 등 철도와 항공기 안전 강화","status":"세부계획 미정","statuscode":"none"},{"name":"보행자 우선 및 교통약자 보호, 취약계층 배려 중심의 교통정책 추진","status":"세부계획 미정","statuscode":"none"},{"name":"승강기・건설・지하안전 등 부문별 위협요소 제거","status":"세부계획 미정","statuscode":"none"},{"name":"지진 조기경보체계 개선, 내진설계・보강, 활성단층 조사 실시, 지진 대비 교육・훈련 확대 등 ’20년까지 선진국 수준 지진 대응체계 마련 - ’18년까지 지진 조기경보시간 7초~25초로 단축(’16년 50초)","status":"세부계획 미정","statuscode":"none"},{"name":"소방특별조사 인력・대상 확대 및 위험특성별 맞춤형 안전대책 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 전문예보관 양성","status":"준비/진행중","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=103&oid=020&aid=0003082757"},{"name":"수치예보기술 개발(’19년) 및 ’21년까지 한국형 날씨 예측모델 운영 등을 통해 맞춤형 스마트 기상정보 제공","status":"진행중","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=103&oid=020&aid=0003082757"}],"keywords":["헌법","국민안전권","안전취약계층","교통안전","철도","항공기","안전위험요소","지진","조기경보체계","내진설계","활성단층","화재예방","전문예보관","수치예보기술","한국형날씨예측모델"]},{"name":"56: 통합적 재난관리체계 구축 및 현장 즉시대응 역량 강화","department":["안전처"],"category":["환경/안전","생활"],"description":[{"name":"국가위기관리센터 역할 강화","status":"세부계획 미정","statuscode":"none"},{"name":"자치단체ᆞ경찰ᆞ소방ᆞ해경을 유기적으로 연계하여 국가재난관리 역량 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 소방청 독립 및 소방인력과 장비 확충, 119구급서비스 인프라 확충을 통한 현장 중심 육상재난 대비ᆞ대응역량 강화","status":"진행중 (소방청 독립)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008095212"},{"name":"소방공무원의 근속승진 단축 및 국가직화 검토, 소방복합치유센터 설립 등 처우 개선과 치료 지원 확대","status":"법안 계류중","statuscode":"congress","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=022&aid=0003195623"},{"name":"’17년에 해경청 독립 및 수사・정보기능 정상화를 통한 해경의 역할 재정립","status":"완료","statuscode":"done","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=001&aid=0009480297"},{"name":"불법 조업 중국어선 근절을 통한 해양영토주권 수호","status":"세부계획 미정","statuscode":"none"},{"name":"대국민 재난정보 전달체계 전면 개선","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 재난 안전통신망 구축","status":"세부계획 미정","statuscode":"none"},{"name":"지진해일 분석ᆞ예측ᆞ정보전달 체계 고도화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 독립적인 재난사고 조사위원회 설립","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 까지 대국민 재난트라우마 극복 지원을 위한 총괄 지원체계 구축","status":"세부계획 미정","statuscode":"none"}],"keywords":["국가위기관리센터","국가재난관리","소방청","소방인력","소방장비","119","소방공무원","해경청","중국어선","재난정보","재난안전통신망","지진해일","재난사고조사위원회","재난트라우마"]},{"name":"57: 국민 건강을 지키는 생활안전 강화","department":["환경부","식약처"],"category":["환경/안전","생활"],"description":[{"name":"가습기 살균제 피해구제 및 재발방지 - 특별피해구제계정 설치(1,250억원) 등 전향적인 지원대책 마련(’17년, 구제재원ᆞ피해인정범위 확대 및 사후관리 등)","status":"완료 (시행령 통과/2017년 8월 9일부터)","statuscode":"done","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=056&aid=0010488330"},{"name":"화학물질 유해정보 확보 공개 - 1톤 이상 모든 기존 화학물질(7천종)의 정부 등록(~’30년) 의무화 및 영업비밀 남용 차단을 위한 사전승인제 도입(’18년)","status":"완료 ('2018. 7.1 / 2019. 1.1 관련법 순차 발효)","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840812&pageIndex=5&startDate=1997-01-01&endDate=2017-08-10&repCodeType=&repCode=&srchWord="},{"name":"층간소음ᆞ빛공해 등 생활불편 해소 및 지반침하ᆞ환경오염 물질, 방사선 등 생활환경안전 확보","status":"세부계획 미정","statuscode":"none"},{"name":"인체직접적용제품 독성DB 구축(3천건), 인체위해성 평가 및 공산품에 대한 안전관리 강화","status":"세부계획 미정","statuscode":"none"},{"name":"생산(잔류물질 관리 강화 등), 수입(무검사 억류제 도입 등), 제조ᆞ유통(HACCP 의무적용 확산), 소비(식품표시 강화) 등 전 주기적 먹거리 안전관리 강화 및 범정부적 기본계획 수립","status":"세부계획 미정","statuscode":"none"},{"name":"공공급식지원센터 설치로 영양사가 없는 급식시설의 안전과 영양을 지원","status":"세부계획 미정","statuscode":"none"},{"name":"식품사고 피해구제 집단소송제 도입 등 식품안전 소비자 권리 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["가습기살균제","특별피해구제계정","화학물질","유해정보","층간소음","빛공해","지반침하","환경오염물질","방사선","인체직접적용제품","독성데이터베이스","먹거리안전","공공급식지원센터","영양사","식품사고피해구제집단소송제"]},{"name":"58: 미세먼지 걱정 없는 쾌적한 대기환경 조성","department":["환경부"],"category":["환경/안전","생활","경제"],"description":[{"name":"환경위성 발사(’20년), 측정망 확충, 한중 공동 연구('17년5월∼'20년) 등을 통해 미세먼지 발생원인 규명","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 도심 측정소 대폭 확충 및 고농도 시 예보정확도 74% 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 봄철 노후 석탄발전소(8기) 일시 가동중단 및 신규 건설 불허","status":"진행중","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=055&aid=0000552374"},{"name":"’18년 사업장 먼지총량제 시행 및 배출허용기준 20% 이상 강화","status":"세부계획 미정","statuscode":"none"},{"name":"임기 내(’22년) 30년 이상된 노후 화력발전소(10기) 전면 폐쇄","status":"세부계획 미정","statuscode":"none"},{"name":"노후경유차 운행제한 확대(서울→수도권), 조기폐차 사업 확대 등 경유차 비중 축소","status":"진행중 (정부-서울시 정책공조)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=003&aid=0008101291"},{"name":"’18년 저공해 건설기계 사용 의무화 및 디젤기관차 배출기준 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 전기차 등 친환경차 보급 획기적 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’19년 배출원이 밀집한 충청ᆞ동남ᆞ광양만권 특별관리지역 지정","status":"세부계획 미정","statuscode":"none"},{"name":"’19년까지 한중 협력의지를 담은 미세먼지 공동선언문 발표","status":"세부계획 미정","statuscode":"none"}],"keywords":["미세먼지","석탄발전소","먼지총량제","화력발전소","노후경유차","저공해건설기계","디젤기관차","전기차","배출원","한중정상회담"]},{"name":"59: 지속가능한 국토환경 조성","department":["환경부"],"category":["환경/안전","생활"],"description":[{"name":"’18년부터 환경영향평가 비용 공탁제* 등 평가제도 혁신","status":"세부계획 미정","statuscode":"none"},{"name":"보전총량 설정(’19년) 및 훼손가치만큼 복원ᆞ대체 의무화(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"반려동물지원센터 설치, 유기동물 입양 활성화, 길고양이 중성화사업 지원(’18년~) 등으로 동물 보호수준 제고","status":"세부계획 미정","statuscode":"none"},{"name":"6개 보 상시 개방 후 ’18년 10개 보 개방방안 등을 포함한 4대강 16개보 처리방안 확정","status":"진행중 (일부 개방)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=437&aid=0000157553"},{"name":"’19년부터 4대강 재자연화 대책에 따라 자연성 회복ᆞ복원사업 추진","status":"세부계획 미정","statuscode":"none"},{"name":"물관리 일원화(’17년), 유역관리위 설치 등 유역 거버넌스 구축(’19년)","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008098450"},{"name":"’22년까지 취수원 다각화, 광역ᆞ지방 상수도 통합으로 안정적 물공급","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 노후 상수관망 현대화(1,717km), 물순환도시 5개소 건설, 하수 재이용(1.1억톤/년 이상) 등 상시 가뭄 극복 물순환 체계 구축","status":"세부계획 미정","statuscode":"none"}],"keywords":["환경영향평가비용공탁제","보전총량","반려동물지원센터","유기동물","길고양이중성화사업","4대강","물관리"]},{"name":"60: 탈원전 정책으로 안전하고 깨끗한 에너지로 전환","department":["산업부","원안위"],"category":["환경/안전"],"description":[{"name":"원전 신규 건설계획(추가 6기) 백지화, 노후 원전 수명 연장 금지 등 단계적 원전 감축계획을 전력수급 기본계획 등에 반영","status":"진행/논의중 (일부 건설 일시중지)","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=079&aid=0002996130"},{"name":"공론화를 통해 사용후핵연료정책을 재검토하고, 고리1호기 영구정지를 원전해체 산업을 육성하는 계기로 활용","status":"세부계획 미정","statuscode":"none"},{"name":"원안위 위상 및 독립성 강화*와 안전관리체제를 정비하고 원전의 내진설계기준 상향 조정 검토","status":"진행중 (원자력규제위원회로의 변경)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=055&aid=0000554727"},{"name":"사회적 비용을 반영해 발전용 연료 세율체계를 조정 하고, 산업용 전기요금체계 개편*을 통해 전력 다소비형 산업구조 개선","status":"세부계획 미정","statuscode":"none"},{"name":"분산형 전원(신재생, 집단에너지, 자가발전)의 인허가, 연료 구매, 요금 설정 등 전 과정에 대한 체계적인 지원 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["원전","탈원전","노후원전","사용후핵연료정책","고리1호기","원안위","내진설계","발전용원료세율체계","산업용전기요금체계","분산형전원"]},{"name":"61: 신기후체제에 대한 견실한 이행체계 구축","department":["환경부"],"category":["환경/안전"],"description":[{"name":"지속가능발전위원회 위상을 강화(’18년~)하여 사회ᆞ경제 전반의 지속성 제고 및 기후ᆞ대기ᆞ에너지정책 통합성 제고 - ’18년 2030 지속가능발전 국가목표ᆞ비전 및 이행전략 수립·확정","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 배출권거래제 전담부서 조정 추진 및 배출권 할당계획 확정","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 에너지세제개편, ‘2030년 온실가스 감축 로드맵’ 수정ᆞ보완","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 제로에너지 건물 확대, 중ᆞ대형차 온실가스 기준 신설, 공공기관 배출량 30% 감축, 폐자원에너지 활성화 등 부문별 감축 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 공공기관 적응보고제 도입 등 기후변화 적응 역량 평가 제도화","status":"세부계획 미정","statuscode":"none"},{"name":"’19년 한반도 기후변화 시나리오 생산 및 전국 적응위험지도 작성","status":"세부계획 미정","statuscode":"none"},{"name":"’20년까지 기후변화 입체감시망 및 종합정보체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 국제 배출량 검증 상호인정체계 구축, 해외 배출권 확보를 위한 개도국과의 양자협력 메카니즘(협정 등) 마련","status":"세부계획 미정","statuscode":"none"}],"keywords":["지속가능발전위원회","기후","배출권거래제","온실가스","에너지세제","폐자원에너지","제로에너지","기후변화","파리후속협상"]},{"name":"62: 해양영토 수호와 해양안전 강화","department":["해수부"],"category":["환경/안전","농산어촌"],"description":[{"name":"’18년부터 독도ᆞ울릉도 연계관리를 강화하고, 지역별 거점항만에 해경선 접안시설 및 경비시설 확충","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 3개 해양과학기지 영토거점화와 영해기점 영구시설물 22개소 설치","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 남해어업관리단 신설","status":"완료","statuscode":"done","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=001&aid=0009417821"},{"name":"’19년 한-중 공동단속센터 설치, ’22년 육ᆞ해ᆞ공 감시망 구축과 한-중 공조체계 공고화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 매년 연료운반선을 2척씩 건조하여 생필품 운송 지원, 찾아가는 의료서비스 수혜대상을 매년 10%씩 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 연안여객 준공영제 확대ᆞ시행","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 연안여객선 40척 현대화 및 소규모 항ᆞ포구 접안시설 개선","status":"세부계획 미정","statuscode":"none"},{"name":"’19년 연안 100km까지 초고속 해상재난안전 통신망(LTE-M)을 구축하고, ’21년 시스템 고도화 및 ’22년 전국 운영","status":"세부계획 미정","statuscode":"none"}],"keywords":["독도","울릉도","거점항만","해경선접안시설","해양과학기지","남해어업관리단","한중공동단속센터","연료운반선","연안여객","준공영제","연안여객선","초고속해상재난안전통신망","LTE-M"]},{"name":"84: 깨끗한 바다, 풍요로운 어장","department":["해수부"],"category":["해양","경제","환경/안전"],"description":[{"name":"’18년 휴어제, ’19년 어구관리법 제정, ’21년 전자 어구 실명제 도입을 통해 ’22년 연근해 어업생산량 110만톤 회복","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 명태 인공종자 매년 100만 마리 방류, ’19년부터 명태 양식을 시작하여 ‘22년 명태 자원 회복 및 대량 양식생산체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 ICT 첨단양식기술 개발계획 수립, ’21년부터 스마트양식장 구축 등으로 ’22년 양식 생산량 230만톤 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 수산물 수출지원센터 4개소 설치 및 단계적 확장으로 ’22년 주요국 수출거점 구축 완료 및 수산물 수출 40억달러 달성","status":"진행중","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=022&aid=0003192055"},{"name":"’19년 수산물 이력추적관리제 단계적 확대, ’17년부터 양식장 HACCP 등록을 매년 30개씩 확대하여 ’22년 180개소 등록 - 산지거점 유통센터 6개소, 소비지물류센터 2개소 건립 등 유통구조 혁신","status":"진행중 (2017.4부터 양식장 HACCP 확대추진)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=421&aid=0002655974"},{"name":"’17년 해양공간계획법 제정, ’18년 남해안부터 ’21년 동해안까지 공간계획을 수립하여 ‘22년 전 해역을 통합관리 - ’22년까지 해양보호구역 34개소 지정, 갯벌복원 20개소 완료","status":"세부계획 미정","statuscode":"none"}],"keywords":["휴어제","어구관리법","전자어구실명제","연근해어업생산량","명태인공종자","첨단양식기술","스마트양식장","수산물수출지원센터","수산물이력추적관리제","해양공간계획법"]},{"name":"90: 한반도 신경제지도 구상 및 경제통일 구현","department":["통일부"],"category":["경제","북한","환경/안전","관광"],"description":[{"name":"한반도 신경제지도 - 3대 벨트 구축을 통해 한반도 신성장동력 확보 및 북방경제 연계 추진","status":"세부계획 미정","statuscode":"none"},{"name":"동해권 에너지ᆞ자원벨트 : 금강산, 원산ᆞ단천, 청진ᆞ나선을 남북이 공동개발 후 우리 동해안과 러시아를 연결","status":"세부계획 미정","statuscode":"none"},{"name":"서해안 산업ᆞ물류ᆞ교통벨트 : 수도권, 개성공단, 평양ᆞ남포, 신의주를 연결하는 서해안 경협벨트 건설","status":"세부계획 미정","statuscode":"none"},{"name":"DMZ 환경ᆞ관광벨트 : 설악산, 금강산, 원산, 백두산을 잇는 관광벨트 구축 및 DMZ를 생태ᆞ평화안보 관광지구로 개발","status":"세부계획 미정","statuscode":"none"},{"name":"민ᆞ관 협력 네트워크를 통해 남북한 하나의 시장 협력 방안을 마련하고, 여건 조성 시 남북 시장협력을 단계적으로 실행 하여 생활공동체 형성","status":"세부계획 미정","statuscode":"none"},{"name":"남북경협기업 피해 조속 지원을 실시하고, 남북관계 상황을 감안하여 유연하게 민간경협 재개 추진","status":"진행중 (2017년내 남북경협기업 피해지원 목표)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009430862"},{"name":"여건 조성 시 개성공단 정상화 및 금강산 관광을 재개하고, 남북공동 자원 활용을 위한 협력 추진","status":"세부계획 미정","statuscode":"none"},{"name":"통일경제특구 지정ᆞ운영, 남북 협의를 통해 남북 접경지역 공동관리위원회 설치, 서해 평화협력특별지대 추진 여건 조성","status":"세부계획 미정","statuscode":"none"}],"keywords":["한반도신경제지도","3대벨트","신성장동력","북방경제","동해권에너지자원벨트","서해안산업물류교통벨트","DMZ환경관광벨트","남북경협기업","개성공단","금강산관광","남북공동자원","통일경제특구","남북접경지역공동관리위원회","서해평화협력특별지대"]}]},{"theme":"child","keys":[{"name":"42: 국민의 기본생활을 보장하는 맞춤형 사회보장","department":["복지부"],"category":["복지","청년","노인","아동","보육"],"description":[{"name":"기초생활보장 주거급여는 ’18년부터 부양의무자 기준 폐지, 생계ᆞ의료급여는 소득재산 하위 70% 중 노인ᆞ중증장애인이 포함된 가구에 대한 부양의무자 기준 적용 제외(’19년부터 단계적 확대)","status":"진행중 (2017년 11월부터 기준완화)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=020&aid=0003084039"},{"name":"’18년부터 0~5세 아동수당 월 10만원 지급","status":"입법예고","statusdesc":"18년 7월부터 지급키로 하고 아동수당법 제정안에 대해 17년 9월 4일까지 입법예고","statuscode":"congress","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841150&pageIndex=22&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"’17년부터 미취업 청년에 대해 청년구직촉진수당(30만원, 3개월) 지급","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 기초연금ᆞ장애인연금(기초급여)을 25만원으로 인상","status":"입법예고","statuscode":"congress","statusdesc":"기존에 기초연금을 수급하는 어르신들은 내년 4월부터 현행 20만 6050원에서 약 5만 원 가량 인상된 25만원을 기초연금으로 받을 수 있음","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841333&pageIndex=15&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"국민연금ᆞ고용보험 등 사회보험 사각지대를 해소하고, 두루누리 사회보험료 지원사업에 건강보험료 추가 지원(신규가입자)","status":"세부계획 미정","statuscode":"none"},{"name":"장애등급제 단계적 폐지 및 종합지원체계 도입 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["기초생활보장","주거급여","부양의무자","생계급여","의료급여","소득재산","노인","중증장애인","아동수당","청년구직촉진수당","기초연금","장애인연금","국민연금","고용보험","건강보험료","장애등급제"]},{"name":"44: 건강보험 보장성 강화 및 예방 중심 건강관리 지원","department":["복지부"],"category":["복지","아동","노인"],"description":[{"name":"건강보험 선별급여 적용항목 확대 및 신포괄수가 확대 등의 추진으로 비급여 풍선효과 해소","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"선택진료 폐지, 상급병실 단계적 급여화, 간호ᆞ간병통합서비스 확대(간호인력 확충 병행) 등 3대 비급여 부담 지속 경감","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"저소득층 의료비 부담 완화를 위해 소득수준을 고려하여 본인부담상한액 설정","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"’17년부터 15세 이하 아동 입원진료비 본인부담률을 5%로 인하하고, 민간실손보험 관리 강화로 건강보험 재정건전성 제고","status":"진행중 (2017. 8.9 강화대책 대통령발표)","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840920&pageIndex=1"},{"name":"40대 이상 진단 바우처 도입 등 건강검진 사후관리 강화, 초ᆞ중ᆞ고생 독감 예방접종 국가 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"정신건강 관련 서비스 전달체계 개편 및 전문인력 충원과 근무조건 개선, 자살예방 및 생명존중 문화 확산","status":"세부계획 미정","statuscode":"none"},{"name":"건강보험료 부과체계 개편 - 평가소득 폐지, 보수 외 고소득 직장인 보험료 부담 강화, 피부양자 단계적 축소 등 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["건강보험","선별급여","신포괄수가","비급여","본인부담상한액","진단바우처","건강검진","정신건강","평가소득","고소득직장인","건감보험료"]},{"name":"48: 미래세대 투자를 통한 저출산 극복","department":["복지부"],"category":["주택/부동산","복지","보육","아동","여성"],"description":[{"name":"’22년까지 공공임대주택의 30% 신혼부부 우선 공급","status":"세부계획 미정","statuscode":"none"},{"name":"17년부터 난임시술비 등 건강보험 적용","status":"진행중 (2017년 10월 실시)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=018&aid=0003885557"},{"name":"출산지원금 도입방안 검토","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 아동수당 지급(0~5세, 월 10만원)","status":"세부계획 미정","statuscode":"none"},{"name":"매년 어린이집 대폭 확충하여 ’22년 국공립 어린이집 이용률 40% 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 첫 3개월 육아휴직급여 2배 인상, ’18년부터 아빠 육아휴직 보너스 제도 도입 및 육아로 인한 근로시간 단축 지원(10to4 더불어 돌봄)","status":"완료","statusdesc":"다음달 1일부터 육아휴직때 첫 3개월의 육아휴직급여는 통상임금의 80%(상한 150만원, 하한 70만원)로 상향 지급.","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841344&pageIndex=15&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"저출산 대책에 대한 컨트롤타워 기능 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 빅데이터 활용 위기아동 조기 발견 시스템 구축","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공임대주택","신혼부부","난임시술비","출산지원금","아동수당","국공립어린이집","육아휴직급여","육아휴직","저출산","위기아동조기발견시스템"]},{"name":"49: 유아에서 대학까지 교육의 공공성 강화","department":["교육부"],"category":["청년","아동","교육","복지","보육"],"description":[{"name":"’18년 어린이집 누리과정 전액 국고지원","status":"세부계획 미정","statuscode":"none"},{"name":"국ᆞ공립유치원 취학률 확대(’17년 25% → ’22년 40%)","status":"세부계획 미정","statuscode":"none"},{"name":"교사자질 향상과 교사처우 개선(’18년), 전문교육과정 운영, 자격체계 개편 추진(교육부ᆞ복지부)","status":"세부계획 미정","statuscode":"none"},{"name":"온종일 돌봄교실을 초등학교 전 학년으로 점차 확대하고 내실화방안 병행 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’20년부터 고등학교 무상교육 단계적 실시(’22년 완성)를 통해 고등학생 입학금ᆞ수업료ᆞ학교운영지원비ᆞ교과서비 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 대학생이 체감할 수 있는 등록금 부담 경감, 학자금 대출이자 부담 경감 및 입학금 단계적 폐지 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["누리과정","어린이집","국공립유치원","교사처우","돌봄교실","무상교육","고등학교","등록금","입학금","학자금대출이자","대학생"]},{"name":"50: 교실혁명을 통한 공교육 혁신","department":["교육부"],"category":["교육","복지","아동","보육"],"description":[{"name":"유아ᆞ초등학생 적정 학습시간 및 휴식시간 보장 법제화","status":"세부계획 미정","statuscode":"none"},{"name":"초중고교 필수교과 축소 및 선택과목 확대, 문예체 교육 활성화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 고교학점제 도입ᆞ확대, 국가교육회의 (’17년 설치)에서 의견수렴을 통해 단계적 고교체제 개편 추진","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008083961"},{"name":" ’17년 기초학력 보장법 제정을 통해 국가 차원의 기초 학력 보장체제 구축, ’18년 1수업 2교사제 등 단위학교 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 국가수준학업성취도 평가 표집평가로 전환, ’18년부터 초ᆞ중학교 학생 평가제도 개선, 혁신학교(지구)의 성과 일반 학교 확산, 자유학기제의 내실화 및 자유학년제 확산 등 추진","status":"진행중 (학업성취도평가 표집평가 전환완료)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008019382"},{"name":"교장공모제 확대(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"성과제도 개선 등 교원인 사제도 개선","status":"세부계획 미정","statuscode":"none"},{"name":"교ᆞ사대 교육과정(교직과정) 개선방안 마련(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"복잡한 대입전형 단순화 추진ᆞ적용(’18년~), 중장기 대입 제도 개선* 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["유아","초등학생","학습시간","휴식시간","필수교과","고교학점제","기초학력보장법","국가수준학업성취도","교장공모제","교원인사제도","대입전형"]},{"name":"53: 아동ᆞ청소년의 안전하고 건강한 성장 지원","department":["여가부"],"category":["아동","복지","보육","청년"],"description":[{"name":"’21년까지 학교밖청소년지원센터 전체 시군구 확대로 접근성ᆞ지원기능 강화","status":"세부계획 미정","statuscode":"none"},{"name":"생애주기별 각종 위기에서 예방부터 보호·치료까지 종합적 지원체계 마련, 가족정책과 아동ᆞ청소년 업무 연계ᆞ통합 추진","status":"세부계획 미정","statuscode":"none"},{"name":"시설 퇴소 아동에게 실질적 도움이 될 수 있는 소득ᆞ주거ᆞ자립지원 강화","status":"세부계획 미정","statuscode":"none"},{"name":"시도 등에 청소년 육성 전담공무원 배치 확대","status":"세부계획 미정","statuscode":"none"},{"name":"청소년 활동 및 자원봉사 운영 내실화, 방과후아카데미 운영 확대","status":"세부계획 미정","statuscode":"none"}],"keywords":["학교밖청소년지원센터","생애주기","시설퇴소아동","청소년육성전담공무원"]},{"name":"54: 미래 교육 환경 조성 및 안전한 학교 구현","department":["교육부"],"category":["교육","복지","아동"],"description":[{"name":"디지털 인문학적 소양을 갖추도록 소프트웨어 교육 내실화 및 선도 핵심교원 육성(’21년, 1만명)","status":"세부계획 미정","statuscode":"none"},{"name":"지능형 학습분석 서비스 제공(’20년) 및 교육용 오픈마켓 구축ᆞ운영(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"교사 1인당 학생 수를 OECD 평균 수준으로 개선, 초ᆞ중등 교과교사와 비교과교사(유아ᆞ특수 등) 확충, 학교 비정규직 정규직화 및 처우 개선","status":"진행중 (2017년 추경 반영, 비교과 압도적 확충)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=020&aid=0003083801"},{"name":"석면 제거, 내진 보강, 분필칠판 및 노후 냉난방기 교체 등 낡은 학교 환경 개선, 공기정화장치 설치 등 학교미세먼지대책 마련(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 아동학대 조기 발견을 위한 시스템 간 연계, 교육환경보호구역 인근 도박시설에 대한 합리적 규제조치 마련(’18년)","status":"세부계획 미정","statuscode":"none"}],"keywords":["소프트웨어교육","지능형학습분석","교과교사","학교비정규직","학교시설","아동학대","학교미세먼지대책"]},{"name":"65: 다양한 가족의 안정적인 삶 지원 및 사회적 차별 해소","department":["여가부"],"category":["보육","복지","아동"],"description":[{"name":"한부모가족 아동양육비 및 지원연령 단계적 인상ᆞ확대","status":"세부계획 미정","statuscode":"none"},{"name":"비양육자의 양육비 이행을 위한 소득재산 조회 등 제도 개선","status":"세부계획 미정","statuscode":"none"},{"name":"‘결혼이민자 자립 지원 패키지’ 및 ‘다문화 자녀 성장 지원 프로그램’ 운영으로 다문화가족의 사회적 자립 도모","status":"세부계획 미정","statuscode":"none"},{"name":"일반국민 대상 다문화 이해교육 확대 실시","status":"세부계획 미정","statuscode":"none"},{"name":"취약ᆞ위기가족 등 지원 서비스 확대로 가족해체 예방","status":"세부계획 미정","statuscode":"none"}],"keywords":["한부모가족","아동양육비","비양육자","결혼이민자","다문화자녀","다문화가족","다문화","취약위기가족","가족해체"]}]},{"theme":"childcare","keys":[{"name":"42: 국민의 기본생활을 보장하는 맞춤형 사회보장","department":["복지부"],"category":["복지","청년","노인","아동","보육"],"description":[{"name":"기초생활보장 주거급여는 ’18년부터 부양의무자 기준 폐지, 생계ᆞ의료급여는 소득재산 하위 70% 중 노인ᆞ중증장애인이 포함된 가구에 대한 부양의무자 기준 적용 제외(’19년부터 단계적 확대)","status":"진행중 (2017년 11월부터 기준완화)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=020&aid=0003084039"},{"name":"’18년부터 0~5세 아동수당 월 10만원 지급","status":"입법예고","statusdesc":"18년 7월부터 지급키로 하고 아동수당법 제정안에 대해 17년 9월 4일까지 입법예고","statuscode":"congress","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841150&pageIndex=22&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"’17년부터 미취업 청년에 대해 청년구직촉진수당(30만원, 3개월) 지급","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 기초연금ᆞ장애인연금(기초급여)을 25만원으로 인상","status":"입법예고","statuscode":"congress","statusdesc":"기존에 기초연금을 수급하는 어르신들은 내년 4월부터 현행 20만 6050원에서 약 5만 원 가량 인상된 25만원을 기초연금으로 받을 수 있음","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841333&pageIndex=15&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"국민연금ᆞ고용보험 등 사회보험 사각지대를 해소하고, 두루누리 사회보험료 지원사업에 건강보험료 추가 지원(신규가입자)","status":"세부계획 미정","statuscode":"none"},{"name":"장애등급제 단계적 폐지 및 종합지원체계 도입 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["기초생활보장","주거급여","부양의무자","생계급여","의료급여","소득재산","노인","중증장애인","아동수당","청년구직촉진수당","기초연금","장애인연금","국민연금","고용보험","건강보험료","장애등급제"]},{"name":"48: 미래세대 투자를 통한 저출산 극복","department":["복지부"],"category":["주택/부동산","복지","보육","아동","여성"],"description":[{"name":"’22년까지 공공임대주택의 30% 신혼부부 우선 공급","status":"세부계획 미정","statuscode":"none"},{"name":"17년부터 난임시술비 등 건강보험 적용","status":"진행중 (2017년 10월 실시)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=018&aid=0003885557"},{"name":"출산지원금 도입방안 검토","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 아동수당 지급(0~5세, 월 10만원)","status":"세부계획 미정","statuscode":"none"},{"name":"매년 어린이집 대폭 확충하여 ’22년 국공립 어린이집 이용률 40% 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 첫 3개월 육아휴직급여 2배 인상, ’18년부터 아빠 육아휴직 보너스 제도 도입 및 육아로 인한 근로시간 단축 지원(10to4 더불어 돌봄)","status":"완료","statusdesc":"다음달 1일부터 육아휴직때 첫 3개월의 육아휴직급여는 통상임금의 80%(상한 150만원, 하한 70만원)로 상향 지급.","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841344&pageIndex=15&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"저출산 대책에 대한 컨트롤타워 기능 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 빅데이터 활용 위기아동 조기 발견 시스템 구축","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공임대주택","신혼부부","난임시술비","출산지원금","아동수당","국공립어린이집","육아휴직급여","육아휴직","저출산","위기아동조기발견시스템"]},{"name":"49: 유아에서 대학까지 교육의 공공성 강화","department":["교육부"],"category":["청년","아동","교육","복지","보육"],"description":[{"name":"’18년 어린이집 누리과정 전액 국고지원","status":"세부계획 미정","statuscode":"none"},{"name":"국ᆞ공립유치원 취학률 확대(’17년 25% → ’22년 40%)","status":"세부계획 미정","statuscode":"none"},{"name":"교사자질 향상과 교사처우 개선(’18년), 전문교육과정 운영, 자격체계 개편 추진(교육부ᆞ복지부)","status":"세부계획 미정","statuscode":"none"},{"name":"온종일 돌봄교실을 초등학교 전 학년으로 점차 확대하고 내실화방안 병행 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’20년부터 고등학교 무상교육 단계적 실시(’22년 완성)를 통해 고등학생 입학금ᆞ수업료ᆞ학교운영지원비ᆞ교과서비 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 대학생이 체감할 수 있는 등록금 부담 경감, 학자금 대출이자 부담 경감 및 입학금 단계적 폐지 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["누리과정","어린이집","국공립유치원","교사처우","돌봄교실","무상교육","고등학교","등록금","입학금","학자금대출이자","대학생"]},{"name":"50: 교실혁명을 통한 공교육 혁신","department":["교육부"],"category":["교육","복지","아동","보육"],"description":[{"name":"유아ᆞ초등학생 적정 학습시간 및 휴식시간 보장 법제화","status":"세부계획 미정","statuscode":"none"},{"name":"초중고교 필수교과 축소 및 선택과목 확대, 문예체 교육 활성화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 고교학점제 도입ᆞ확대, 국가교육회의 (’17년 설치)에서 의견수렴을 통해 단계적 고교체제 개편 추진","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008083961"},{"name":" ’17년 기초학력 보장법 제정을 통해 국가 차원의 기초 학력 보장체제 구축, ’18년 1수업 2교사제 등 단위학교 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 국가수준학업성취도 평가 표집평가로 전환, ’18년부터 초ᆞ중학교 학생 평가제도 개선, 혁신학교(지구)의 성과 일반 학교 확산, 자유학기제의 내실화 및 자유학년제 확산 등 추진","status":"진행중 (학업성취도평가 표집평가 전환완료)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008019382"},{"name":"교장공모제 확대(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"성과제도 개선 등 교원인 사제도 개선","status":"세부계획 미정","statuscode":"none"},{"name":"교ᆞ사대 교육과정(교직과정) 개선방안 마련(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"복잡한 대입전형 단순화 추진ᆞ적용(’18년~), 중장기 대입 제도 개선* 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["유아","초등학생","학습시간","휴식시간","필수교과","고교학점제","기초학력보장법","국가수준학업성취도","교장공모제","교원인사제도","대입전형"]},{"name":"53: 아동ᆞ청소년의 안전하고 건강한 성장 지원","department":["여가부"],"category":["아동","복지","보육","청년"],"description":[{"name":"’21년까지 학교밖청소년지원센터 전체 시군구 확대로 접근성ᆞ지원기능 강화","status":"세부계획 미정","statuscode":"none"},{"name":"생애주기별 각종 위기에서 예방부터 보호·치료까지 종합적 지원체계 마련, 가족정책과 아동ᆞ청소년 업무 연계ᆞ통합 추진","status":"세부계획 미정","statuscode":"none"},{"name":"시설 퇴소 아동에게 실질적 도움이 될 수 있는 소득ᆞ주거ᆞ자립지원 강화","status":"세부계획 미정","statuscode":"none"},{"name":"시도 등에 청소년 육성 전담공무원 배치 확대","status":"세부계획 미정","statuscode":"none"},{"name":"청소년 활동 및 자원봉사 운영 내실화, 방과후아카데미 운영 확대","status":"세부계획 미정","statuscode":"none"}],"keywords":["학교밖청소년지원센터","생애주기","시설퇴소아동","청소년육성전담공무원"]},{"name":"65: 다양한 가족의 안정적인 삶 지원 및 사회적 차별 해소","department":["여가부"],"category":["보육","복지","아동"],"description":[{"name":"한부모가족 아동양육비 및 지원연령 단계적 인상ᆞ확대","status":"세부계획 미정","statuscode":"none"},{"name":"비양육자의 양육비 이행을 위한 소득재산 조회 등 제도 개선","status":"세부계획 미정","statuscode":"none"},{"name":"‘결혼이민자 자립 지원 패키지’ 및 ‘다문화 자녀 성장 지원 프로그램’ 운영으로 다문화가족의 사회적 자립 도모","status":"세부계획 미정","statuscode":"none"},{"name":"일반국민 대상 다문화 이해교육 확대 실시","status":"세부계획 미정","statuscode":"none"},{"name":"취약ᆞ위기가족 등 지원 서비스 확대로 가족해체 예방","status":"세부계획 미정","statuscode":"none"}],"keywords":["한부모가족","아동양육비","비양육자","결혼이민자","다문화자녀","다문화가족","다문화","취약위기가족","가족해체"]},{"name":"71: 휴식 있는 삶을 위한 일ᆞ생활의 균형 실현","department":["고용부"],"category":["문화","생활","노동","보육","인권"],"description":[{"name":"’17년부터 주 52시간 근로 확립 등 법ᆞ제도 개선","status":"국회 논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009444133"},{"name":"포괄임금제 규제","status":"세부계획 미정","statuscode":"none"},{"name":"장시간 근로사업장 지도ᆞ감독 강화, 근로시간 단축에 따른 중소기업ᆞ근로자 부담 완화 지원","status":"세부계획 미정","statuscode":"none"},{"name":"근로시간 단축 종합점검추진단 운영, 근로시간 특례 제외 업종 및 4인 이하 사업장에 대한 합리적 개선방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"근로시간 외 업무 지시 금지, 공휴일 민간 적용 및 1년 미만 근무 연차휴가 보장 등 일가정 양립을 위한 종합 개선방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 첫 3개월 육아휴직급여 2배 인상, ’18년에 육아휴직 보너스 제도 도입 등 인센티브 강화 추진","status":"진행중 (공공기관 시행)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=032&aid=0002807499"},{"name":"육아기 근로시간 단축기간 확대를 위한 ‘10 to 4 더불어 돌봄’, 질병ᆞ 사고ᆞ노령 가족을 위한 가족돌봄휴직제도 등 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["주52시간근로","포괄임금제","장시간근로사업장","근로시간","공휴일","연차휴가","일가정양립","육아휴직급여","육아휴직보너스","가족돌봄휴직제도","10to4더불어돌봄"]}]},{"theme":"education","keys":[{"name":"49: 유아에서 대학까지 교육의 공공성 강화","department":["교육부"],"category":["청년","아동","교육","복지","보육"],"description":[{"name":"’18년 어린이집 누리과정 전액 국고지원","status":"세부계획 미정","statuscode":"none"},{"name":"국ᆞ공립유치원 취학률 확대(’17년 25% → ’22년 40%)","status":"세부계획 미정","statuscode":"none"},{"name":"교사자질 향상과 교사처우 개선(’18년), 전문교육과정 운영, 자격체계 개편 추진(교육부ᆞ복지부)","status":"세부계획 미정","statuscode":"none"},{"name":"온종일 돌봄교실을 초등학교 전 학년으로 점차 확대하고 내실화방안 병행 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’20년부터 고등학교 무상교육 단계적 실시(’22년 완성)를 통해 고등학생 입학금ᆞ수업료ᆞ학교운영지원비ᆞ교과서비 지원","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 대학생이 체감할 수 있는 등록금 부담 경감, 학자금 대출이자 부담 경감 및 입학금 단계적 폐지 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["누리과정","어린이집","국공립유치원","교사처우","돌봄교실","무상교육","고등학교","등록금","입학금","학자금대출이자","대학생"]},{"name":"50: 교실혁명을 통한 공교육 혁신","department":["교육부"],"category":["교육","복지","아동","보육"],"description":[{"name":"유아ᆞ초등학생 적정 학습시간 및 휴식시간 보장 법제화","status":"세부계획 미정","statuscode":"none"},{"name":"초중고교 필수교과 축소 및 선택과목 확대, 문예체 교육 활성화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 고교학점제 도입ᆞ확대, 국가교육회의 (’17년 설치)에서 의견수렴을 통해 단계적 고교체제 개편 추진","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008083961"},{"name":" ’17년 기초학력 보장법 제정을 통해 국가 차원의 기초 학력 보장체제 구축, ’18년 1수업 2교사제 등 단위학교 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 국가수준학업성취도 평가 표집평가로 전환, ’18년부터 초ᆞ중학교 학생 평가제도 개선, 혁신학교(지구)의 성과 일반 학교 확산, 자유학기제의 내실화 및 자유학년제 확산 등 추진","status":"진행중 (학업성취도평가 표집평가 전환완료)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008019382"},{"name":"교장공모제 확대(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"성과제도 개선 등 교원인 사제도 개선","status":"세부계획 미정","statuscode":"none"},{"name":"교ᆞ사대 교육과정(교직과정) 개선방안 마련(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"복잡한 대입전형 단순화 추진ᆞ적용(’18년~), 중장기 대입 제도 개선* 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["유아","초등학생","학습시간","휴식시간","필수교과","고교학점제","기초학력보장법","국가수준학업성취도","교장공모제","교원인사제도","대입전형"]},{"name":"51: 교육의 희망사다리 복원","department":["교육부"],"category":["교육","복지"],"description":[{"name":"사회적 배려 대상자 기회균형 선발 의무화(’21학년도), 선발비율 확대 대학 인센티브 마련","status":"세부계획 미정","statuscode":"none"},{"name":"저소득층ᆞ지방고 졸업생 지방대 의약학 계열 입학 기회 확대*, 법학전문대학원 블라인드 면접 의무화 및 취약계층 학생선발**과 장학금 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"특수교사ᆞ학교(급) 확대, 통합교육 지원교사 (순회교사) 배치, 장애대학생 진로ᆞ취업교육 강화 추진","status":"세부계획 미정","statuscode":"none"},{"name":"국가직 지역인재 9급 채용 단계적 확대 및 공공기관ᆞ민간기업의 고졸채용 유도(’17년~)","status":"세부계획 미정","statuscode":"none"},{"name":"고졸기술인재 국비유학 및 글로벌 인턴 확대, 직업계고 취업처 발굴(’17년~)","status":"세부계획 미정","statuscode":"none"},{"name":"대입에서 출신 고교 블라인드 면접 도입","status":"세부계획 미정","statuscode":"none"},{"name":"공공기관ᆞ지방공기업 블라인드 채용 의무화 및 민간기업 확산 유도","status":"세부계획 미정","statuscode":"none"}],"keywords":["사회적배려대상자","기회균형","대입","저소득층","지방고","블라인드","취약계층","특수교사","특수학급","국가직지역인재","공공기관"]},{"name":"52: 고등교육의 질 제고 및 평생ᆞ직업교육 혁신","department":["교육부"],"category":["교육","복지","4차산업혁명"],"description":[{"name":"지자체와의 연계 강화를 통한 거점 국립대 집중육성 및 지역 강소대학 지원 확대(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"대학 재정지원사업 전면 개편(일반과 특수목적 구분) 및 순수 기초연구 예산 약 2배 증액, 도전적 연구 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 직업교육 마스터플랜 마련 및 직업계고 재정지원 확대, 직업계고 학점제 단계적 운영(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 전문대학에 지원 확대 방안 마련 및 ’19년 공영형 전문대 운영을 통해 전문대를 직업교육 지역거점으로 육성","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 4차 산업분야를 우선으로 분야별 ‘한국형 나노디그리’ 모델 개발ᆞ운영, 성인 비문해자 교육기회 확대, 한국형 무크(K-MOOC) 강좌 확대","status":"세부계획 미정","statuscode":"none"},{"name":"대학-공공기관-지자체가 연계된 산학협력 클러스터 조성, 대학 내 기업ᆞ연구소 등 입주로 상시적 산학협력 촉진","status":"세부계획 미정","statuscode":"none"}],"keywords":["국립대","지역강소대학","기초연구","대학재정지원사업","직업교육","전문대학","나노디그리","한국형무크","산학협력"]},{"name":"54: 미래 교육 환경 조성 및 안전한 학교 구현","department":["교육부"],"category":["교육","복지","아동"],"description":[{"name":"디지털 인문학적 소양을 갖추도록 소프트웨어 교육 내실화 및 선도 핵심교원 육성(’21년, 1만명)","status":"세부계획 미정","statuscode":"none"},{"name":"지능형 학습분석 서비스 제공(’20년) 및 교육용 오픈마켓 구축ᆞ운영(’18년~)","status":"세부계획 미정","statuscode":"none"},{"name":"교사 1인당 학생 수를 OECD 평균 수준으로 개선, 초ᆞ중등 교과교사와 비교과교사(유아ᆞ특수 등) 확충, 학교 비정규직 정규직화 및 처우 개선","status":"진행중 (2017년 추경 반영, 비교과 압도적 확충)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=020&aid=0003083801"},{"name":"석면 제거, 내진 보강, 분필칠판 및 노후 냉난방기 교체 등 낡은 학교 환경 개선, 공기정화장치 설치 등 학교미세먼지대책 마련(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 아동학대 조기 발견을 위한 시스템 간 연계, 교육환경보호구역 인근 도박시설에 대한 합리적 규제조치 마련(’18년)","status":"세부계획 미정","statuscode":"none"}],"keywords":["소프트웨어교육","지능형학습분석","교과교사","학교비정규직","학교시설","아동학대","학교미세먼지대책"]},{"name":"76: 교육 민주주의 회복 및 교육자치 강화","department":["교육부"],"category":["교육","정치/정부"],"description":[{"name":"’17년 국정 역사교과서 폐지(5.31 확정) 및 검정 역사교과서 개발방안 마련 - 발행체제 연구ᆞ의견수렴(’18년)을 통해 자유발행제 단계적 도입(’19년~)","status":"진행중 (국정교과서 폐지/새 교과서 2020년으로 연기)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=025&aid=0002739559"},{"name":"’18년부터 국립대 총장후보자 선정방식과 재정지원사업 연계 폐지 및 사학비리 근절을 위한 사립학교법령 개정 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 대통령 직속 자문기구인 ‘국가교육회의’를 설치하고, 중장기 교육정책 수립을 위한 국가교육위원회 설치 추진(’19년)","status":"논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=003&aid=0008083961"},{"name":"학교운영위원회 학생ᆞ학부모 자치활동 활성화 방안 마련(’17년), 유치원 포함 초중고 학교 학부모회 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"찾아가는 정책 설명회 등 현장 소통 기회를 확산 하고, 교육현장과의 교류 활성화 및 교육정책이력제 확대(’17년)","status":"세부계획 미정","statuscode":"none"}],"keywords":["국정역사교과서","검정역사교과서","자유발행제","국립대","총장후보자","재정지원사업","사학비리","사립학교법령","국가교육회의","국가교육위원회","교육부","학교운영위원회","교육정책이력제"]}]},{"theme":"agricultural","keys":[{"name":"62: 해양영토 수호와 해양안전 강화","department":["해수부"],"category":["환경/안전","농산어촌"],"description":[{"name":"’18년부터 독도ᆞ울릉도 연계관리를 강화하고, 지역별 거점항만에 해경선 접안시설 및 경비시설 확충","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 3개 해양과학기지 영토거점화와 영해기점 영구시설물 22개소 설치","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 남해어업관리단 신설","status":"완료","statuscode":"done","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=001&aid=0009417821"},{"name":"’19년 한-중 공동단속센터 설치, ’22년 육ᆞ해ᆞ공 감시망 구축과 한-중 공조체계 공고화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 매년 연료운반선을 2척씩 건조하여 생필품 운송 지원, 찾아가는 의료서비스 수혜대상을 매년 10%씩 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 연안여객 준공영제 확대ᆞ시행","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 연안여객선 40척 현대화 및 소규모 항ᆞ포구 접안시설 개선","status":"세부계획 미정","statuscode":"none"},{"name":"’19년 연안 100km까지 초고속 해상재난안전 통신망(LTE-M)을 구축하고, ’21년 시스템 고도화 및 ’22년 전국 운영","status":"세부계획 미정","statuscode":"none"}],"keywords":["독도","울릉도","거점항만","해경선접안시설","해양과학기지","남해어업관리단","한중공동단속센터","연료운반선","연안여객","준공영제","연안여객선","초고속해상재난안전통신망","LTE-M"]},{"name":"81: 누구나 살고 싶은 복지 농산어촌 조성","department":["농식품부"],"category":["농산어촌","경제","일자리"],"description":[{"name":"’18년부터 군지역에 100원 택시 등 농어촌형 교통모델 확대","status":"세부계획 미정","statuscode":"none"},{"name":"농지연금 신규상품 도입(’17년), 국민연금 기준소득금액 단계적 상향 지원 검토","status":"진행중 (농지연금 신규상품)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=117&oid=298&aid=0000225158"},{"name":"영농ᆞ가사도우미 지원 확대 및 관련 법 개정을 통해 ’21년부터 여성 농어업인 대상 특화 건강검진 시범실시","status":"세부계획 미정","statuscode":"none"},{"name":"농어업 기반 6차산업 - ’17년 농산어촌 관광상품 개발, ’18년 농촌관광 등급평가제 개편 및 ’22년 우수 관광자원 선정ᆞ홍보 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"농어업 기반 6차산업 - ’18년사회적농업시범사업* 실시 및 관련 법적근거 마련 추진","status":"세부계획 미정","statuscode":"none"},{"name":"산림분야 일자리 - ’18년 나무의사 자격제도 도입 및 ’20년부터 목재산업단지 조성","status":"세부계획 미정","statuscode":"none"},{"name":"산림분야 일자리 - ’22년 전국 권역별 국ᆞ공립 산림복지단지와 국가 숲길 네트워크 조성","status":"세부계획 미정","statuscode":"none"}],"keywords":["농산어촌","군지역","100원택시","농지연금","영농가사도우미","농어업인","6차산업","농산어촌관광상품","농촌관광등급평가제","사회적농업시범사업","산림일자리","나무의사자격제도","목재산업단지","국공립산림복지단지","국가숲길네트워크"]},{"name":"82: 농어업인 소득안전망의 촘촘한 확충","department":["농식품부"],"category":["농산어촌","경제","복지"],"description":[{"name":"쌀은 시장격리, 사료용벼 전환 등 선제적 수확기 수급안정 방안 시행(’17년), ’18년~’19년 생산조정제(15만ha) 한시 도입","status":"세부계획 미정","statuscode":"none"},{"name":"친환경농업직불 단가 인상(’18년), 농업환경보전 프로그램 도입 등 생태ᆞ환경을 보전하는 방향으로 직불제 확대","status":"세부계획 미정","statuscode":"none"},{"name":"농업재해보험이 개발되지 않은 품목(농약대, 대파대, 시설부자재 등 35개)의 복구지원 단가 인상 - ’22년까지 밭고정ᆞ조건불리직불 단가를 단계적 인상, 조건불리수산 직불 단가 인상 및 사업대상을 전체 섬으로 확대 추진","status":"세부계획 미정","statuscode":"none"},{"name":"농어업인에 대한 농어업인안전보험 국고지원을 확대하고 산재보험 수준의 보험상품 개발ᆞ보급","status":"세부계획 미정","statuscode":"none"}],"keywords":["쌀시장격리","쌀","사료용벼","쌀생산조정제","농산물의무자조금","농산물생산안정제","친환경농업직불단가","농업재해보험","농어업인안전보험"]},{"name":"83: 지속가능한 농식품 산업 기반 조성","department":["농식품부"],"category":["농산어촌","청년","정치/정부"],"description":[{"name":"’18년 청년농업인 영농정착지원제 도입, 귀농ᆞ귀촌 임대주택단지 조성 등 영농창업 초기 생활안정ᆞ정착지원 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 6차산업형 친환경농업지구 100개소 조성 등 친환경ᆞ동물복지 농축산업 확산","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 가축질병 방역체계 강화를 위한 보험제도 도입, ’20년 한국형 구제역 백신 생산, ’22년까지 깨끗한 축산농장 5천호 조성 추진","status":"추진중 (가축질병보험 18년 시범운영)","statuscode":"none"},{"name":"’22년까지 스마트팜 시설원예 7천ha, 축산 5천호 보급 및 관련 R&D 투자 확대","status":"세부계획 미정","statuscode":"none"},{"name":"농식품바우처 시범사업, 유기ᆞ이력제 수산물 학교급식 확대, GAP 및 HACCP 인증농가 확대 등","status":"세부계획 미정","statuscode":"none"},{"name":"’20년 기능성식품산업육성법 제정 등 기능성식품, 발효식품 육성","status":"세부계획 미정","statuscode":"none"},{"name":"대통령 직속 농어업ᆞ농어촌 특별위원회 설치 추진 및 농어업회의소 법적 근거 마련, 지방분권형 농정 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["청년농업인","영농정착지원제","귀농","귀촌","영농창업","친환경농업지구","가축질병방역체계","한국형구제역백신","깨끗한축산농장","스마트팜","농식품바우처","유기이력제수산물","기능성식품산업육성법","대통령직속농어업농어촌특별위원회","농어업회의소"]}]},{"theme":"labor","keys":[{"name":"63: 노동존중 사회 실현","department":["고용부"],"category":["노동","인권"],"description":[{"name":"노사정 사회적 대화로 노동존중 사회 기본계획 수립(’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"노동기본권 신장을 위한 법ᆞ제도 개선 - ’17년에 2대 지침 폐지, 공공기관 성과연봉제 관련 조치 폐기, 위법ᆞ불합리한 단체협약 시정지도 등 개선","status":"진행중 (공공기관 성과연봉제 폐기)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=057&aid=0001156199"},{"name":"ILO 핵심협약 비준 - 강제노동에 관한 제29호 및 제105호 협약, 결사의 자유 및 단결권・단체교섭권 보호에 관한 제87호 및 제98호 협약 비준 추진","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 근로자 대표제도 기능 강화, 중소ᆞ영세 미조직 노동자 권익 보호를 위한 지원체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"체불근로자 생계보호 강화 및 체불사업주 제재 강화, 부당해고 구제절차 개선(~’18년)","status":"세부계획 미정","statuscode":"none"},{"name":"학교 노동인권교육 활성화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년에 직장 내 괴롭힘 으로부터 근로자 보호를 위한 종합대책 마련ᆞ시행","status":"세부계획 미정","statuscode":"none"}],"keywords":["노사정사회적대화","공공기관","성과연봉제","단체협약","강제노동","결사의자유","단체교섭권","노사관계","근로자대표제도","노동자","체불근로자","체불사업주","부당해고","노동인권교육","직장내괴롭힘"]},{"name":"64: 차별 없는 좋은 일터 만들기","department":["고용부"],"category":["노동","인권"],"description":[{"name":"비정규직 사용사유제한 제도 도입 추진*, 비정규직 사용부담 강화 방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"비정규직 차별시정제도 전면 개편, 고용형태에 따른 차별 금지, 1년 미만 근로자(비정규직 포함) 퇴직급여 보장 등","status":"세부계획 미정","statuscode":"none"},{"name":"도급인의 임금지급 연대책임 및 안전보건조치 의무 강화, 파견ᆞ도급 구별기준 재정립","status":"세부계획 미정","statuscode":"none"},{"name":"’20년 최저임금 1만원 실현과 소상공인 등 부담 완화 방안 마련, 공정임금 구축 등 임금격차 해소 추진","status":"진행중 (18년 최저임금 7,530원)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=469&aid=0000222534"},{"name":"특수고용노동자 등 보호대상 확대, 도급인의 산업 재해 예방 의무에 대한 종합적인 개선방안 마련, 중대재해 발생시 처벌강화","status":"세부계획 미정","statuscode":"none"},{"name":"감정노동자 보호를 위한 법적 근거 마련, 특수형태 근로종사자 산재보험 적용 확대 등 보호 사각지대 해소","status":"세부계획 미정","statuscode":"none"},{"name":"물질안전보건자료(MSDS) 영업비밀 심사제도 도입, 일정규모 이상 사업장 안전ᆞ보건관리업무 위탁 금지 등 제도 개선","status":"세부계획 미정","statuscode":"none"}],"keywords":["비정규직","사용사유제한","차별시정제도","퇴직급여","도급인","원청","파견","도급","최저임금","특수고용노동자","산업재해","감정노동자","물질안전보건자료","안전보건관리업무"]},{"name":"71: 휴식 있는 삶을 위한 일ᆞ생활의 균형 실현","department":["고용부"],"category":["문화","생활","노동","보육","인권"],"description":[{"name":"’17년부터 주 52시간 근로 확립 등 법ᆞ제도 개선","status":"국회 논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009444133"},{"name":"포괄임금제 규제","status":"세부계획 미정","statuscode":"none"},{"name":"장시간 근로사업장 지도ᆞ감독 강화, 근로시간 단축에 따른 중소기업ᆞ근로자 부담 완화 지원","status":"세부계획 미정","statuscode":"none"},{"name":"근로시간 단축 종합점검추진단 운영, 근로시간 특례 제외 업종 및 4인 이하 사업장에 대한 합리적 개선방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"근로시간 외 업무 지시 금지, 공휴일 민간 적용 및 1년 미만 근무 연차휴가 보장 등 일가정 양립을 위한 종합 개선방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 첫 3개월 육아휴직급여 2배 인상, ’18년에 육아휴직 보너스 제도 도입 등 인센티브 강화 추진","status":"진행중 (공공기관 시행)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=032&aid=0002807499"},{"name":"육아기 근로시간 단축기간 확대를 위한 ‘10 to 4 더불어 돌봄’, 질병ᆞ 사고ᆞ노령 가족을 위한 가족돌봄휴직제도 등 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["주52시간근로","포괄임금제","장시간근로사업장","근로시간","공휴일","연차휴가","일가정양립","육아휴직급여","육아휴직보너스","가족돌봄휴직제도","10to4더불어돌봄"]},{"name":"73: 관광복지 확대와 관광산업 활성화","department":["문체부"],"category":["노동","생활","관광"],"description":[{"name":"노동자 휴가지원제 도입(’18년부터 제도설계 등 추진), 열린관광지 확대(5년간 100개 조성 지원)","status":"세부계획 미정","statuscode":"none"},{"name":"대체공휴일 확대 등 공휴일 제도 개선(’18년 관련 규정 개정)","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 개별관광객 맞춤형 관광코스 개발 확대 및 온라인 플랫폼 운영ᆞ개선 지속","status":"세부계획 미정","statuscode":"none"},{"name":"관광품질인증제의 법적근거 마련을 통한 체계적 관리(’18년부터 적용)","status":"완료 (시행)","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840787&pageIndex=2&startDate=1997-01-01&endDate=2017-08-08&repCodeType=&repCode=&srchWord="},{"name":"국가관광전략회의 신설ᆞ운영","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 800개 관광벤처기업 발굴ᆞ지원, 융합관광산업 육성(VRᆞAR 콘텐츠 제작 등)","status":"세부계획 미정","statuscode":"none"},{"name":"지역 특화관광명소 집중 육성(’21년까지 테마여행 10선 추진), 관광두레 지속 확대, 외국인이 많이 찾는 ‘글로컬’ 관광지 육성)","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 중국 외 방한 관광객 850만명 등 관광객 다변화","status":"세부계획 미정","statuscode":"none"},{"name":"고부가 관광산업 육성(웰니스 관광클러스터 지원 등), 관광산업 펀드 조성","status":"세부계획 미정","statuscode":"none"}],"keywords":["노동자휴가지원제","노동자","열린관광지","대체공휴일","개별관광객맞춤형관광코스","관광품질인증제","국가관광전략회의","관광벤처기업","융합관광산업","지역특화관광명소","관광두레","중국외방한관광객","외국인","고부가관광산업","관광산업펀드"]}]},{"theme":"culture","keys":[{"name":"67: 지역과 일상에서 문화를 누리는 생활문화 시대","department":["문체부"],"category":["생활","문화"],"description":[{"name":"저소득층에게 연간 6만원이 지급되고 있는 통합문화이용권을 연차별로 확대하여 ’21년부터 10만원 지급","status":"일부 진행중","statusdesc":"18년부터 7만원으로 1만원 인상","statuscode":"partiallywip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841678&pageIndex=1&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"생애주기별 문화예술교육 확대로 ’22년 문화 예술교육 수혜자 수 360만명 달성","status":"세부계획 미정","statuscode":"none"},{"name":"분야별 문화도시 지정을 확대하고, 문화마을 (읍면동 단위 중심) 신규 조성 추진","status":"진행중","statusdesc":"시·군·구 단위로 문화도시를 2018년 신규로 7개소(19개소 계속 지원) 조성 지원하고, 읍·면·동 단위로 문화마을을 2018년 신규로 8개소(17개소 계속 지원) 조성해 특화된 문화 환경을 만들어 나갈 계획","statuscode":"wip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841678&pageIndex=1&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"매장문화재조사 공영제 도입으로 ’22년까지 연간 지표조사 및 발굴조사 지속 확대","status":"세부계획 미정","statuscode":"none"},{"name":"문화재돌봄법(가칭) 제정으로 상시관리 대상 문화재 지속 확대","status":"세부계획 미정","statuscode":"none"},{"name":"전통무형문화의 원형보전 강화 및 국민적 향유를 위한 지원 확대","status":"세부계획 미정","statuscode":"none"},{"name":"가야 문화권 조사ᆞ연구 및 정비 등","status":"세부계획 미정","statuscode":"none"},{"name":"연차별로 문화분야 재원 적극 확대","status":"세부계획 미정","statuscode":"none"}],"keywords":["저소득층","기초문화생활","통합문화이용권","생애주기","문화예술교육","문화도시","문화마을","매장문화재조사공영제","문화재돌봄법","전통무형문화","가야문화권"]},{"name":"68: 창작 환경 개선과 복지 강화로 예술인의 창작권 보장","department":["문체부"],"category":["문화"],"description":[{"name":"’17년 공정성 협약 발표, ’18년 예술가 권익보장을 위한 법률(가칭) 제정 등을 통해 예술지원 공정성 확보 및 예술인 권리 강화","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 문예기금 등 정부지원사업 참여 시 표준 계약서 의무화, 표준계약서 개발 보급(공연, 미술) 지속 추진","status":"세부계획 미정","statuscode":"none"},{"name":"고용보험법 등 관계법령 개정으로 ’19년부터 예술인 고용보험 제도 시행 및 보험료 지원","status":"세부계획 미정","statuscode":"none"},{"name":"문화예술진흥기금 - 단기적으로 일반예산, 복권기금, 관광기금, 체육기금의 재원을 활용하여 안정적으로 사업이 추진되도록 재원대책 마련","status":"완료","statusdesc":"2018년 일반회계로부터 500억원을 문예기금으로 전환함","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841678&pageIndex=1&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"문화예술진흥기금 - 중장기적으로 타 기금이나 수익금의 법정전입 등을 통한 안정적 재원 마련방안 강구","status":"세부계획 미정","statuscode":"none"},{"name":"국민중심의 새로운 문화행정체계 구축 - 지원기관 독립성 확보, 심사 투명성 확대, 현장의 정책결정 참여 확대 및 문화옴부즈맨제도 도입 등","status":"세부계획 미정","statuscode":"none"}],"keywords":["예술인","공정성협약","예술가권익보장을위한법률","문예기금","표준계약서","예술인고용보험","문화예술진흥기금","문화옴부즈맨제도"]},{"name":"69: 공정한 문화산업 생태계 조성 및 세계 속 한류 확산","department":["문체부"],"category":["문화","4차산업혁명"],"description":[{"name":"콘텐츠 주요 구성원 간 불공정 거래 개선을 위해 ’17년부터 (영화) 제정 (애니메이션) 불공정 관행 개선 및 제정 (만화·웹툰·2차적 저작물) 계약서 보완 (대중문화) 대중문화예술인 대상 계약서 제정 (방송) 방송작가 집필표준계약서 제정","status":"세부계획 미정","statuscode":"none"},{"name":"4차산업에 기반한 융합 플랫폼 구축 및 성장 단계별 지원과 첨단기술이 결합한 뉴콘텐츠 육성ᆞ확대*","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 현재 6천만명 한류팬을 1억명으로 확대, ’22년까지 세종 학당 지속 확대","status":"세부계획 미정","statuscode":"none"}],"keywords":["콘텐츠","불공정거래","표준계약서","뉴콘텐츠","4차산업","한류","세종학당"]},{"name":"71: 휴식 있는 삶을 위한 일ᆞ생활의 균형 실현","department":["고용부"],"category":["문화","생활","노동","보육","인권"],"description":[{"name":"’17년부터 주 52시간 근로 확립 등 법ᆞ제도 개선","status":"국회 논의중","statuscode":"discussing","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009444133"},{"name":"포괄임금제 규제","status":"세부계획 미정","statuscode":"none"},{"name":"장시간 근로사업장 지도ᆞ감독 강화, 근로시간 단축에 따른 중소기업ᆞ근로자 부담 완화 지원","status":"세부계획 미정","statuscode":"none"},{"name":"근로시간 단축 종합점검추진단 운영, 근로시간 특례 제외 업종 및 4인 이하 사업장에 대한 합리적 개선방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"근로시간 외 업무 지시 금지, 공휴일 민간 적용 및 1년 미만 근무 연차휴가 보장 등 일가정 양립을 위한 종합 개선방안 마련","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 첫 3개월 육아휴직급여 2배 인상, ’18년에 육아휴직 보너스 제도 도입 등 인센티브 강화 추진","status":"진행중 (공공기관 시행)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=102&oid=032&aid=0002807499"},{"name":"육아기 근로시간 단축기간 확대를 위한 ‘10 to 4 더불어 돌봄’, 질병ᆞ 사고ᆞ노령 가족을 위한 가족돌봄휴직제도 등 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["주52시간근로","포괄임금제","장시간근로사업장","근로시간","공휴일","연차휴가","일가정양립","육아휴직급여","육아휴직보너스","가족돌봄휴직제도","10to4더불어돌봄"]},{"name":"72: 모든 국민이 스포츠를 즐기는 활기찬 나라","department":["문체부"],"category":["문화","생활"],"description":[{"name":"생활체육 환경 조성 -1시군구 1스포츠클럽 운영, 공공체육시설 확충, 지도자 배치 확대 추진","status":"세부계획 미정","statuscode":"none"},{"name":"범정부 협조체계 구축 및 온ᆞ오프라인 홍보 강화, 상황실을 통한 실시간 대회 운영 점검 등을 통해 평창동계올림픽ᆞ패럴림픽 성공 개최","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 국기 태권도 문화콘텐츠화 추진위원회 구성ᆞ운영을 통해 ’22년 태권도 10대 문화콘텐츠 개발ᆞ홍보","status":"세부계획 미정","statuscode":"none"}],"keywords":["공공체육시설","생활체육","평창동계올림픽","태권도","국기태권도문화콘텐츠화추진위원회"]},{"name":"93: 남북교류 활성화를 통한 남북관계 발전","department":["통일부"],"category":["북한","문화","정치/정부"],"description":[{"name":"체육ᆞ종교 분야 남북교류를 재개하고, 민족동질성 회복을 위한 겨레말큰사전 편찬 및 개성만월대 발굴사업 등 추진 - 평창동계올림픽은 북한 참가 지원 등으로 평화올림픽으로 추진","status":"일부 진행중 (평창올림픽 북 참가요청)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=032&aid=0002805180"},{"name":"남북교류협력 - 학술ᆞ역사ᆞ언어ᆞ교육ᆞ문화유산 등 다양한 분야의 사회문화 교류협력 확대 및 제도화","status":"세부계획 미정","statuscode":"none"},{"name":"남북교류협력 - 교류협력 네트워크 확대 및 내실화, 지자체와 민간단체의 자율적인 활동 공간 확보 지원(지자체 차원 교류협력 등) 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"남북교류협력법 등 관련 규정 정비, 인터넷에 기반한 남북교류협력시스템 개선 등 법‧제도화를 통한 교류협력기반 강화","status":"세부계획 미정","statuscode":"none"}],"keywords":["남북교류","개성만월대","겨레말큰사전","평창동계올림픽","남북교류협력","남북교류협력법","남북교류협력시스템"]},{"name":"94: 통일 공감대 확산과 통일국민협약 추진","department":["통일부"],"category":["북한","문화","정치/정부"],"description":[{"name":"국회 협의ᆞ국민 소통 기반 아래 통일국민협약 체결 추진, ’22년까지 협약 체결 및 이행ᆞ소통체계 등 제도 기반도 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 매년 단계별로 광역시도에 통일센터 설치","status":"세부계획 미정","statuscode":"none"},{"name":"국내외 전문가 양성 프로그램을 연구개발, 단계적 으로 확대 실시하여 통일 대비 인적 기반 및 역량 강화","status":"세부계획 미정","statuscode":"none"},{"name":"범국민 통일교육 거버넌스 구축ᆞ운영으로 통일교육의 주요 원칙에 관한 사회적 합의 도출 및 미래세대의 통일인식 제고","status":"세부계획 미정","statuscode":"none"}],"keywords":["퉁일국민협약","통일","통일센터","통일전문가","통일교육"]}]},{"theme":"travel","keys":[{"name":"73: 관광복지 확대와 관광산업 활성화","department":["문체부"],"category":["노동","생활","관광"],"description":[{"name":"노동자 휴가지원제 도입(’18년부터 제도설계 등 추진), 열린관광지 확대(5년간 100개 조성 지원)","status":"세부계획 미정","statuscode":"none"},{"name":"대체공휴일 확대 등 공휴일 제도 개선(’18년 관련 규정 개정)","status":"세부계획 미정","statuscode":"none"},{"name":"’17년에 개별관광객 맞춤형 관광코스 개발 확대 및 온라인 플랫폼 운영ᆞ개선 지속","status":"세부계획 미정","statuscode":"none"},{"name":"관광품질인증제의 법적근거 마련을 통한 체계적 관리(’18년부터 적용)","status":"완료 (시행)","statuscode":"done","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148840787&pageIndex=2&startDate=1997-01-01&endDate=2017-08-08&repCodeType=&repCode=&srchWord="},{"name":"국가관광전략회의 신설ᆞ운영","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 800개 관광벤처기업 발굴ᆞ지원, 융합관광산업 육성(VRᆞAR 콘텐츠 제작 등)","status":"세부계획 미정","statuscode":"none"},{"name":"지역 특화관광명소 집중 육성(’21년까지 테마여행 10선 추진), 관광두레 지속 확대, 외국인이 많이 찾는 ‘글로컬’ 관광지 육성)","status":"세부계획 미정","statuscode":"none"},{"name":"’22년까지 중국 외 방한 관광객 850만명 등 관광객 다변화","status":"세부계획 미정","statuscode":"none"},{"name":"고부가 관광산업 육성(웰니스 관광클러스터 지원 등), 관광산업 펀드 조성","status":"세부계획 미정","statuscode":"none"}],"keywords":["노동자휴가지원제","노동자","열린관광지","대체공휴일","개별관광객맞춤형관광코스","관광품질인증제","국가관광전략회의","관광벤처기업","융합관광산업","지역특화관광명소","관광두레","중국외방한관광객","외국인","고부가관광산업","관광산업펀드"]},{"name":"90: 한반도 신경제지도 구상 및 경제통일 구현","department":["통일부"],"category":["경제","북한","환경/안전","관광"],"description":[{"name":"한반도 신경제지도 - 3대 벨트 구축을 통해 한반도 신성장동력 확보 및 북방경제 연계 추진","status":"세부계획 미정","statuscode":"none"},{"name":"동해권 에너지ᆞ자원벨트 : 금강산, 원산ᆞ단천, 청진ᆞ나선을 남북이 공동개발 후 우리 동해안과 러시아를 연결","status":"세부계획 미정","statuscode":"none"},{"name":"서해안 산업ᆞ물류ᆞ교통벨트 : 수도권, 개성공단, 평양ᆞ남포, 신의주를 연결하는 서해안 경협벨트 건설","status":"세부계획 미정","statuscode":"none"},{"name":"DMZ 환경ᆞ관광벨트 : 설악산, 금강산, 원산, 백두산을 잇는 관광벨트 구축 및 DMZ를 생태ᆞ평화안보 관광지구로 개발","status":"세부계획 미정","statuscode":"none"},{"name":"민ᆞ관 협력 네트워크를 통해 남북한 하나의 시장 협력 방안을 마련하고, 여건 조성 시 남북 시장협력을 단계적으로 실행 하여 생활공동체 형성","status":"세부계획 미정","statuscode":"none"},{"name":"남북경협기업 피해 조속 지원을 실시하고, 남북관계 상황을 감안하여 유연하게 민간경협 재개 추진","status":"진행중 (2017년내 남북경협기업 피해지원 목표)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009430862"},{"name":"여건 조성 시 개성공단 정상화 및 금강산 관광을 재개하고, 남북공동 자원 활용을 위한 협력 추진","status":"세부계획 미정","statuscode":"none"},{"name":"통일경제특구 지정ᆞ운영, 남북 협의를 통해 남북 접경지역 공동관리위원회 설치, 서해 평화협력특별지대 추진 여건 조성","status":"세부계획 미정","statuscode":"none"}],"keywords":["한반도신경제지도","3대벨트","신성장동력","북방경제","동해권에너지자원벨트","서해안산업물류교통벨트","DMZ환경관광벨트","남북경협기업","개성공단","금강산관광","남북공동자원","통일경제특구","남북접경지역공동관리위원회","서해평화협력특별지대"]}]},{"theme":"marine","keys":[{"name":"80: 해운ᆞ조선 상생을 통한 해운강국 건설","department":["해수부"],"category":["경제","해양"],"description":[{"name":"’17년 한국해양진흥공사법 제정 및 ’18년 공사 발족 이후 해운 선사에 대해 원스톱 지원 시행","status":"추진중","statuscode":"none"},{"name":"’17년 국적선사 간 협의체인 한국해운연합(KSP)을 결성하여 중복노선 구조조정과 신항로 개척으로 국적선대의 경쟁력 제고","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 외항선박에 친환경선박 폐선보조금 지급, ’20년 연안화물선으로 확대하여 ’22년까지 총 100척 건조","status":"세부계획 미정","statuscode":"none"},{"name":" ’17년부터 친환경ᆞ고효율선박 기술개발 착수, ’20년 LNG추진선 기반 구축, ‘22년 해양플랜트 기자재 국산화로 조선산업 활력 회복","status":"세부계획 미정","statuscode":"none"},{"name":"’19년부터 국가필수해운제도를 도입하여 비상시 화물운송체계 구축, 선ᆞ화주 상생으로 국적선사 이용비율 확대","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 해양산업클러스터 2개 지정 및 ’19년 완공, ’17년부터 부산북항 상부시설, 광양항 묘도, 인천항 영종도 재개발 착공","status":"세부계획 미정","statuscode":"none"}],"keywords":["해운","한국해양진흥공사법","한국해양진흥공사","한국해운연합","외항선박","친환경선박","폐선보조금","연안화물선","고효율선박","LNG추진선","해양플랜트","조선산업","국가필수해운제도","해양산업클러스터","인천항영종도","광양항묘도","부산북항"]},{"name":"84: 깨끗한 바다, 풍요로운 어장","department":["해수부"],"category":["해양","경제","환경/안전"],"description":[{"name":"’18년 휴어제, ’19년 어구관리법 제정, ’21년 전자 어구 실명제 도입을 통해 ’22년 연근해 어업생산량 110만톤 회복","status":"세부계획 미정","statuscode":"none"},{"name":"’18년부터 명태 인공종자 매년 100만 마리 방류, ’19년부터 명태 양식을 시작하여 ‘22년 명태 자원 회복 및 대량 양식생산체계 구축","status":"세부계획 미정","statuscode":"none"},{"name":"’18년 ICT 첨단양식기술 개발계획 수립, ’21년부터 스마트양식장 구축 등으로 ’22년 양식 생산량 230만톤 달성","status":"세부계획 미정","statuscode":"none"},{"name":"’17년부터 수산물 수출지원센터 4개소 설치 및 단계적 확장으로 ’22년 주요국 수출거점 구축 완료 및 수산물 수출 40억달러 달성","status":"진행중","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=022&aid=0003192055"},{"name":"’19년 수산물 이력추적관리제 단계적 확대, ’17년부터 양식장 HACCP 등록을 매년 30개씩 확대하여 ’22년 180개소 등록 - 산지거점 유통센터 6개소, 소비지물류센터 2개소 건립 등 유통구조 혁신","status":"진행중 (2017.4부터 양식장 HACCP 확대추진)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=421&aid=0002655974"},{"name":"’17년 해양공간계획법 제정, ’18년 남해안부터 ’21년 동해안까지 공간계획을 수립하여 ‘22년 전 해역을 통합관리 - ’22년까지 해양보호구역 34개소 지정, 갯벌복원 20개소 완료","status":"세부계획 미정","statuscode":"none"}],"keywords":["휴어제","어구관리법","전자어구실명제","연근해어업생산량","명태인공종자","첨단양식기술","스마트양식장","수산물수출지원센터","수산물이력추적관리제","해양공간계획법"]}]},{"theme":"nationaldefence","keys":[{"name":"85: 북핵 등 비대칭 위협 대응능력 강화","department":["국방부"],"category":["안보/국방","북한","과학"],"description":[{"name":"국방예산 증액‧효율화 - 적정 소요를 반영한 수준으로 예산증가율 책정, 예산ᆞ조직ᆞ인력 분야 전반의 구조조정ᆞ절감을 통해 지출 성과 극대화","status":"세부계획 미정","statuscode":"none"},{"name":"북핵ᆞ미사일 위협 대비 독자적 한국형 3축체계는 핵심전력소요에 대한 우선순위를 판단, 조기구축 추진 - 북한 전역에 대한 감시ᆞ타격능력(Kill Chain), 핵심시설 방어능력(KAMD), 대량응징보복 수행능력(KMPR) 구축","status":"세부계획 미정","statuscode":"none"},{"name":"합참의 ‘핵ᆞWMD 대응센터’를 ‘핵ᆞWMD 대응작전본부’로 확대 개편하고 임기 내 ‘전략사령부’ 창설 적극 검토","status":"세부계획 미정","statuscode":"none"},{"name":"국가안보실 중심의 사이버안보 컨트롤타워 강화 및 체계적인 사이버안보 수행체계 정립ᆞ발전","status":"세부계획 미정","statuscode":"none"}],"keywords":["국방예산","예산증가율","북핵","미사일","한국형3축체계","킬체인","핵심시설방어능력","대량응징보복수행능력","KAMD","KMPR","핵WMD 대응작전본부","전략사령부","국가안보실","사이버안보"]},{"name":"86: 굳건한 한미동맹 기반 위에 전작권 조기 전환","department":["국방부"],"category":["안보/국방"],"description":[{"name":"한미 연합방위 주도 및 북핵ᆞ미사일 위협에 대비하기 위한 한국군 핵심능력 재설정 및 추진계획 보완ᆞ발전","status":"세부계획 미정","statuscode":"none"},{"name":"한미 정부차원에서 조기 전작권 전환(전환 시기 확정)에 합의, 이후 양국 정부 지침에 따라 한미 국방 당국 간 추진 방향 합의","status":"세부계획 미정","statuscode":"none"},{"name":"한미간 전시 연합작전 지휘를 위한 미래지휘구조 발전 및 굳건한 한미연합방위태세 지속 유지","status":"세부계획 미정","statuscode":"none"},{"name":"한국군핵심군사능력및북핵ᆞ미사일위협대비초기필수대응능력확보","status":"세부계획 미정","statuscode":"none"},{"name":"한미간 전략문서 발전, 연합연습 및 검증 시행","status":"세부계획 미정","statuscode":"none"}],"keywords":["한미동맹","전시작전통제권","한미연합방위","북핵","미사일","한국군","조기전작권전환"]},{"name":"87: 국방개혁 및 국방 문민화의 강력한 추진","department":["국방부"],"category":["안보/국방","정치/정부","인권"],"description":[{"name":"개혁 추동력 확보를 위해 대통령 직속 ‘국방개혁특별위원회’ 설치 추진, 핵심과제를 재선정하여 ‘국방개혁 2.0’ 수립","status":"세부계획 미정","statuscode":"none"},{"name":"국방개혁특위 - 상부지휘구조 개편 및 50만 명으로의 병력 감축 등 인력구조 개편","status":"세부계획 미정","statuscode":"none"},{"name":"병역자원 부족과 전투력 손실 방지 등에 대한 대책을 강구하여 병 복무기간을 18개월로 단축 추진","status":"세부계획 미정","statuscode":"none"},{"name":"부족 병역자원 확보를 위해 전환ᆞ대체복무 지원인력 조정 및 장교ᆞ 부사관 인력 확보 체계 개선","status":"세부계획 미정","statuscode":"none"},{"name":"문민통제 원칙 구현을 위해 국방부ᆞ방사청에 대한 실질적 문민화 방안 마련 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 사법 개혁 - 심판관제도 폐지, 군판사 인사위원회 설치 등을 통해 장병의 공정한 재판 및 인권 보장","status":"일부 진행중 (개정 군사법원법 시행)","statuscode":"partiallywip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=018&aid=0003869061"},{"name":"현역 감축 및 복무기간 단축을 보완하기 위해 육군 동원전력사령부 창설 검토, 예비군훈련장 과학화 등 예비전력 강화도 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 공항 및 군사시설 이전을 통해 국방력 강화 및 주민 불편 해소","status":"세부계획 미정","statuscode":"none"}],"keywords":["국방개혁","국방개혁특별위원회","상부지휘구조","병력감축","병복무기간","전환대체복무","장교부사관","문민통제","국방부","방사청","심판관제도","군판사인사위원회","군사법개혁","육군동원전력사령부","예비군훈련장과학화","군공항","군사시설"]},{"name":"88: 방산비리 척결과 4차 산업혁명 시대에 걸맞은 방위산업 육성","department":["국방부"],"category":["4차산업혁명","안보/국방","경제","과학"],"description":[{"name":"방위사업 비리에 대한 처벌 및 예방시스템 강화","status":"진행중 (대통령 수석보좌관회의 발언, 수사 진행중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=015&aid=0003797291"},{"name":"국방획득체계 전반의 업무수행에 대한 투명성ᆞ 전문성ᆞ효율성ᆞ경쟁력 향상 방안 모색","status":"세부계획 미정","statuscode":"none"},{"name":"국방R&D 기획체계 개선, 국가R&D 역량 국방분야 활용 증진 등을 통해 방산 경쟁력 강화 및 첨단무기 국내 개발 기반 구축","status":"세부계획 미정","statuscode":"none"},{"name":"인센티브 중심으로 방산 생태계를 조성하고, 4차 산업혁명 등 기술변화에 대응하는 국방R&D 수행체계 개편","status":"세부계획 미정","statuscode":"none"},{"name":"방산 중소‧벤처기업 육성으로 안정적 수출기반 마련 및 방산 인프라 강화를 통한 양질의 일자리 창출","status":"세부계획 미정","statuscode":"none"},{"name":"국방항공 유지보수 운영(MRO) 분야와 성과기반 군수(PBS) 확대로 민간산업 활성화 지원","status":"세부계획 미정","statuscode":"none"}],"keywords":["방위사업","국방획득체계","첨단무기","인센티브","4차산업혁명","방산생태계","방산중소벤처기업","국방항공","국방R&D"]},{"name":"89: 장병 인권 보장 및 복무 여건의 획기적 개선","department":["국방부"],"category":["인권","안보/국방","여성","주택/부동산"],"description":[{"name":"’22년까지 최저임금의 50%까지 단계적 인상 추진","status":"세부계획 미정","statuscode":"none"},{"name":"공무상 부상을 입은 장병이 최선의 치료를 선택할 권리 보장 - 공무상 부상자에 대한 민간병원 치료비 전액 지원을 단계적으로 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 복무 학점 인정 추진 및 장병 자기개발 지원을 강화하고, 군 급식 시스템 개선을 통한 급식 질 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"국가인권위원회 내 ‘군인권보호관’ 신설 및 군 의문사 진상 규명을 위한 제도 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"여군 인력 및 계급별 진출을 확대하고, 여군의 임신ᆞ출산ᆞ육아지원을 위한 제도 개선 추진","status":"세부계획 미정","statuscode":"none"},{"name":"군 성폭력 범죄자 처벌 강화 및 무관용 원칙 엄중 적용","status":"세부계획 미정","statuscode":"none"},{"name":"국세청 등 유관기관 협조를 통해 고위공직자 등 사회적 관심계층의 병적 집중관리 및 상시 모니터링ᆞ검증체계 강화","status":"세부계획 미정","statuscode":"none"},{"name":"맞춤형 주거 지원 및 민간주택을 활용한 공급방식 다변화 등 직업군인 주거 지원 제도 발전","status":"세부계획 미정","statuscode":"none"}],"keywords":["최저임금","공무상부상장병","군복무학점인정","군급식시스템","국가인권위원회","병봉급인상","군인권보호관","군의문사진상규명","여군","군성폭력범죄자","국세청","병적집중관리","직업군인"]},{"name":"91: 남북기본협정 체결 및 남북관계 재정립","department":["통일부"],"category":["북한","안보/국방"],"description":[{"name":"남북연락채널 복원 추진, 적십자회담ᆞ군사실무회담 개최 등을 통해 남북관계 재개 여건 조성","status":"시도중 (2017.7 기준 북 무응답)","statuscode":"question","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010483859"},{"name":"남북회담 체계화ᆞ정례화를 추진하고 여건에 따라 고위급회담 개최, 남북기본협정 채택 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"기존 남북합의를 존중하면서 남북관계에 맞는 새로운 합의를 도출하기 위해 기본협정 체결 추진","status":"세부계획 미정","statuscode":"none"},{"name":"국회 비준동의, UN총회 지지 결의 등 남북기본협정 지지 확보 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["남북연락채널","적십자회담","군사실무회담","남북기본협정","고위급회담"]},{"name":"95: 북핵문제의 평화적 해결 및 평화체제 구축","department":["외교부"],"category":["북한","안보/국방"],"description":[{"name":"’20년 합의 도출을 위해 동결에서 완전한 핵폐기로 이어지는 포괄적 비핵화 협상 방안 마련, 비핵화 초기 조치 확보 및 포괄적 비핵화 협상 재개 등 추진","status":"세부계획 미정","statuscode":"none"},{"name":"대북제재 상황을 감안하면서, 남북대화‧교류협력 등 남북관계 차원의 북한 비핵화 견인","status":"세부계획 미정","statuscode":"none"},{"name":"남북 간 정치ᆞ군사적 신뢰 구축 - 북한 비핵화 추진과 함께 남북대화를 통해 초보적 신뢰 구축 조치부터 단계적으로 심화","status":"세부계획 미정","statuscode":"none"},{"name":"’17년 중 로드맵을 마련하고 비핵화 진전에 따라 평화체제 협상 추진, 북핵 완전해결 단계에서 협정 체결 및 평화체제 안정적 관리","status":"세부계획 미정","statuscode":"none"}],"keywords":["북핵","핵폐기","비핵화","대북제재","남북대화","남북교류협력","평화체제"]},{"name":"97: 주변 4국과의 당당한 협력외교 추진","department":["외교부"],"category":["외교","안보/국방","과거사","정치/정부","경제","FTA"],"description":[{"name":"정상 방미 등 활발한 고위급 외교 전개를 통한 한미동맹을 호혜적 책임동맹관계로 지속 심화ᆞ발전","status":"진행중 (한미정상회담 완료, 국방장관회담 추진중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009445984"},{"name":"미 조야를 대상으로 한 활발한 대미외교 전개로 한미동맹 저변 공고화, 연합방위태세 강화 및 한ᆞ미 간 현안 합리적 해결","status":"세부계획 미정","statuscode":"none"},{"name":"한ᆞ중 양국 정상 및 고위급 간 활발한 교류ᆞ대화, 사드 문제 관련 소통 강화로 신뢰 회복을 통한 실질적 한중 전략적 협력 동반자관계 내실화","status":"추진중 (2017.8 예정)","statuscode":"none","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488642"},{"name":"북핵문제 해결을 위한 한ᆞ중협력 강화, 한ᆞ중 FTA 강화 등을 통한 경제협력 확대, 미세먼지 대응 등 국민체감형 사안 관련 협력 강화","status":"일부 진행중","statusdesc":"한·중·일 환경장관회의, 미세먼지 대응 협력 등 논의 - 중국과는 미세먼지를 비롯한 대기오염 대응 정책·연구·기술 협력강화, 자연환경, 물, 토양 등 환경 전반에 걸친 향후 5년 간(2018~2022년)의 한·중 환경협력계획과 양국간 환경산업·기술 협력에 대해 의견을 나눈다. 일본과는 양국 간 미세먼지(PM2.5) 공동연구 협력에 대해 논의하고, 미국의 파리협정 탈퇴로 그 중요성이 부각되고 있는 기후변화 대응에 대하여 입장을 공유할 계획이다.","statuscode":"partiallywip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841495&pageIndex=9&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"독도 및 역사왜곡에는 단호히 대응하는 등 역사를 직시하면서 한ᆞ일 간 미래지향적 성숙한 협력동반자 관계 발전 - 과거사와 북한 핵ᆞ미사일 대응, 양국 간 실질협력과는 분리 대응","status":"세부계획 미정","statuscode":"none"},{"name":"위안부 문제는 피해자와 국민들이 동의할 수 있는 해결방안 도출","status":"진행중 (위안부 태스크포스 발족)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488248"},{"name":"북핵문제 해결을 위한 전략적 소통 및 한ᆞ러 경제협력 강화를 통해 한ᆞ러 전략적 협력동반자 관계의 실질적 발전 추진 - 정상교류를 포함 고위급 교류 활성화, 극동지역 개발 협력 확대, 북극ᆞ에너지ᆞFTA 등 미래성장동력 확충 등","status":"세부계획 미정","statuscode":"none"}],"keywords":["주변4국","협력외교","한미동맹","대미외교","한미연합방위","한중","북핵","미세먼지","한일","역사왜곡","독도","과거사","위안부","한러","경제협력","극동지역","북극","에너지","FTA"]}]},{"theme":"fta","keys":[{"name":"97: 주변 4국과의 당당한 협력외교 추진","department":["외교부"],"category":["외교","안보/국방","과거사","정치/정부","경제","FTA"],"description":[{"name":"정상 방미 등 활발한 고위급 외교 전개를 통한 한미동맹을 호혜적 책임동맹관계로 지속 심화ᆞ발전","status":"진행중 (한미정상회담 완료, 국방장관회담 추진중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=001&aid=0009445984"},{"name":"미 조야를 대상으로 한 활발한 대미외교 전개로 한미동맹 저변 공고화, 연합방위태세 강화 및 한ᆞ미 간 현안 합리적 해결","status":"세부계획 미정","statuscode":"none"},{"name":"한ᆞ중 양국 정상 및 고위급 간 활발한 교류ᆞ대화, 사드 문제 관련 소통 강화로 신뢰 회복을 통한 실질적 한중 전략적 협력 동반자관계 내실화","status":"추진중 (2017.8 예정)","statuscode":"none","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488642"},{"name":"북핵문제 해결을 위한 한ᆞ중협력 강화, 한ᆞ중 FTA 강화 등을 통한 경제협력 확대, 미세먼지 대응 등 국민체감형 사안 관련 협력 강화","status":"일부 진행중","statusdesc":"한·중·일 환경장관회의, 미세먼지 대응 협력 등 논의 - 중국과는 미세먼지를 비롯한 대기오염 대응 정책·연구·기술 협력강화, 자연환경, 물, 토양 등 환경 전반에 걸친 향후 5년 간(2018~2022년)의 한·중 환경협력계획과 양국간 환경산업·기술 협력에 대해 의견을 나눈다. 일본과는 양국 간 미세먼지(PM2.5) 공동연구 협력에 대해 논의하고, 미국의 파리협정 탈퇴로 그 중요성이 부각되고 있는 기후변화 대응에 대하여 입장을 공유할 계획이다.","statuscode":"partiallywip","statuslink":"http://www.korea.kr/policy/mainView.do?newsId=148841495&pageIndex=9&startDate=2017-08-10&endDate=2017-08-29&repCodeType=&repCode=&srchWord="},{"name":"독도 및 역사왜곡에는 단호히 대응하는 등 역사를 직시하면서 한ᆞ일 간 미래지향적 성숙한 협력동반자 관계 발전 - 과거사와 북한 핵ᆞ미사일 대응, 양국 간 실질협력과는 분리 대응","status":"세부계획 미정","statuscode":"none"},{"name":"위안부 문제는 피해자와 국민들이 동의할 수 있는 해결방안 도출","status":"진행중 (위안부 태스크포스 발족)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=100&oid=056&aid=0010488248"},{"name":"북핵문제 해결을 위한 전략적 소통 및 한ᆞ러 경제협력 강화를 통해 한ᆞ러 전략적 협력동반자 관계의 실질적 발전 추진 - 정상교류를 포함 고위급 교류 활성화, 극동지역 개발 협력 확대, 북극ᆞ에너지ᆞFTA 등 미래성장동력 확충 등","status":"세부계획 미정","statuscode":"none"}],"keywords":["주변4국","협력외교","한미동맹","대미외교","한미연합방위","한중","북핵","미세먼지","한일","역사왜곡","독도","과거사","위안부","한러","경제협력","극동지역","북극","에너지","FTA"]},{"name":"98: 동북아플러스 책임공동체 형성","department":["외교부"],"category":["FTA","경제","외교"],"description":[{"name":"동북아 다자 안보협력 진전을 위해 정부 간 협의회 정례화ᆞ제도화 모색","status":"세부계획 미정","statuscode":"none"},{"name":"한중일 3국 협력 강화를 비롯한 소다자 협력 추진","status":"세부계획 미정","statuscode":"none"},{"name":"MIKTA지속추진ᆞ강화및동아시아내다양한형태의중견국협력시도","status":"세부계획 미정","statuscode":"none"},{"name":"신남방정책 - 아세안의 수요에 기반한 실질 협력 강화(주변 4국 유사 수준)","status":"세부계획 미정","statuscode":"none"},{"name":"인도와의 전략적 공조 강화 및 실질 경제 협력 확대(특별 전략적 동반자관계)","status":"세부계획 미정","statuscode":"none"},{"name":"신북방정책 - 남북러 3각 협력(나진-하산 물류사업, 철도, 전력망 등) 추진기반 마련","status":"세부계획 미정","statuscode":"none"},{"name":"한-EAEU FTA 추진 및 중국 일대일로 구상 참여","status":"진행중 (유라시아경제연합 정부간 협의중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=015&aid=0003753911"}],"keywords":["FTA","신남방정책","신북방정책","동북아","안보협력","소다자협력","아세안","인도","남북러","나진하산물류사업","MIKTA"]},{"name":"100: 보호무역주의 대응 및 전략적 경제협력 강화","department":["산업부"],"category":["경제","외교","FTA"],"description":[{"name":"한미 FTA 상호호혜성을 바탕으로 양국 교역ᆞ투자 발전 - FTA 재협상 등 모든 가능성을 열어놓고 국익 극대화 관점에서 철저 대비","status":"진행중 (재협상 통상교섭본부장 임명)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=422&aid=0000269596"},{"name":"협력채널 재개(통상ᆞ산업ᆞ품질검사 분야 협력채널 조기 개최, 한중 FTA 분야별 이행위원회 개최 등), 협력사업 등을 통해 한중 관계 복원 및 한중 FTA 활용 지속 확대","status":"세부계획 미정","statuscode":"none"},{"name":"RCEP(역내포괄적경제동반자협정) 및 한중일 FTA 적극 참여 등 동아시아 경제통합의 중심역할 수행","status":"진행중 (RCEP 제19차 참석)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=123&oid=298&aid=0000224734"},{"name":"ASEANᆞ인도 등 거대 신흥시장과의 맞춤형 경제 협력을 강화하고, 신규 FTA 협상(남미공동시장(브라질 등 4개국), 유라시아경제연합(러시아 등 5개국), 멕시코 등)을 적극 추진","status":"진행중 (유라시아경제연합 정부간 협의중, 브라질 추진중)","statuscode":"wip","statuslink":"http://news.naver.com/main/read.nhn?mode=LSD&mid=sec&sid1=101&oid=023&aid=0003270032"},{"name":"APEC, WTO 각료회의, ASEM 경제장관회의(’17.9) 등 계기 보호무역 대응 논의를 주도하고, 자유무역 선호국가 간 ‘통상 선진국가 클럽’ 구성 추진","status":"세부계획 미정","statuscode":"none"},{"name":"범정부 통상정책 총괄ᆞ조정 기능 강화, 통상 전문성 제고, 관련 업계 수입규제 대응 원스톱 지원체계 구축 등 추진","status":"세부계획 미정","statuscode":"none"}],"keywords":["FTA","한미","한미FTA","RCEP","역내포괄적경제동반자협정","한중일","아세안","인도","브라질","남미공동시장","유라시아경제연합","러시아","멕시코","APEC","WTO","ASEM경제장관회의","보호무역","통상정책","통상","통상역량"]}]}];return koreagov_policies;}

/***/ }),

/***/ "DuR2":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "GNRu":
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),

/***/ "GXJa":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./": "vGYV",
	"./eastasia": "zDP6",
	"./eastasia.js": "zDP6",
	"./eastasia/korea": "ddWn",
	"./eastasia/korea.js": "ddWn",
	"./eastasia/korea_data": "Axhg",
	"./eastasia/korea_data.js": "Axhg",
	"./index": "vGYV",
	"./index.js": "vGYV",
	"./presidenttrump": "n3Zi",
	"./presidenttrump.js": "n3Zi",
	"./presidenttrump_data": "pvi3",
	"./presidenttrump_data.js": "pvi3",
	"./today": "gf2C",
	"./today.js": "gf2C"
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "GXJa";

/***/ }),

/***/ "M4fF":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.4';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("DuR2"), __webpack_require__("3IRH")(module)))

/***/ }),

/***/ "ddWn":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _templateObject = _taggedTemplateLiteral(['\n    <div class="ea-korea-hero">\n        <div class="ea-korea-herotext">\n            <p class="hero1">"\uAD6D\uBBFC\uC758 \uB098\uB77C, \uC815\uC758\uB85C\uC6B4 \uB300\uD55C\uBBFC\uAD6D"</p>\n            <p class="hero1">\uBB38\uC7AC\uC778\uC815\uBD80 \uAD6D\uC815\uACFC\uC81C \uD0D0\uC0AC</p>\n            <div class="hero2">\n                <p>\uC774\uAC83\uC740 \uCD1B\uBD88\uB85C \uC774\uB904\uB0B8 \uBBFC\uC8FC\uC8FC\uC758, \uADF8\uB9AC\uACE0 \uB300\uD55C\uBBFC\uAD6D\uC758 \uBBF8\uB798\uC5D0 \uB300\uD55C \uBAA8\uB4E0 \uAC83\uC785\uB2C8\uB2E4.</p>\n                <p>\uBB38\uC7AC\uC778\uC815\uBD80\uC758 100\uB300 \uAD6D\uC815\uACFC\uC81C \uC774\uD589 \uACFC\uC815\uC744 \uC601\uC5ED \uBCC4\uB85C \uCD94\uC801\uD574\uBCF4\uBA70 \uB2E4\uD568\uAED8 \uACE0\uBBFC\uD574\uBD05\uC2DC\uB2E4.</p>\n            </div>\n        </div>\n    </div>\n    <div class="ea-korea-policydata">\n        <div class="ea-korea-policykeywords">\n            <div class="keywords-guide">\n                <span>\uAD6D\uC815 \uACFC\uC81C \uC18D &nbsp;</span>\n                <span>\uD0A4\uC6CC\uB4DC</span>\n                <span class="help">\uD0A4\uC6CC\uB4DC\uB97C \uB204\uB974\uBA74 \uC5F0\uAD00 \uACFC\uC81C\uB9CC \uBCFC \uC218 \uC788\uC2B5\uB2C8\uB2E4</span>\n            </div>\n\n            <div class="keywords-container">\n            </div>\n        </div>\n        <div class="ea-korea-policylist">\n        </div>\n    </div>\n    '], ['\n    <div class="ea-korea-hero">\n        <div class="ea-korea-herotext">\n            <p class="hero1">"\uAD6D\uBBFC\uC758 \uB098\uB77C, \uC815\uC758\uB85C\uC6B4 \uB300\uD55C\uBBFC\uAD6D"</p>\n            <p class="hero1">\uBB38\uC7AC\uC778\uC815\uBD80 \uAD6D\uC815\uACFC\uC81C \uD0D0\uC0AC</p>\n            <div class="hero2">\n                <p>\uC774\uAC83\uC740 \uCD1B\uBD88\uB85C \uC774\uB904\uB0B8 \uBBFC\uC8FC\uC8FC\uC758, \uADF8\uB9AC\uACE0 \uB300\uD55C\uBBFC\uAD6D\uC758 \uBBF8\uB798\uC5D0 \uB300\uD55C \uBAA8\uB4E0 \uAC83\uC785\uB2C8\uB2E4.</p>\n                <p>\uBB38\uC7AC\uC778\uC815\uBD80\uC758 100\uB300 \uAD6D\uC815\uACFC\uC81C \uC774\uD589 \uACFC\uC815\uC744 \uC601\uC5ED \uBCC4\uB85C \uCD94\uC801\uD574\uBCF4\uBA70 \uB2E4\uD568\uAED8 \uACE0\uBBFC\uD574\uBD05\uC2DC\uB2E4.</p>\n            </div>\n        </div>\n    </div>\n    <div class="ea-korea-policydata">\n        <div class="ea-korea-policykeywords">\n            <div class="keywords-guide">\n                <span>\uAD6D\uC815 \uACFC\uC81C \uC18D &nbsp;</span>\n                <span>\uD0A4\uC6CC\uB4DC</span>\n                <span class="help">\uD0A4\uC6CC\uB4DC\uB97C \uB204\uB974\uBA74 \uC5F0\uAD00 \uACFC\uC81C\uB9CC \uBCFC \uC218 \uC788\uC2B5\uB2C8\uB2E4</span>\n            </div>\n\n            <div class="keywords-container">\n            </div>\n        </div>\n        <div class="ea-korea-policylist">\n        </div>\n    </div>\n    ']),
    _templateObject2 = _taggedTemplateLiteral(['\n        <div id="policygroup">\n            ', '\n        </div>\n        '], ['\n        <div id="policygroup">\n            ', '\n        </div>\n        ']),
    _templateObject3 = _taggedTemplateLiteral(['\n                <div class="policy-container">\n                    <p class="policyname"><strong class="bolder">', '</strong></p>\n                    <div class="policy-strategycontainer" banana-status="unfolded">\n                        <div class="strategy">\n                        ', '\n                        </div>\n                    </div>\n                </div>\n            '], ['\n                <div class="policy-container">\n                    <p class="policyname"><strong class="bolder">', '</strong></p>\n                    <div class="policy-strategycontainer" banana-status="unfolded">\n                        <div class="strategy">\n                        ', '\n                        </div>\n                    </div>\n                </div>\n            ']),
    _templateObject4 = _taggedTemplateLiteral(['\n                            <div class="task" banana-taskdata="', '" banana-taskcategory="', '">\n                                <div class="taskinfo">\n                                    <p class="taskname"><strong class="bolder">', '</strong></p>\n                                    <div class="departmentinfo">\n                                    ', '\n                                    </div>\n                                </div>\n\n                                <div class="taskstatus" banana-taskstatus="', '">\n                                    <div class="taskstatusbar"></div>\n                                    <p>', '%</p>\n                                </div>\n\n                                <ul class="descriptions">\n                                ', '\n                                </ul>\n                            </div>\n                        '], ['\n                            <div class="task" banana-taskdata="', '" banana-taskcategory="', '">\n                                <div class="taskinfo">\n                                    <p class="taskname"><strong class="bolder">', '</strong></p>\n                                    <div class="departmentinfo">\n                                    ', '\n                                    </div>\n                                </div>\n\n                                <div class="taskstatus" banana-taskstatus="', '">\n                                    <div class="taskstatusbar"></div>\n                                    <p>', '%</p>\n                                </div>\n\n                                <ul class="descriptions">\n                                ', '\n                                </ul>\n                            </div>\n                        ']),
    _templateObject5 = _taggedTemplateLiteral(['\n                                        <p class="departmentname">', '</p>\n                                    '], ['\n                                        <p class="departmentname">', '</p>\n                                    ']),
    _templateObject6 = _taggedTemplateLiteral(['    \n                                    <li class="description">\n                                        ', '\n                                        <p class="descriptiontext" banana-taskdesc="', '">', '</p>\n                                        <p class="descriptionstatus bolder" banana-taskcode="', '">', '</p>\n                                    </li>\n                                '], ['    \n                                    <li class="description">\n                                        ', '\n                                        <p class="descriptiontext" banana-taskdesc="', '">', '</p>\n                                        <p class="descriptionstatus bolder" banana-taskcode="', '">', '</p>\n                                    </li>\n                                ']),
    _templateObject7 = _taggedTemplateLiteral(['\n                                        <div class="description-action-link" banana-link="', '">\n                                            <p>&#xf0a9;</p>\n                                        </div>\n                                        '], ['\n                                        <div class="description-action-link" banana-link="', '">\n                                            <p>&#xf0a9;</p>\n                                        </div>\n                                        ']);

exports.init_render = init_render;

var _litHtml = __webpack_require__("v2F8");

var _lodash = __webpack_require__("M4fF");

var _lodash2 = _interopRequireDefault(_lodash);

var _korea = __webpack_require__("GNRu");

var _korea2 = _interopRequireDefault(_korea);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function init_render() {
    var hero_markup = function hero_markup() {
        return (0, _litHtml.html)(_templateObject);
    };

    (0, _litHtml.render)(hero_markup(), document.querySelector('.minion-contents'));
    document.querySelector('.minion-timestamp .ts-date').innerHTML = '1월 20일 마지막 업데이트됨';
    render_data();
    //attach_events();
}

var render_data = function render_data() {
    var policy_data = null;
    new Promise(function (resolve) {
        new Promise(function(resolve) { resolve(); }).then((function (require) {
            resolve(__webpack_require__("Axhg"));
        }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
    }).then(function (module) {
        policy_data = module.data_init();

        var policy_markup = function policy_markup() {
            return (0, _litHtml.html)(_templateObject2, policy_data.map(function (i) {
                return (0, _litHtml.html)(_templateObject3, i.theme, i.keys.map(function (tk) {
                    return (0, _litHtml.html)(_templateObject4, JSON.stringify(tk.keywords), JSON.stringify(tk.category), tk.name, tk.department.map(function (dpt) {
                        return (0, _litHtml.html)(_templateObject5, dpt);
                    }), tk.status, tk.status, tk.description.map(function (desc) {
                        return (0, _litHtml.html)(_templateObject6, desc.statuslink ? (0, _litHtml.html)(_templateObject7, desc.statuslink) : '', desc.statusdesc, desc.name, desc.statuscode, desc.status);
                    }));
                }));
            }));
        };

        (0, _litHtml.render)(policy_markup(), document.querySelector('.ea-korea-policylist'));

        Array.prototype.forEach.call(document.querySelectorAll('.ea-korea-policylist .task'), function (el, index, array) {
            var thisobj = el;
            var substatuses = [];
            var totalsubtasks_counts = el.querySelectorAll('.descriptionstatus').length;
            var totalsubtasks_progress = 100 * totalsubtasks_counts;

            Array.prototype.forEach.call(el.querySelectorAll('.descriptionstatus'), function (dsel, index, array) {
                var code = dsel.getAttribute('banana-taskcode');
                var convertedcode = 0;
                switch (code) {
                    case 'none':
                        convertedcode = 0;
                        break;
                    case 'await':
                        convertedcode = 10;
                        break;
                    case 'discussing':
                        convertedcode = 15;
                        break;
                    case 'congress':
                        convertedcode = 65;
                        break;
                    case 'wip':
                        convertedcode = 55;
                        break;
                    case 'partiallywip':
                        convertedcode = 45;
                        break;
                    case 'question':
                        convertedcode = 30;
                        break;
                    case 'done':
                        convertedcode = 100;
                        break;
                }

                substatuses.push(convertedcode);
            });

            var totalsubtasks_sum = substatuses.reduce(function (a, b) {
                return parseInt(a, 10) + parseInt(b, 10);
            });

            var subtasksum_list = [];
            subtasksum_list.push(totalsubtasks_sum);
            subtasksum_list.push(totalsubtasks_progress);

            var subtasksum_list_max = Math.max(subtasksum_list);
            Array.prototype.toPercentage = function () {
                var arr = this;
                return arr.map(function (d, i) {
                    return 100 * d / arr.reduce(function (a, b) {
                        return a + b;
                    }, 0) | 0;
                });
            };
            var subtasksum_list_scale = subtasksum_list.toPercentage();

            el.querySelector('.taskstatus').getAttribute('banana-taskstatus', subtasksum_list_scale[0]);
            el.querySelector('.taskstatus').querySelector('p').textContent = Math.round(subtasksum_list_scale[0] * 1000) / 1000 + '%';
            el.querySelector('.taskstatusbar').style.width = subtasksum_list_scale[0] + '%';
        });
    });
};

var attach_events = function attach_events() {
    var pl_cats = document.querySelectorAll('.policylist-categories .category');
    for (var i = 0; i < pl_cats.length; i++) {
        pl_cats[i].addEventListener('click', function (e) {
            document.querySelector('.ea-korea-policylist').setAttribute('banana-status', '');
            Array.prototype.forEach.call(document.querySelectorAll('.ea-korea-policylist .task'), function (el, index, array) {
                el.setAttribute('banana-status', '');
            });

            if (e.target.parentNode.getAttribute('banana-status') == 'highlighted') {
                Array.prototype.forEach.call(document.querySelectorAll('.ea-korea-policykeywords .keyword'), function (el, index, array) {
                    el.setAttribute('banana-status', '');
                });
            } else {

                Array.prototype.forEach.call(document.querySelectorAll('.ea-korea-policykeywords .keyword'), function (el, index, array) {
                    el.setAttribute('banana-status', '');
                });

                var el = e.target.parentNode;
                var key = el.querySelector('strong').innerHTML;
                var keymatch = '정치/정부';
                switch (key) {
                    case '정치/정부':
                        keymatch = 'polgov';
                        break;
                    case '과거사':
                        keymatch = 'pasthis';
                        break;
                    case '언론':
                        keymatch = 'press';
                        break;
                    case '인권':
                        keymatch = 'humanrights';
                        break;
                    case '개헌':
                        keymatch = 'constitution';
                        break;
                    case '외교':
                        keymatch = 'diplo';
                        break;
                    case '복지':
                        keymatch = 'welfare';
                        break;
                    case '일자리':
                        keymatch = 'jobs';
                        break;
                    case '생활':
                        keymatch = 'life';
                        break;
                    case '경제':
                        keymatch = 'economics';
                        break;
                    case '청년':
                        keymatch = 'younggen';
                        break;
                    case '노인':
                        keymatch = 'elder';
                        break;
                    case '주택/부동산':
                        keymatch = 'housing';
                        break;
                    case '통신':
                        keymatch = 'telecom';
                        break;
                    case '교통':
                        keymatch = 'transport';
                        break;
                    case '4차산업혁명':
                        keymatch = 'fourthindustrev';
                        break;
                    case '과학':
                        keymatch = 'science';
                        break;
                    case '북한':
                        keymatch = 'nk';
                        break;
                    case '여성':
                        keymatch = 'women';
                        break;
                    case '환경/안전':
                        keymatch = 'environ';
                        break;
                    case '아동':
                        keymatch = 'child';
                        break;
                    case '보육':
                        keymatch = 'childcare';
                        break;
                    case '교육':
                        keymatch = 'education';
                        break;
                    case '농산어촌':
                        keymatch = 'agriculture';
                        break;
                    case '노동':
                        keymatch = 'labor';
                        break;
                    case '문화':
                        keymatch = 'culture';
                        break;
                    case '관광':
                        keymatch = 'travel';
                        break;
                    case '해양':
                        keymatch = 'maritime';
                        break;
                    case '안보/국방':
                        keymatch = 'defense';
                        break;
                    case 'FTA':
                        keymatch = 'fta';
                        break;
                }

                Array.prototype.forEach.call(document.querySelectorAll('.ea-korea-policylist .task'), function (el, index, array) {
                    if (el.getAttribute('banana-taskcategory').indexOf(key) != -1) {
                        el.setAttribute('banana-status', 'highlighted');
                    }
                });

                var selected = [];
                _lodash2.default.filter(policylist, function (p) {
                    var subkeywords = [];
                    _lodash2.default.filter(p.strategies, function (s) {
                        _lodash2.default.filter(s.task, function (t) {
                            if (_lodash2.default.includes(t.category, key)) {
                                selected.push(t);
                            }
                        });
                    });
                });
                console.log(JSON.stringify(selected));
                e.target.parentNode.setAttribute('banana-status', 'highlighted');
                document.querySelector('.ea-korea-policylist').setAttribute('banana-status', 'highlighted');
            }
        });
    }
};

var getClosest = function getClosest(elem, selector) {
    // Element.matches() polyfill
    if (!Element.prototype.matches) {
        Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {
            var matches = (this.document || this.ownerDocument).querySelectorAll(s),
                i = matches.length;
            while (--i >= 0 && matches.item(i) !== this) {}
            return i > -1;
        };
    }

    // Get closest match
    for (; elem && elem !== document; elem = elem.parentNode) {
        if (elem.matches(selector)) return elem;
    }

    return null;
};

/***/ }),

/***/ "gf2C":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _templateObject = _taggedTemplateLiteral(['\n    <div class="today-clusters">\n        <div class="hero-texts">\n            <p class="topic-counts">Three topics</p>\n            <p>today</p>\n        </div>\n        <div class="clusters-list">\n        </div>\n    </div>\n    '], ['\n    <div class="today-clusters">\n        <div class="hero-texts">\n            <p class="topic-counts">Three topics</p>\n            <p>today</p>\n        </div>\n        <div class="clusters-list">\n        </div>\n    </div>\n    ']);

exports.init_render = init_render;

var _litHtml = __webpack_require__("v2F8");

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function init_render() {
    document.querySelector('.navbox-currentpath').textContent = 'Today';
    document.querySelector('.navbox-sections li[data-sectionid="nav-section-today"]').remove();

    var today_hero_markup = function today_hero_markup() {
        return (0, _litHtml.html)(_templateObject);
    };

    (0, _litHtml.render)(today_hero_markup(), document.querySelector('.minion-contents'));
}

/***/ }),

/***/ "n3Zi":
/***/ (function(module, exports) {

throw new Error("Module build failed: SyntaxError: Unexpected token, expected , (88:12)\n\n\u001b[0m \u001b[90m 86 | \u001b[39m\u001b[32m                display: false\u001b[39m\n \u001b[90m 87 | \u001b[39m\u001b[32m            }\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 88 | \u001b[39m\u001b[32m            scales: {\u001b[39m\n \u001b[90m    | \u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 89 | \u001b[39m\u001b[32m                yAxes: [{\u001b[39m\n \u001b[90m 90 | \u001b[39m\u001b[32m                    ticks: {\u001b[39m\n \u001b[90m 91 | \u001b[39m\u001b[32m                        beginAtZero:true\u001b[39m\u001b[0m\n");

/***/ }),

/***/ "pvi3":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.data_init = data_init;
function data_init() {
    var trump_result = [{
        "list": [1, 3, 14, 6, 5, 9, 33, 21, 3, 20, 14],
        "months": ["2017-02", "2017-03", "2017-04", "2017-05", "2017-06", "2017-07", "2017-08", "2017-09", "2017-10", "2017-11", "2017-12"],
        "peaks": ["2017-04", "2017-08", "2017-11"],
        "theme": ["North Korea", "Launches Missile", "Trump Tillerson Says", "South Korean", "nuclear Test", "Sanctions", "Japan", "new"],
        "toparticles": [[], [], [], [], [], [], [{
            "_id": "59f863209b21b3526e643f3a",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/08/RTS1B586-1024x553.jpg",
            "origin": "newshour",
            "title": "5 things you likely didn\u2019t know about Guam",
            "ts": 1502410800,
            "twitterid": "895801942131089408",
            "url": "http://to.pbs.org/2fwgFNa"
        }, {
            "_id": "59f863559b21b3529e578da1",
            "date_month": "2017-08",
            "image": "https://media.npr.org/assets/img/2017/08/06/ap_17218060733068_wide-2481bcd31cf551bf1ea184b37f471ef5bb76920f.jpg?s=1400",
            "origin": "npr",
            "title": "Japan Calls For Denuclearized World On 72nd Anniversary Of Hiroshima",
            "ts": 1502029920,
            "twitterid": "894204448548864001",
            "url": "http://n.pr/2hzAcwU"
        }, {
            "_id": "59f863209b21b3526e643f66",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTS15ACG-1024x683.jpg",
            "origin": "newshour",
            "title": "Report claims North Korea obtained rocket engines from a Ukrainian factory",
            "ts": 1502769600,
            "twitterid": "897306860000223232",
            "url": "http://to.pbs.org/2fHifMp"
        }, {
            "_id": "59f863209b21b3526e643eeb",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/kimjongun-1024x683.jpg",
            "origin": "newshour",
            "title": "Welcome boost from China to global pressure on North Korea",
            "ts": 1502029800,
            "twitterid": "894203913288556544",
            "url": "http://to.pbs.org/2v9ofTp"
        }, {
            "_id": "59f863559b21b3529e578f55",
            "date_month": "2017-08",
            "image": "https://media.npr.org/assets/img/2017/08/26/ap_17238073160730_wide-06ca53ef708d45bc402776f496c884c66d48c483.jpg?s=1400",
            "origin": "npr",
            "title": "'Restraint' Appears To Be Over As North Korea Launches Missile Test Again",
            "ts": 1503766440,
            "twitterid": "901487923488583680",
            "url": "http://n.pr/2wQArtu"
        }], [{
            "_id": "59f863559b21b3529e578ff6",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/04/14/kim-jong-un_wide-77b12cf6be0dda09f504771a59ab34d99bab62bb.jpg?s=1400",
            "origin": "npr",
            "title": "North Korea Claims Successful Hydrogen Bomb Test",
            "ts": 1504414920,
            "twitterid": "904208058405969920",
            "url": "http://n.pr/2vBMGKW"
        }, {
            "_id": "59f863559b21b3529e57912e",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/09/18/ap_17108376007295_wide-9fb4f9a99147e0eb5f1c8e230d93e84b43a8eb35.jpg?s=1400",
            "origin": "npr",
            "title": "Fuel Shortages And The North Korean Economy, Explained",
            "ts": 1505752860,
            "twitterid": "909819560735502343",
            "url": "http://n.pr/2x9ksXK"
        }, {
            "_id": "59f863209b21b3526e644060",
            "date_month": "2017-09",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/09/RTX3EI2X-1024x683.jpg",
            "origin": "newshour",
            "title": "Trump raises stakes in escalating North Korean nuclear crisis",
            "ts": 1504445640,
            "twitterid": "904336848604078081",
            "url": "http://to.pbs.org/2ezLTmj"
        }, {
            "_id": "59f863559b21b3529e578ff5",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/09/02/gettyimages-842003638_wide-fb6560af4ccfa405a9e4f7cf44435b81bd3da46c.jpg?s=1400",
            "origin": "npr",
            "title": "North Korea Brandishes What It Says Is A Missile-Ready H-Bomb",
            "ts": 1504412640,
            "twitterid": "904198455710564352",
            "url": "http://n.pr/2vBlVGo"
        }, {
            "_id": "59f863559b21b3529e5791af",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/09/23/ap_17266382338030-north-korea-quake_wide-5de063f8f69951ba79f5e61c89bb884a5f768bdf.jpg?s=1400",
            "origin": "npr",
            "title": "Earthquake In North Korea Sets Off Alarm And Speculation",
            "ts": 1506188820,
            "twitterid": "911648124745113605",
            "url": "http://n.pr/2fJ7WVh"
        }], [], [{
            "_id": "5a209bc1421aa9585aab69a6",
            "date_month": "2017-11",
            "image": "https://media.npr.org/assets/img/2017/11/30/nk-2_wide-cbb55ea26deeea5fcc63c623e88750c774590d4d.jpg?s=1400",
            "origin": "NPR",
            "title": "New North Korean Missile Is A 'Monster'",
            "ts": 1512069247,
            "twitterid": 936312401464406016,
            "url": "https://www.npr.org/sections/thetwo-way/2017/11/30/567468685/new-north-korean-missile-is-a-monster?utm_source=dlvr.it&utm_medium=twitter"
        }, {
            "_id": "5a14be35421aa936db773ada",
            "date_month": "2017-11",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/10/japan-1024x695.jpg",
            "origin": "PBS NewsHour",
            "title": "Trump administration announces sanctions against North Korea",
            "ts": 1511276402,
            "twitterid": 932986971726729216,
            "url": "https://www.pbs.org/newshour/politics/trump-administration-announces-sanctions-against-north-korea"
        }, {
            "_id": "5a1df8c2421aa915280899d6",
            "date_month": "2017-11",
            "image": "https://media.npr.org/include/images/facebook-default-wide.jpg?s=1400",
            "origin": "NPR",
            "title": "North Korea Fires Apparent ICBM In First Missile Test In 2 1/2 Months",
            "ts": 1511898248,
            "twitterid": 935595182585606144,
            "url": "https://www.npr.org/sections/thetwo-way/2017/11/28/566994979/north-korea-apparently-fires-another-missile-after-2-1-2-month-break-between-tes?utm_source=dlvr.it&utm_medium=twitter"
        }, {
            "_id": "5a1df8c2421aa915280899c5",
            "date_month": "2017-11",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/11/RTS44KN-1024x575.jpg",
            "origin": "PBS NewsHour",
            "title": "Could the U.S. actually shoot down a North Korean missile?",
            "ts": 1511911679,
            "twitterid": 935651514479206400,
            "url": "https://www.pbs.org/newshour/world/could-the-u-s-actually-shoot-down-a-north-korean-missile"
        }, {
            "_id": "5a1df8c2421aa915280899d5",
            "date_month": "2017-11",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/08/RTX3DWPF-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "North Korea just fired its first missile in more than 2 months. Here\u2019s what we know",
            "ts": 1511899555,
            "twitterid": 935600663043739648,
            "url": "https://www.pbs.org/newshour/world/north-korea-just-fired-its-first-missile-in-more-than-2-months-heres-what-we-know"
        }], []]
    }, {
        "list": [7, 26, 70, 24, 56, 65, 85, 25, 46, 24, 26, 76],
        "months": ["2017-01", "2017-02", "2017-03", "2017-04", "2017-05", "2017-06", "2017-07", "2017-08", "2017-09", "2017-10", "2017-11", "2017-12"],
        "peaks": ["2017-03", "2017-07"],
        "theme": ["Health care", "GOP", "tax Cut", "Trump", "Senate plan", "Republicans", "Obamacare Repeal", "Insurance", "House", "Medicaid"],
        "toparticles": [[], [{
            "_id": "59f863209b21b3526e64364c",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/docs-1024x683.jpg",
            "origin": "newshour",
            "title": "House GOP documents outline plan to replace Obamacare",
            "ts": 1487298600,
            "twitterid": "832416845399461889",
            "url": "http://to.pbs.org/2kvUmJ9"
        }, {
            "_id": "59f863209b21b3526e64369e",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/RTS106MV-1024x639.jpg",
            "origin": "newshour",
            "title": "AP fact check: Trump claims Affordable Care Act covered \u2018very few\u2019 people",
            "ts": 1487962800,
            "twitterid": "835202652472545280",
            "url": "http://to.pbs.org/2l87gIA"
        }, {
            "_id": "59f863209b21b3526e6435f0",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/01/RTSX53O-1024x676.jpg",
            "origin": "newshour",
            "title": "HHS pick Tom Price made \u2018brazen\u2019 stock trades while his committee was under scrutiny",
            "ts": 1486586400,
            "twitterid": "829429599482306560",
            "url": "http://to.pbs.org/2kmEy7s"
        }, {
            "_id": "59f863209b21b3526e643655",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/mcconnell-1024x683.jpg",
            "origin": "newshour",
            "title": "McConnell intends to replace \u2018Obamacare\u2019 without Democrats",
            "ts": 1487361960,
            "twitterid": "832682661172957184",
            "url": "http://to.pbs.org/2kxETID"
        }, {
            "_id": "59f863559b21b3529e578062",
            "date_month": "2017-02",
            "image": "https://media.npr.org/assets/img/2017/02/27/ap_16316622428721_wide-a95da522ca567f16a356d13013e8a30b9d096fb2.jpg?s=1400",
            "origin": "npr",
            "title": "A Carbon Tax Gains Traction Among Some Conservatives",
            "ts": 1488292200,
            "twitterid": "836584256226930688",
            "url": "http://n.pr/2lScoml"
        }], [{
            "_id": "59f863209b21b3526e643778",
            "date_month": "2017-03",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/03/RTX30V8Q-1024x683.jpg",
            "origin": "newshour",
            "title": "Beyond the top-line numbers, what else was in CBO\u2019s report on new health care bill?",
            "ts": 1489600080,
            "twitterid": "842069901963608068",
            "url": "http://to.pbs.org/2nFq3g8"
        }, {
            "_id": "59f863209b21b3526e6437ce",
            "date_month": "2017-03",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/03/GettyImages-656937656-1024x683.jpg",
            "origin": "newshour",
            "title": "In stinging setback for Trump and Ryan, House GOP leaders delay vote on health care repeal bill",
            "ts": 1490298720,
            "twitterid": "845000284023721984",
            "url": "http://to.pbs.org/2oa9I3u"
        }, {
            "_id": "59f863209b21b3526e64382d",
            "date_month": "2017-03",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/03/RTX30LSP-1-1024x683.jpg",
            "origin": "newshour",
            "title": "Pence casts decisive vote for bill that lets states block some Planned Parenthood money",
            "ts": 1490906880,
            "twitterid": "847551002370875392",
            "url": "http://to.pbs.org/2nPLCOv"
        }, {
            "_id": "59f863559b21b3529e578162",
            "date_month": "2017-03",
            "image": "https://media.npr.org/assets/img/2017/03/15/2017-03-15-nancy-pelosi-mcarrasquero-040_wide-6906e75ff78b39c53420d4615dafbaa68389e7d1.jpg?s=1400",
            "origin": "npr",
            "title": "Pelosi Says Democrats Have A Responsibility To Look For Common Ground On Health Law",
            "ts": 1489619400,
            "twitterid": "842150921719152640",
            "url": "http://n.pr/2mui58x"
        }, {
            "_id": "59f863559b21b3529e5781fb",
            "date_month": "2017-03",
            "image": "https://media.npr.org/assets/img/2017/03/21/ap_17080501282778_wide-99ec360c5a828d6b5874ffbc6dbbcc1b3d5750a0.jpg?s=1400",
            "origin": "npr",
            "title": "Trump Says Republicans Will Lose In 2018 If They Don't Support GOP Health Care Bill",
            "ts": 1490122080,
            "twitterid": "844259315452030976",
            "url": "http://n.pr/2o1swlf"
        }], [{
            "_id": "59f863559b21b3529e5784c9",
            "date_month": "2017-04",
            "image": "https://media.npr.org/assets/img/2017/04/19/veteran-care-1_wide-ff927884ae7878617aeabc3239b700e2b1882485.jpg?s=1400",
            "origin": "npr",
            "title": "Many Veterans Gained Health Care Through The Affordable Care Act",
            "ts": 1492646760,
            "twitterid": "854848808999686148",
            "url": "http://n.pr/2oMSzjl"
        }, {
            "_id": "59f863559b21b3529e578538",
            "date_month": "2017-04",
            "image": "https://media.npr.org/assets/img/2017/04/19/pre-hospice-8_wide-1e7f3916abc70f0b846354cf591961e21cfdad3b.jpg?s=1400",
            "origin": "npr",
            "title": "For Some, Pre-Hospice Care Can Be A Good Alternative To Hospitals",
            "ts": 1493379900,
            "twitterid": "857923605174374400",
            "url": "http://n.pr/2qe3UYv"
        }, {
            "_id": "59f863209b21b3526e64387c",
            "date_month": "2017-04",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/04/RTX32FYX-1024x683.jpg",
            "origin": "newshour",
            "title": "Most young people say government should pay for health care, poll finds",
            "ts": 1491484800,
            "twitterid": "849974979726856192",
            "url": "http://to.pbs.org/2oFzkpL"
        }, {
            "_id": "59f863209b21b3526e6438af",
            "date_month": "2017-04",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/04/paulryan-1024x683.jpg",
            "origin": "newshour",
            "title": "The health care debate has shifted to the GOP \u2014 and most people don\u2019t like what they see, poll says",
            "ts": 1491915600,
            "twitterid": "851781895549587457",
            "url": "http://to.pbs.org/2oZrsQc"
        }, {
            "_id": "59f863559b21b3529e578430",
            "date_month": "2017-04",
            "image": "https://media.npr.org/assets/img/2017/04/12/instability_wide-f9ea3c8007359f12d992803ac6270382ec472976.jpg?s=1400",
            "origin": "npr",
            "title": "Get Set For Trump Revisions To Your Affordable Care Act Insurance",
            "ts": 1492080960,
            "twitterid": "852475659616235520",
            "url": "http://n.pr/2pbWPqG"
        }], [{
            "_id": "59f863209b21b3526e6439e8",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/trumpaustralia-1024x683.jpg",
            "origin": "newshour",
            "title": "Trump: \u2018Australians have better health care than we do\u2019",
            "ts": 1494029700,
            "twitterid": "860649059547086849",
            "url": "http://to.pbs.org/2pj61th"
        }, {
            "_id": "59f863209b21b3526e643a6f",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/mcconnell-1-1024x683.jpg",
            "origin": "newshour",
            "title": "Trump\u2019s legislative agenda slows to crawl in Congress",
            "ts": 1494976500,
            "twitterid": "864620227098574852",
            "url": "http://to.pbs.org/2pU01Xl"
        }, {
            "_id": "59f863209b21b3526e643ac8",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTX377IK-1024x671.jpg",
            "origin": "newshour",
            "title": "Who are the winners and losers in Trump\u2019s budget proposal?",
            "ts": 1495567200,
            "twitterid": "867098029794500608",
            "url": "http://to.pbs.org/2recES4"
        }, {
            "_id": "59f863559b21b3529e5786ef",
            "date_month": "2017-05",
            "image": "https://media.npr.org/assets/img/2017/05/22/hbarczyk_npr_trumpandeducation_finalart_wide-7f021a303b907f60dfafc139a4bfe9e3519da6da.jpeg?s=1400",
            "origin": "npr",
            "title": "President Trump's Budget Proposal Calls For Deep Cuts To Education",
            "ts": 1495503600,
            "twitterid": "866831060381954048",
            "url": "http://n.pr/2rvaWvl"
        }, {
            "_id": "59f863209b21b3526e643ad9",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2015/01/costs-1024x682.jpg",
            "origin": "newshour",
            "title": "How Trump\u2019s proposed budget could affect the health care safety net",
            "ts": 1495647900,
            "twitterid": "867436285589417984",
            "url": "http://to.pbs.org/2qQ6eqX"
        }], [{
            "_id": "59f863209b21b3526e643bfa",
            "date_month": "2017-06",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/06/AdobeStock_114044590-1024x756.jpeg",
            "origin": "newshour",
            "title": "What\u2019s at stake for children\u2019s health care?",
            "ts": 1497399600,
            "twitterid": "874783445720813568",
            "url": "http://to.pbs.org/2rojaGt"
        }, {
            "_id": "59f863209b21b3526e643cae",
            "date_month": "2017-06",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/06/Davis1-e1498521636112-1024x565.jpg",
            "origin": "newshour",
            "title": "Conservatives are targeting the wrong things to bring down health care costs, says hospital system CEO",
            "ts": 1498532400,
            "twitterid": "879534752503480320",
            "url": "http://to.pbs.org/2tcZUey"
        }, {
            "_id": "59f863559b21b3529e5787e1",
            "date_month": "2017-06",
            "image": "https://media.npr.org/assets/img/2017/06/02/ap_17143711235889_wide-ec5c74f20bc15ef24d41cc66d88dda23a7da9ae1.jpg?s=1400",
            "origin": "npr",
            "title": "The Senate's 4 Big Problems With Health Care",
            "ts": 1496664180,
            "twitterid": "871698870886998016",
            "url": "http://n.pr/2rK6NDx"
        }, {
            "_id": "59f863559b21b3529e57897b",
            "date_month": "2017-06",
            "image": "https://media.npr.org/assets/img/2017/06/22/ap_17173571395884_wide-0451957ff0b77916bcd2654ad81258cb7bd396fc.jpg?s=1400",
            "origin": "npr",
            "title": "CHART: Who Wins, Who Loses With Senate Health Care Bill",
            "ts": 1498163820,
            "twitterid": "877988815960276992",
            "url": "http://n.pr/2tTqjLt"
        }, {
            "_id": "59f863559b21b3529e5789dd",
            "date_month": "2017-06",
            "image": "https://media.npr.org/assets/img/2017/06/27/promo-healthcare-seamus3_wide-994c409e2638bb7b2969b59d17b463fc52b78036.png?s=1400",
            "origin": "npr",
            "title": "CHART: CBO Weighs Who Wins, Who Loses With Senate Health Care Bill",
            "ts": 1498568220,
            "twitterid": "879685026333556736",
            "url": "http://n.pr/2tfJzpB"
        }], [{
            "_id": "59f863209b21b3526e643e0f",
            "date_month": "2017-07",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/06/RTS17W6B-1024x683.jpg",
            "origin": "newshour",
            "title": "Trump says GOP health care push is \u2018last chance\u2019",
            "ts": 1500909300,
            "twitterid": "889504195476414466",
            "url": "http://to.pbs.org/2vSNyqk"
        }, {
            "_id": "59f863559b21b3529e578c71",
            "date_month": "2017-07",
            "image": "https://media.npr.org/assets/img/2017/07/24/gettyimages-511823665_wide-a14c1ee0ba696aee9347cbe2a56660653f820068.jpg?s=1400",
            "origin": "npr",
            "title": "The Senate Health Care Vote, Simplified",
            "ts": 1500932940,
            "twitterid": "889603347711500294",
            "url": "http://n.pr/2eJ8qwK"
        }, {
            "_id": "59f863559b21b3529e578c87",
            "date_month": "2017-07",
            "image": "https://media.npr.org/assets/img/2017/07/25/gettyimages-822308366_wide-451b84fda57b81c920e48de8f0359d6981f2592a.jpg?s=1400",
            "origin": "npr",
            "title": "Senators Vote To Proceed With Health Care Debate",
            "ts": 1501010580,
            "twitterid": "889929038432698368",
            "url": "http://n.pr/2eLmo1b"
        }, {
            "_id": "59f863559b21b3529e578cac",
            "date_month": "2017-07",
            "image": "https://media.npr.org/assets/img/2017/07/26/gettyimages-823004562_wide-d90f54efedcf02db243f909d4810ed23388ab1c2.jpg?s=1400",
            "origin": "npr",
            "title": "What's Next In The Health Care Debate?",
            "ts": 1501152900,
            "twitterid": "890526008062996480",
            "url": "http://n.pr/2h4Jeld"
        }, {
            "_id": "59f863209b21b3526e643e77",
            "date_month": "2017-07",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/RTX3CIPR-1024x683.jpg",
            "origin": "newshour",
            "title": "Trump threat: End health payments unless there\u2019s an overhaul",
            "ts": 1501370100,
            "twitterid": "891436937990557696",
            "url": "http://to.pbs.org/2eXywvY"
        }], [{
            "_id": "59f863209b21b3526e643e97",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/RTX3BU94-1024x683.jpg",
            "origin": "newshour",
            "title": "Despite Trump\u2019s prods, Senate GOP sees no path on health care",
            "ts": 1501601400,
            "twitterid": "892407078945300483",
            "url": "http://to.pbs.org/2vey9ni"
        }, {
            "_id": "59f863209b21b3526e643e9a",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/07/marcshort-1024x621.jpg",
            "origin": "newshour",
            "title": "Trump\u2019s tax plan has aggressive deadline, but few details",
            "ts": 1501606800,
            "twitterid": "892429722172481536",
            "url": "http://to.pbs.org/2vgFClw"
        }, {
            "_id": "59f863559b21b3529e578f2d",
            "date_month": "2017-08",
            "image": "https://media.npr.org/assets/img/2017/08/23/gettyimages-693084048_wide-53fa50858acee9e464f691b25f953f624635bbd7.jpg?s=1400",
            "origin": "npr",
            "title": "Trump's Fractured Relationship With Congress Causes GOP Dread",
            "ts": 1503582360,
            "twitterid": "900715961006911488",
            "url": "http://n.pr/2g8OrYX"
        }, {
            "_id": "59f863559b21b3529e578f1e",
            "date_month": "2017-08",
            "image": "https://media.npr.org/assets/img/2017/08/22/ap_17178582171153_small_wide-9366776156f85e1fad88fbe9ac375bb433a34e5b.jpg?s=1400",
            "origin": "npr",
            "title": "Governors Preparing Bipartisan Health Care Plan For Congress To Consider",
            "ts": 1503507000,
            "twitterid": "900399739618852864",
            "url": "http://n.pr/2g5l3mB"
        }, {
            "_id": "59f863209b21b3526e64403d",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/healthcare-1-1024x775.jpg",
            "origin": "newshour",
            "title": "This bipartisan health care plan could stabilize markets, two governors say",
            "ts": 1504197000,
            "twitterid": "903293813988491264",
            "url": "http://to.pbs.org/2vIGBZg"
        }], [{
            "_id": "59f863209b21b3526e644161",
            "date_month": "2017-09",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/07/RTX3D7T1-1024x683.jpg",
            "origin": "newshour",
            "title": "Trump criticizes McCain over health care bill",
            "ts": 1506173400,
            "twitterid": "911583436732633088",
            "url": "http://to.pbs.org/2wcvaJu"
        }, {
            "_id": "59f863209b21b3526e64419c",
            "date_month": "2017-09",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/09/GettyImages-854805188-1024x672.jpg",
            "origin": "newshour",
            "title": "Who wins and loses in the GOP\u2019s proposed tax overhaul",
            "ts": 1506564000,
            "twitterid": "913221727844315137",
            "url": "http://to.pbs.org/2yttsnS"
        }, {
            "_id": "59f863559b21b3529e579200",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/09/26/gettyimages-854117386ryan_wide-1379fa5086e57980c2e1b8890276e3884374f7c4.jpg?s=1400",
            "origin": "npr",
            "title": "Republicans Outline Biggest Tax Code Overhaul In A Generation",
            "ts": 1506525300,
            "twitterid": "913059580262752256",
            "url": "http://n.pr/2fPh2Q3"
        }, {
            "_id": "59f863559b21b3529e579160",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/09/19/ap_894723607045_wide-353214c8891da55265a7b6e2b05e1f3a3ac22526.jpg?s=1400",
            "origin": "npr",
            "title": "Bemoaning Budget Cuts, Health Care Navigators Say Feds Don't Get It",
            "ts": 1505912340,
            "twitterid": "910488547894988800",
            "url": "http://n.pr/2xexVgX"
        }, {
            "_id": "59f863209b21b3526e6440f4",
            "date_month": "2017-09",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/09/RTX3G8LE-1024x683.jpg",
            "origin": "newshour",
            "title": "Trump says he wants tax cuts for middle class, not just rich Americans",
            "ts": 1505416500,
            "twitterid": "908408762657939456",
            "url": "http://to.pbs.org/2jqr9Pu"
        }], [{
            "_id": "59f863209b21b3526e644218",
            "date_month": "2017-10",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2015/12/RTR3NKL0-1-1024x705.jpg",
            "origin": "newshour",
            "title": "Poll: Most Americans disapprove of how Congress has handled health care",
            "ts": 1507249200,
            "twitterid": "916095665289220106",
            "url": "http://to.pbs.org/2yKDe4Q"
        }, {
            "_id": "59f864d89b21b3531fd10ebb",
            "date_month": "2017-10",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/10/RTS1F3FJ-1024x683.jpg",
            "origin": "newshour",
            "title": "Republicans face Sophie\u2019s choice between lowering debt and cutting taxes",
            "ts": 1508976000,
            "twitterid": "923338389688111104",
            "url": "https://www.pbs.org/newshour/politics/republicans-face-sophies-choice-between-lowering-debt-and-cutting-taxes"
        }, {
            "_id": "59fa90359b21b31731547a23",
            "date_month": "2017-10",
            "image": "https://media.npr.org/assets/img/2017/10/30/mnsure01_wide-35b81ca0d3de3d56ac1f861555ae2acc46f37555.jpg?s=1400",
            "origin": "NPR",
            "title": "Need Help Picking An ACA Health Plan? Some States Are Reaching Out",
            "ts": 1509503341,
            "twitterid": 925686108414971904,
            "url": "http://www.npr.org/sections/health-shots/2017/11/01/560195060/need-help-picking-an-aca-health-plan-some-states-are-reaching-out?utm_medium=RSS&utm_campaign=nprstoriesfromnpr"
        }, {
            "_id": "59f863209b21b3526e644275",
            "date_month": "2017-10",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/10/GettyImages-860572118-sm2-1024x682.jpg",
            "origin": "newshour",
            "title": "Analysis: What you need to know about Trump\u2019s changes to the health law",
            "ts": 1507938300,
            "twitterid": "918985958334197760",
            "url": "http://to.pbs.org/2wUKYRy"
        }, {
            "_id": "59f863559b21b3529e579288",
            "date_month": "2017-10",
            "image": "https://media.npr.org/assets/img/2017/10/03/gettyimages-450753659_wide-7c4c666d131201da7132b854909e5c8d3b00f4fd.jpg?s=1400",
            "origin": "npr",
            "title": "Touted As Middle-Class Win, GOP Tax Plan Directly Benefits Wealthy, Analysis Finds",
            "ts": 1507113600,
            "twitterid": "915526954715156480",
            "url": "http://n.pr/2km3rEH"
        }], [{
            "_id": "5a1f4a37421aa942a97ef31c",
            "date_month": "2017-11",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/11/trump6-1024x667.jpg",
            "origin": "PBS NewsHour",
            "title": "WATCH: Trump pushes tax bill in Missouri",
            "ts": 1511986501,
            "twitterid": 935965340504387584,
            "url": "https://www.pbs.org/newshour/politics/watch-live-trump-to-push-tax-bill-in-missouri?preview=true"
        }, {
            "_id": "5a13ccef421aa926a6fe5e6b",
            "date_month": "2017-11",
            "image": "https://media.npr.org/assets/img/2017/11/20/ap_17321123106957_wide-1395a4b33b18b07fb01d51caede5a180079db25a.jpg?s=1400",
            "origin": "NPR",
            "title": "How Republicans Can 'Shoehorn' Temporary Tax Cuts In For Good",
            "ts": 1511183462,
            "twitterid": 932597151015694336,
            "url": "https://www.npr.org/2017/11/20/565297639/how-republicans-can-shoehorn-temporary-tax-cuts-in-for-good?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=2048"
        }, {
            "_id": "59feb85d9b21b340c9a356fc",
            "date_month": "2017-11",
            "image": "https://media.npr.org/assets/img/2017/11/03/gettyimages-460603178_wide-e95eb72b06349c2ca9a0082fa900f9802006d1fc.jpg?s=1400",
            "origin": "NPR",
            "title": "Nonprofits Fear House Republican Tax Bill Would Hurt Charitable Giving",
            "ts": 1509773402,
            "twitterid": 926818826758504449,
            "url": "http://www.npr.org/2017/11/04/561978437/nonprofits-fear-house-republican-tax-bill-would-hurt-charitable-giving?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=202804"
        }, {
            "_id": "5a209bc1421aa9585aab69a9",
            "date_month": "2017-11",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/11/RTS1GQXZ-1024x682.jpg",
            "origin": "PBS NewsHour",
            "title": "McCain backs the tax bill as Senate GOP presses ahead on the measure",
            "ts": 1512065701,
            "twitterid": 936297529876123648,
            "url": "https://www.pbs.org/newshour/politics/mccain-backs-the-tax-bill-as-senate-gop-presses-ahead-on-the-measure"
        }, {
            "_id": "5a1df8c2421aa915280899cc",
            "date_month": "2017-11",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/11/RTX3K2K8-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "How the Senate tax bill affects rich and poor, in three charts",
            "ts": 1511908200,
            "twitterid": 935636925079097344,
            "url": "https://www.pbs.org/newshour/politics/how-the-senate-tax-bill-affects-rich-and-poor-in-three-charts"
        }], [{
            "_id": "5a3310b6421aa95751139c5a",
            "date_month": "2017-12",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/06/RTS178CP-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "WATCH: Pelosi, Ryan discuss latest tax deal",
            "ts": 1513265207,
            "twitterid": 941328624686333952,
            "url": "https://www.pbs.org/newshour/politics/watch-live-pelosi-ryan-expected-to-discuss-latest-tax-deal"
        }, {
            "_id": "5a39a837421aa956cca20b6d",
            "date_month": "2017-12",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/12/RTX3RK5F-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "WATCH: House passes massive tax bill",
            "ts": 1513714140,
            "twitterid": 943211584985403392,
            "url": "https://www.pbs.org/newshour/politics/house-expected-to-vote-on-historic-reshaping-of-u-s-tax-code-tuesday"
        }, {
            "_id": "5a39a837421aa956cca20b7a",
            "date_month": "2017-12",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/12/sanders1-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "WATCH: White House praises tax vote",
            "ts": 1513710309,
            "twitterid": 943195518217400321,
            "url": "https://www.pbs.org/newshour/politics/watch-live-white-house-expected-to-address-tax-vote"
        }, {
            "_id": "5a3c4b32421aa97cea0d3eb8",
            "date_month": "2017-12",
            "image": "https://media.npr.org/assets/img/2017/12/21/gettyimages-896677738_wide-e85c56c529efe1cb803af71b3e8534637197a4ac.jpg?s=1400",
            "origin": "NPR",
            "title": "House Passes Bill To Avert Government Shutdown",
            "ts": 1513900394,
            "twitterid": 943992790719127553,
            "url": "https://www.npr.org/2017/12/21/572541406/congress-scrambles-to-keep-government-running-before-friday-deadline?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=2050"
        }, {
            "_id": "5a3c4b32421aa97cea0d3ec1",
            "date_month": "2017-12",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/12/RTX3QA88-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "Congress rushes to approve spending bill to avoid government shutdown",
            "ts": 1513892070,
            "twitterid": 943957879102504960,
            "url": "https://www.pbs.org/newshour/politics/congress-rushes-to-approve-spending-bill-to-avoid-government-shutdown"
        }]]
    }, {
        "list": [59, 213, 163, 160, 139, 150, 159, 179, 130, 91, 130, 164],
        "months": ["2017-01", "2017-02", "2017-03", "2017-04", "2017-05", "2017-06", "2017-07", "2017-08", "2017-09", "2017-10", "2017-11", "2017-12"],
        "peaks": ["2017-02", "2017-08"],
        "theme": ["president Trump say", "White House", "travel ban", "Court Ruling", "Senate", "Democrats", "immigrants"],
        "toparticles": [[{
            "_id": "59f863559b21b3529e577e6b",
            "date_month": "2017-01",
            "image": "https://media.npr.org/assets/img/2017/01/19/cs_ep3_obamas_wide-f060c33b29ebb58adefdba2efe865d6b2829aa86.jpg?s=1400",
            "origin": "npr",
            "title": "Obama's Racial Legacy: Some Last Words On The First Black President",
            "ts": 1484906100,
            "twitterid": "822381907425914880",
            "url": "http://n.pr/2k7Hrs8"
        }, {
            "_id": "59f863559b21b3529e577e6c",
            "date_month": "2017-01",
            "image": "https://media.npr.org/assets/img/2017/01/19/gettyimages-632002110_wide-96608f50c3b0623e3111eb005e1cb981ead35695.jpg?s=1400",
            "origin": "npr",
            "title": "What To Expect For Donald Trump's Inauguration",
            "ts": 1484910000,
            "twitterid": "822398271209414656",
            "url": "http://n.pr/2k7Br2L"
        }, {
            "_id": "59f863559b21b3529e577e6e",
            "date_month": "2017-01",
            "image": "https://media.npr.org/assets/img/2017/01/17/gettyimages-631616650_wide-975c29aaa4f66c0b78afff66566de0f03bcd9a16.jpg?s=1400",
            "origin": "npr",
            "title": "Make NPR Your Inauguration Day Headquarters",
            "ts": 1484914500,
            "twitterid": "822417140934275077",
            "url": "http://n.pr/2iFqhpC"
        }, {
            "_id": "59f863559b21b3529e577e70",
            "date_month": "2017-01",
            "image": "https://media.npr.org/assets/img/2017/01/19/ap_99100701333_wide-086e6da1ce7fa150190ba8893959a720467e5f6c.jpg?s=1400",
            "origin": "npr",
            "title": "Donald Trump's Been Saying The Same Thing For 30 Years",
            "ts": 1484918880,
            "twitterid": "822435512325505024",
            "url": "http://n.pr/2iIX39s"
        }, {
            "_id": "59f863559b21b3529e577e72",
            "date_month": "2017-01",
            "image": "https://media.npr.org/assets/img/2017/01/19/gettyimages-515557354_wide-b13f9beb2353d7dfcc2874ce09ec20bf73d9dbbf.jpg?s=1400",
            "origin": "npr",
            "title": "Repeat After Me: The 35 Most Important Words Of Inauguration Day",
            "ts": 1484919840,
            "twitterid": "822439539520208901",
            "url": "http://n.pr/2iJjJWS"
        }], [{
            "_id": "59f863209b21b3526e6435ce",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2014/03/134210846-State-House-Trenton-New-Jersey-1024x669.jpg",
            "origin": "newshour",
            "title": "North Carolina\u2019s legislature tried to strip power from the new governor. Will other states do the same?",
            "ts": 1486395600,
            "twitterid": "828629332490874882",
            "url": "http://to.pbs.org/2k9Pqrv"
        }, {
            "_id": "59f863209b21b3526e6436c9",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/flagteens-1024x683.jpg",
            "origin": "newshour",
            "title": "Teens disillusioned by politics\u2014but aren\u2019t as quick as their parents to write off the future, study says",
            "ts": 1488294000,
            "twitterid": "836591811778904064",
            "url": "http://to.pbs.org/2lh0WPd"
        }, {
            "_id": "59f863209b21b3526e643621",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/RTX2ZQP1-1024x683.jpg",
            "origin": "newshour",
            "title": "5 important stories you don\u2019t need a Mar-a-Lago membership to read about",
            "ts": 1487032200,
            "twitterid": "831299424873635840",
            "url": "http://to.pbs.org/2kl3Erc"
        }, {
            "_id": "59f863209b21b3526e643672",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/RTX30B98-1024x662.jpg",
            "origin": "newshour",
            "title": "5 important stories that were lost in last week\u2019s news overload",
            "ts": 1487637900,
            "twitterid": "833839909102161920",
            "url": "http://to.pbs.org/2lEXn9R"
        }, {
            "_id": "59f863209b21b3526e643697",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/RTSTWJ5-1024x683.jpg",
            "origin": "newshour",
            "title": "For a \u2018smart\u2019 secure border, \u2018we need some creativity,\u2019 says Rep. McCaul",
            "ts": 1487901600,
            "twitterid": "834945946312044546",
            "url": "http://to.pbs.org/2kSaoNz"
        }], [{
            "_id": "59f863209b21b3526e64373f",
            "date_month": "2017-03",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/01/RTSV5TH-1024x683.jpg",
            "origin": "newshour",
            "title": "HUD could face $6 billion in cuts",
            "ts": 1489110300,
            "twitterid": "840015601435316225",
            "url": "http://to.pbs.org/2m5zWTj"
        }, {
            "_id": "59f863559b21b3529e578096",
            "date_month": "2017-03",
            "image": "https://media.npr.org/assets/img/2017/03/03/gettyimages-621866316_wide-1f2985528047986104809f2ef8b5c05842023f83.jpg?s=1400",
            "origin": "npr",
            "title": "Experts Say White House's Conway Response Raises Major Ethical Questions",
            "ts": 1488583020,
            "twitterid": "837804230601764865",
            "url": "http://n.pr/2m5ir8K"
        }, {
            "_id": "59f863559b21b3529e578285",
            "date_month": "2017-03",
            "image": "https://media.npr.org/assets/img/2017/03/26/img_2273_wide-355475ff8a6ec3bd2a349aea634509d2480b4bc2.jpg?s=1400",
            "origin": "npr",
            "title": "Special Immigrant Visa Holders Still Face Questioning Upon Reaching U.S.",
            "ts": 1490624640,
            "twitterid": "846367205579206657",
            "url": "http://n.pr/2o1zjPY"
        }, {
            "_id": "59f863559b21b3529e5781ff",
            "date_month": "2017-03",
            "image": "https://media.npr.org/assets/img/2017/03/21/gettyimages-654569180_wide-04a884430bc6603e6f5329d9af30ca3281ba7ceb.jpg?s=1400",
            "origin": "npr",
            "title": "Ivanka Trump's Move To The White House Raises Questions About Ethics",
            "ts": 1490129820,
            "twitterid": "844291956712730624",
            "url": "http://n.pr/2nyb0Za"
        }, {
            "_id": "59f863559b21b3529e5781f3",
            "date_month": "2017-03",
            "image": "https://media.npr.org/assets/img/2017/03/21/ap_16338465729777-1-_wide-3f1a06009e9e8873e4353c051fcf9ebc8c6438eb.jpg?s=1400",
            "origin": "npr",
            "title": "At Trump's D.C. Hotel, A U.S.-Turkey Relations Conference Stirs Up Ethics Questions",
            "ts": 1490107800,
            "twitterid": "844199422078717952",
            "url": "http://n.pr/2o0rJAV"
        }], [{
            "_id": "59f863559b21b3529e57833f",
            "date_month": "2017-04",
            "image": "https://media.npr.org/assets/img/2017/03/31/ap_17080498237581_wide-4dea5fa74fc68d6bd0b3bcabfe9c48095599a441.jpg?s=1400",
            "origin": "npr",
            "title": "The Senate Could Go 'Nuclear' This Week. What Does That Mean?",
            "ts": 1491267060,
            "twitterid": "849061710438727681",
            "url": "http://n.pr/2nR3bLZ"
        }, {
            "_id": "59f863559b21b3529e57834e",
            "date_month": "2017-04",
            "image": "https://media.npr.org/assets/img/2017/04/04/ap_968486053533bork_wide-d342e89121c1eecb924345719575bf849dd22406.jpg?s=1400",
            "origin": "npr",
            "title": "Going 'Nuclear': How We Got Here",
            "ts": 1491334380,
            "twitterid": "849344070132445184",
            "url": "http://n.pr/2nGEHEl"
        }, {
            "_id": "59f863559b21b3529e578390",
            "date_month": "2017-04",
            "image": "https://media.npr.org/assets/img/2017/04/06/gettyimages-665355792_wide-2d696793513e95e0727c58535e4e86401feb0558.jpg?s=1400",
            "origin": "npr",
            "title": "Senate Pulls 'Nuclear' Trigger To Ease Gorsuch Confirmation",
            "ts": 1491498120,
            "twitterid": "850030928047067136",
            "url": "http://n.pr/2ngX5ay"
        }, {
            "_id": "59f863559b21b3529e5783a8",
            "date_month": "2017-04",
            "image": "https://media.npr.org/assets/img/2017/04/06/gettyimages-633344768_wide-206a266f4db06412509b685610f9f9459dc5d9b3.jpg?s=1400",
            "origin": "npr",
            "title": "Senate Confirms Gorsuch To Supreme Court",
            "ts": 1491580320,
            "twitterid": "850375753124458496",
            "url": "http://n.pr/2oJwHq8"
        }, {
            "_id": "59f863559b21b3529e5783dd",
            "date_month": "2017-04",
            "image": "https://media.npr.org/assets/img/2017/04/10/gorsuchconfirmationwh21edit_wide-f509a5fda5f43fc6c17619de392ee330183a1dcc.jpg?s=1400",
            "origin": "npr",
            "title": "Trump Cheers Elevation Of Gorsuch To Supreme Court",
            "ts": 1491844260,
            "twitterid": "851482659922432000",
            "url": "http://n.pr/2nV01oT"
        }], [{
            "_id": "59f863209b21b3526e6439db",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTX2TT25-1024x701.jpg",
            "origin": "newshour",
            "title": "GOP House panel takes first step to gut Dodd-Frank law",
            "ts": 1493996400,
            "twitterid": "860509531545239552",
            "url": "http://to.pbs.org/2ph9ybh"
        }, {
            "_id": "59f863209b21b3526e6439f2",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTS15K79-1024x683.jpg",
            "origin": "newshour",
            "title": "French cybersecurity agency to probe Macron hacking attack",
            "ts": 1494166500,
            "twitterid": "861222842024591360",
            "url": "http://to.pbs.org/2pgIXdK"
        }, {
            "_id": "59f863209b21b3526e6439f7",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTS15K79-1024x683.jpg",
            "origin": "newshour",
            "title": "Emmanuel Macron wins French election",
            "ts": 1494187440,
            "twitterid": "861310818981425153",
            "url": "http://to.pbs.org/2pVjfgF"
        }, {
            "_id": "59f863209b21b3526e643aa7",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/70715369_5f4be9798e_o.jpg",
            "origin": "newshour",
            "title": "Alabama\u2019s GOP approves new maps; Dems vow repeat court fight",
            "ts": 1495296900,
            "twitterid": "865964083958484993",
            "url": "http://to.pbs.org/2rCAxjp"
        }, {
            "_id": "59f863209b21b3526e643aaa",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTSGD5M-1024x769.jpg",
            "origin": "newshour",
            "title": "California Democrats take aim at Trump, GOP Congress",
            "ts": 1495323900,
            "twitterid": "866077328970887168",
            "url": "http://to.pbs.org/2rp6Jcp"
        }], [{
            "_id": "59f863559b21b3529e578a28",
            "date_month": "2017-06",
            "image": "https://media.npr.org/assets/img/2017/06/30/gettyimages-621785978_wide-0b399d1087f1e3775e13c14f9636cee09f0b3e78.jpg?s=1400",
            "origin": "npr",
            "title": "White House Panel Asks States For Their Voter Rolls",
            "ts": 1498773000,
            "twitterid": "880543926108606464",
            "url": "http://n.pr/2tpR7Xt"
        }, {
            "_id": "59f863209b21b3526e643ce1",
            "date_month": "2017-06",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTX2T3ES-1024x623.jpg",
            "origin": "newshour",
            "title": "Trump commission on voting fraud asks states for voter data",
            "ts": 1498833900,
            "twitterid": "880799335624998912",
            "url": "http://to.pbs.org/2ttgF5k"
        }, {
            "_id": "59f863559b21b3529e578a47",
            "date_month": "2017-06",
            "image": "https://media.npr.org/assets/img/2017/06/30/ap_17159695097228_wide-b2dc947977dd178314ee13f26115a866b64cd151.jpg?s=1400",
            "origin": "npr",
            "title": "Dozens Of States Resist Trump Administration Voter Initiative",
            "ts": 1498867500,
            "twitterid": "880940303946981376",
            "url": "http://n.pr/2saSmG2"
        }, {
            "_id": "59f863209b21b3526e643c26",
            "date_month": "2017-06",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2015/01/167447077-1024x682.jpg",
            "origin": "newshour",
            "title": "Trump administration quietly rolls back civil rights efforts across federal government",
            "ts": 1497633600,
            "twitterid": "875764915302260737",
            "url": "http://to.pbs.org/2rnVrlG"
        }, {
            "_id": "59f863209b21b3526e643ce9",
            "date_month": "2017-06",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTX2T3ES-1024x623.jpg",
            "origin": "newshour",
            "title": "A Trump commission requested voter data. Here\u2019s what every state is saying.",
            "ts": 1498872600,
            "twitterid": "880961654510452736",
            "url": "http://to.pbs.org/2tvduu2"
        }], [{
            "_id": "59f863209b21b3526e643df2",
            "date_month": "2017-07",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/RTX2TTTZ-1024x683.jpg",
            "origin": "newshour",
            "title": "Trump names new acting government ethics chief",
            "ts": 1500672000,
            "twitterid": "888508887099461633",
            "url": "http://to.pbs.org/2gR3ZR0"
        }, {
            "_id": "59f863209b21b3526e643e07",
            "date_month": "2017-07",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/trumpwave-1024x683.jpg",
            "origin": "newshour",
            "title": "Trump lawyer says there\u2019s no pardon discussion",
            "ts": 1500816600,
            "twitterid": "889115382929387521",
            "url": "http://to.pbs.org/2eFFbet"
        }, {
            "_id": "59f863559b21b3529e578a4f",
            "date_month": "2017-07",
            "image": "https://media.npr.org/assets/img/2017/06/30/trump---professionalism_wide-ee195e6012991feeb7e313304303a2e28d857149.jpg?s=1400",
            "origin": "npr",
            "title": "Word To The President: 'Professionalism'",
            "ts": 1498994400,
            "twitterid": "881472521383452672",
            "url": "http://n.pr/2tzTtCN"
        }, {
            "_id": "59f863559b21b3529e578ce2",
            "date_month": "2017-07",
            "image": "https://media.npr.org/assets/img/2017/07/28/gettyimages-824009330-trump-suffolk_wide-2b7d5bc15e16de0611dd61239fb9069bf580abb0.jpg?s=1400",
            "origin": "npr",
            "title": "President Vows To 'Eradicate' MS-13 Gang",
            "ts": 1501285140,
            "twitterid": "891080582272307203",
            "url": "http://n.pr/2eURB1Z"
        }, {
            "_id": "59f863559b21b3529e578d20",
            "date_month": "2017-07",
            "image": "https://media.npr.org/assets/img/2017/07/31/ap_17212491668292_wide-b705b43d6f28ca09f55390b6bf2e9ea1bc15c9b9.jpg?s=1400",
            "origin": "npr",
            "title": "Trump Says No 'Chaos' As He Swears In His New Chief Of Staff",
            "ts": 1501527540,
            "twitterid": "892097345390882817",
            "url": "http://n.pr/2hgMTMG"
        }], [{
            "_id": "59f863209b21b3526e643f51",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/08/RTS1BJIL-1024x683.jpg",
            "origin": "newshour",
            "title": "Politicians criticize Trump for not explicitly rebuking white supremacists",
            "ts": 1502641080,
            "twitterid": "896767886630555649",
            "url": "http://to.pbs.org/2hW4gTl"
        }, {
            "_id": "59f863209b21b3526e643f63",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/08/RTS1BSLY-1024x654.jpg",
            "origin": "newshour",
            "title": "How should U.S. address white supremacist extremism?",
            "ts": 1502762400,
            "twitterid": "897276660013084674",
            "url": "http://to.pbs.org/2fGUfc1"
        }, {
            "_id": "59f863209b21b3526e643f7f",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/08/trumptuesday-1024x653.jpg",
            "origin": "newshour",
            "title": "In 3 tweets, Trump defends \u2018beautiful\u2019 Confederate monuments",
            "ts": 1502982900,
            "twitterid": "898201503671885824",
            "url": "http://to.pbs.org/2v4M9Mp"
        }, {
            "_id": "59f863209b21b3526e643fee",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/themes/pbs-newshour/assets/img/ios/favicon.ico",
            "origin": "newshour",
            "title": "RNC votes to condemn white supremacists",
            "ts": 1503691560,
            "twitterid": "901174069219008512",
            "url": "http://to.pbs.org/2vwbLSs"
        }, {
            "_id": "59f863559b21b3529e578d9b",
            "date_month": "2017-08",
            "image": "https://media.npr.org/assets/img/2017/08/04/gettyimages-806813662_wide-2e86428001762749a7cde442fc4384ba751c3fad.jpg?s=1400",
            "origin": "npr",
            "title": "Trump Heads To His New Jersey Golf Club For 17-Day 'Working Vacation'",
            "ts": 1501889100,
            "twitterid": "893613771918364672",
            "url": "http://n.pr/2hvsFza"
        }], [{
            "_id": "59f863209b21b3526e644111",
            "date_month": "2017-09",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/09/RTSP1B6-1024x779.jpg",
            "origin": "newshour",
            "title": "California lawmakers approve presidential primary in March",
            "ts": 1505575800,
            "twitterid": "909076919714422784",
            "url": "http://to.pbs.org/2wjott6"
        }, {
            "_id": "59f863209b21b3526e644188",
            "date_month": "2017-09",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2015/09/GettyImages-481661176-1024x682.jpg",
            "origin": "newshour",
            "title": "Republican Sen. Corker says he won\u2019t seek re-election",
            "ts": 1506468960,
            "twitterid": "912823233283489792",
            "url": "http://to.pbs.org/2xE609G"
        }, {
            "_id": "59f863559b21b3529e578ff0",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/09/01/gettyimages-829231606_wide-9c706122f39d3e59214fba1baba033f069efbea9.jpg?s=1400",
            "origin": "npr",
            "title": "Trump Hotel Lease Under New Review As Lawmakers Keep Up Criticism",
            "ts": 1504386300,
            "twitterid": "904087788684951552",
            "url": "http://n.pr/2x0yyLx"
        }, {
            "_id": "59f863559b21b3529e5790d2",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/09/12/ap_17255567446279_wide-5f51cd9cd74ac2a10e9dc96d6f848ac300731dfd.jpg?s=1400",
            "origin": "npr",
            "title": "Tension And Protests Mark Trump Voting Commission Meeting",
            "ts": 1505256780,
            "twitterid": "907738848289021953",
            "url": "http://n.pr/2vTqLuG"
        }, {
            "_id": "59f863559b21b3529e579119",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/09/16/ap_17168142002830-immigration_wide-bd4091a4d6312a76cac2d3085a24c67dfdf75273.jpg?s=1400",
            "origin": "npr",
            "title": "Lawmakers Vote To Make California A 'Sanctuary State'",
            "ts": 1505580360,
            "twitterid": "909096054770958336",
            "url": "http://n.pr/2w1n71Q"
        }], [{
            "_id": "59f863209b21b3526e6441f5",
            "date_month": "2017-10",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/04/RTS13XE0-1024x693.jpg",
            "origin": "newshour",
            "title": "This New York bill would ban anonymous political ads on Facebook",
            "ts": 1507123200,
            "twitterid": "915567180531372034",
            "url": "http://to.pbs.org/2xYv77M"
        }, {
            "_id": "59f863209b21b3526e64423e",
            "date_month": "2017-10",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/06/RTX39OMP-1-1024x689.jpg",
            "origin": "newshour",
            "title": "Sen. Dianne Feinstein says she\u2019s running for re-election",
            "ts": 1507565700,
            "twitterid": "917423162761072641",
            "url": "http://to.pbs.org/2i1HZ7m"
        }, {
            "_id": "59f863209b21b3526e644280",
            "date_month": "2017-10",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/10/RTS1GD4V-1024x683.jpg",
            "origin": "newshour",
            "title": "Trump\u2019s speech sparks a new war of words between U.S., Iran",
            "ts": 1507998600,
            "twitterid": "919238875855441926",
            "url": "http://to.pbs.org/2gFP4Xq"
        }, {
            "_id": "59f864109b21b352cdf6e378",
            "date_month": "2017-10",
            "image": "https://media.npr.org/assets/img/2017/10/24/ap_17268745578515_wide-fc99c9d0cbd97622c65dcfda0905ca5d0e98f8d1.jpg?s=1400",
            "origin": "npr",
            "title": "2,800 JFK Assassination Files Have Been Released, Others Withheld",
            "ts": 1509035640,
            "twitterid": "923588733840052229",
            "url": "http://www.npr.org/2017/10/26/559799857/final-jfk-assassination-files-due-to-be-released?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=2053"
        }, {
            "_id": "59f864d89b21b3531fd10ec3",
            "date_month": "2017-10",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/10/RTSOKJE-1024x683.jpg",
            "origin": "newshour",
            "title": "Georgia election server wiped after suit filed",
            "ts": 1509024900,
            "twitterid": "923543604739657728",
            "url": "https://www.pbs.org/newshour/politics/georgia-election-server-wiped-after-suit-filed"
        }], [{
            "_id": "59feb85d9b21b340c9a35730",
            "date_month": "2017-11",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/10/courthousefront.jpg",
            "origin": "PBS NewsHour",
            "title": "Government says teen\u2019s lawyers misled them in abortion case",
            "ts": 1509704100,
            "twitterid": 926528154595860481,
            "url": "https://www.pbs.org/newshour/nation/government-says-teens-lawyers-misled-them-in-abortion-case"
        }, {
            "_id": "5a006df29b21b37370281d5e",
            "date_month": "2017-11",
            "image": "https://media.npr.org/assets/img/2017/11/02/ap_17271054596860_wide-23c8683305f5bf07f320048f53341c191b4b773d.jpg?s=1400",
            "origin": "NPR",
            "title": "Millions Of Dollars Pour Into Washington State Special Election",
            "ts": 1509940070,
            "twitterid": 927517884296892416,
            "url": "http://www.npr.org/2017/11/06/561554801/millions-of-dollars-pour-into-washington-state-special-election?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=202806"
        }, {
            "_id": "5a0286ad9b21b3a808e02c1c",
            "date_month": "2017-11",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/11/RTS1IV1V-1024x740.jpg",
            "origin": "PBS NewsHour",
            "title": "A look at the top U.S. races on Election Day",
            "ts": 1510038900,
            "twitterid": 927932406513799168,
            "url": "https://www.pbs.org/newshour/politics/a-look-at-the-top-u-s-races-on-election-day"
        }, {
            "_id": "5a0286ad9b21b3a808e02c3f",
            "date_month": "2017-11",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/11/manafort1-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "Judge keeps Manafort, Gates under house arrest \u2014 for now",
            "ts": 1509986400,
            "twitterid": 927712205872746496,
            "url": "https://www.pbs.org/newshour/politics/judge-keeps-manafort-gates-under-house-arrest-for-now"
        }, {
            "_id": "5a09896d9b21b33c49ed3c2b",
            "date_month": "2017-11",
            "image": "https://media.npr.org/assets/img/2017/11/11/trump-duterte_wide-a92dbdb648c8cd4f15e749c34fa8bb9c571de28d.jpg?s=1400",
            "origin": "NPR",
            "title": "Trump And Duterte Could Reset The Shaky U.S.-Philippine Alliance",
            "ts": 1510426560,
            "twitterid": 929558369651843074,
            "url": "https://www.npr.org/2017/11/11/563475763/trump-to-meet-philippines-duterte?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=2039"
        }], [{
            "_id": "5a27dbd4421aa95247db59dd",
            "date_month": "2017-12",
            "image": "https://media.npr.org/assets/img/2017/12/06/ap_17339738071851_wide-87b595ea8a3067449c42018ab065401e2b113a1e.jpg?s=1400",
            "origin": "NPR",
            "title": "U.S. Decision On Jerusalem Sparks Anger And Concern",
            "ts": 1512551105,
            "twitterid": 938333460468441089,
            "url": "https://www.npr.org/sections/thetwo-way/2017/12/06/568748383/u-s-decision-on-jerusalem-sparks-anger-and-concern?utm_source=dlvr.it&utm_medium=twitter"
        }, {
            "_id": "5a2884b2421aa95a9caf41a8",
            "date_month": "2017-12",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/12/RTX3M23P-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "What you should know about Trump\u2019s Jerusalem announcement",
            "ts": 1512604050,
            "twitterid": 938555529311473664,
            "url": "https://www.pbs.org/newshour/world/what-you-should-know-about-trumps-jerusalem-announcement"
        }, {
            "_id": "5a2884b2421aa95a9caf41ac",
            "date_month": "2017-12",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/12/trump-1024x608.jpg",
            "origin": "PBS NewsHour",
            "title": "Read Trump\u2019s full remarks on Jerusalem",
            "ts": 1512600207,
            "twitterid": 938539412450930688,
            "url": "https://www.pbs.org/newshour/politics/read-trumps-full-remarks-on-jerusalem"
        }, {
            "_id": "5a29d62f421aa96a3ccc18aa",
            "date_month": "2017-12",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/12/RTX3LCIW-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "On Jerusalem, Donald Trump delivers on campaign promise",
            "ts": 1512657002,
            "twitterid": 938777626071748609,
            "url": "https://www.pbs.org/newshour/politics/on-jerusalem-donald-trump-delivers-on-campaign-promise"
        }, {
            "_id": "5a2dcaa1421aa94f0b0a0041",
            "date_month": "2017-12",
            "image": "https://media.npr.org/assets/img/2017/12/10/gettyimages-889369868_wide-51a456e5ee37a97bd5a44ebdae545de3fe77f115.jpg?s=1400",
            "origin": "NPR",
            "title": "Anti-Trump Protests Flare In Beirut Near The U.S. Embassy",
            "ts": 1512919147,
            "twitterid": 939877140505358336,
            "url": "https://www.npr.org/sections/thetwo-way/2017/12/10/569728334/anti-trump-protests-flare-in-beirut-near-the-us-embassy?utm_source=dlvr.it&utm_medium=twitter"
        }]]
    }, {
        "list": [21, 70, 26, 128, 94, 78, 33, 31, 17, 19, 32],
        "months": ["2017-02", "2017-03", "2017-04", "2017-05", "2017-06", "2017-07", "2017-08", "2017-09", "2017-10", "2017-11", "2017-12"],
        "peaks": ["2017-05"],
        "theme": ["Trump", "Russia", "Comey", "White House", "probe", "Senate", "investigation", "FBI", "Flynn", "Mueller", "Sessions", "Committee"],
        "toparticles": [[{
            "_id": "59f863209b21b3526e643604",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/01/RTSWLIJ-1024x734.jpg",
            "origin": "newshour",
            "title": "Official: Flynn not \u2018certain\u2019 on sanctions talk with Russia",
            "ts": 1486761600,
            "twitterid": "830164440293138432",
            "url": "http://to.pbs.org/2l28Orn"
        }, {
            "_id": "59f863209b21b3526e64360a",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/RTX30IOV-1024x685.jpg",
            "origin": "newshour",
            "title": "Top Trump aide reportedly talked sanctions with Russian envoy",
            "ts": 1486785600,
            "twitterid": "830265104771866625",
            "url": "http://to.pbs.org/2kf0ccI"
        }, {
            "_id": "59f863209b21b3526e643632",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/RTSYOQW-1024x689.jpg",
            "origin": "newshour",
            "title": "Democrats demand independent probe after Flynn resignation",
            "ts": 1487124000,
            "twitterid": "831684461091835904",
            "url": "http://to.pbs.org/2l65lWC"
        }, {
            "_id": "59f863209b21b3526e64363f",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/RTSPUUS-1024x687.jpg",
            "origin": "newshour",
            "title": "Democrats see disparity in handling of Clinton, Russia inquiries",
            "ts": 1487206800,
            "twitterid": "832031754215096321",
            "url": "http://to.pbs.org/2l9L0zD"
        }, {
            "_id": "59f863209b21b3526e643652",
            "date_month": "2017-02",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/RTSYJ25-1024x688.jpg",
            "origin": "newshour",
            "title": "Chaffetz seeks charge of ex-Clinton aide in email inquiry",
            "ts": 1487346000,
            "twitterid": "832615593572438017",
            "url": "http://to.pbs.org/2m2XTL4"
        }], [{
            "_id": "59f863209b21b3526e6436f1",
            "date_month": "2017-03",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/03/sessionsss-1024x683.jpg",
            "origin": "newshour",
            "title": "All the ambassadors Jeff Sessions met in 2016",
            "ts": 1488508560,
            "twitterid": "837491766878167041",
            "url": "http://to.pbs.org/2m0tBLY"
        }, {
            "_id": "59f863209b21b3526e643731",
            "date_month": "2017-03",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/03/RTR3GLVR-1024x696.jpg",
            "origin": "newshour",
            "title": "Russia has deployed banned missile, U.S. general says",
            "ts": 1489022400,
            "twitterid": "839646925708156929",
            "url": "http://to.pbs.org/2mHOU6b"
        }, {
            "_id": "59f863209b21b3526e643754",
            "date_month": "2017-03",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/03/RTS10VLL-1024x683.jpg",
            "origin": "newshour",
            "title": "Ex-Trump adviser swaps messages with DNC hacking suspect",
            "ts": 1489273200,
            "twitterid": "840698857851777024",
            "url": "http://to.pbs.org/2nr20RW"
        }, {
            "_id": "59f863209b21b3526e6437fd",
            "date_month": "2017-03",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/03/RTX32KJW-1024x683.jpg",
            "origin": "newshour",
            "title": "Schiff calls on Nunes to recuse himself from Russia probe",
            "ts": 1490658000,
            "twitterid": "846507357064585217",
            "url": "http://to.pbs.org/2o445rE"
        }, {
            "_id": "59f863559b21b3529e5782f0",
            "date_month": "2017-03",
            "image": "https://media.npr.org/assets/img/2017/03/30/gettyimages-660701230_wide-afddb5da2d3ae089162fc50d9377af1049017dcc.jpg?s=1400",
            "origin": "npr",
            "title": "Senate Intelligence Committee Vice Chair Blasts Putin",
            "ts": 1490910300,
            "twitterid": "847565473633849345",
            "url": "http://n.pr/2mTQPFP"
        }], [{
            "_id": "59f863209b21b3526e643870",
            "date_month": "2017-04",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/03/RTX317D4-1024x683.jpg",
            "origin": "newshour",
            "title": "Trump removes Steve Bannon from National Security Council",
            "ts": 1491409320,
            "twitterid": "849658537554980864",
            "url": "http://to.pbs.org/2nEgj5v"
        }, {
            "_id": "59f863209b21b3526e6438c2",
            "date_month": "2017-04",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/02/RTX2UP14-1024x807.jpg",
            "origin": "newshour",
            "title": "Report: U.S. sought to monitor Trump adviser Carter Page last summer",
            "ts": 1491960600,
            "twitterid": "851970624838713348",
            "url": "http://to.pbs.org/2p5poWO"
        }, {
            "_id": "59f863559b21b3529e57837d",
            "date_month": "2017-04",
            "image": "https://media.npr.org/assets/img/2017/04/05/ap_16300614703840_wide-4a01be932e87065b7021a40ff73c5d0e844a299a.jpg?s=1400",
            "origin": "npr",
            "title": "Trump Picks Strategy To Counter Russia Storyline: Blame Susan Rice",
            "ts": 1491436020,
            "twitterid": "849770468760580096",
            "url": "http://n.pr/2nFKg5g"
        }, {
            "_id": "59f863559b21b3529e578398",
            "date_month": "2017-04",
            "image": "https://media.npr.org/assets/img/2017/04/06/warner_wide-5c4774bbe044ccc38c45e4aa4f26826d95e64f30.jpg?s=1400",
            "origin": "npr",
            "title": "Sen. Mark Warner: No Evidence To Support Trump's Political Snooping Claims",
            "ts": 1491514680,
            "twitterid": "850100474724229120",
            "url": "http://n.pr/2oK5Av1"
        }, {
            "_id": "59f863559b21b3529e578408",
            "date_month": "2017-04",
            "image": "https://media.npr.org/assets/img/2017/04/11/ap_17101491719805_cc_wide-999a251e099a2115acb633800f6bbb0a9aea215b.jpg?s=1400",
            "origin": "npr",
            "title": "Russian Spies' Go-To Tactics For Entangling People: Bribery And Blackmail",
            "ts": 1491951600,
            "twitterid": "851932879781191680",
            "url": "http://n.pr/2p5jIw4"
        }], [{
            "_id": "59f863209b21b3526e643a1f",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTS1611P-1024x726.jpg",
            "origin": "newshour",
            "title": "WATCH: With Kissinger at his side, Trump delivers first in-person response to Comey firing",
            "ts": 1494443700,
            "twitterid": "862385504645402625",
            "url": "http://to.pbs.org/2qU20PS"
        }, {
            "_id": "59f863209b21b3526e643a31",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTS15X0Q-1024x683.jpg",
            "origin": "newshour",
            "title": "WATCH: Schumer calls for senators meeting with DOJ leaders in wake of Comey firing",
            "ts": 1494544500,
            "twitterid": "862808291352727552",
            "url": "http://to.pbs.org/2ppDS7R"
        }, {
            "_id": "59f863209b21b3526e643a79",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/burr-1024x595.jpg",
            "origin": "newshour",
            "title": "Sen. Burr on Comey memo: \u2018Somebody is going to have to do more than just have anonymous sources\u2019",
            "ts": 1495036860,
            "twitterid": "864873431740895232",
            "url": "http://to.pbs.org/2pSqsgA"
        }, {
            "_id": "59f863209b21b3526e643b41",
            "date_month": "2017-05",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTS12SYS-1024x683.jpg",
            "origin": "newshour",
            "title": "AP report: Comey cleared to testify about Russia probe before Senate intel committee",
            "ts": 1496266560,
            "twitterid": "870031148499570688",
            "url": "http://to.pbs.org/2rcjlCN"
        }, {
            "_id": "59f863559b21b3529e5786a3",
            "date_month": "2017-05",
            "image": "https://media.npr.org/assets/img/2017/05/18/gettyimages-684671856_wide-d3df28e7e89e000a402d26044f032e0190beccda.jpg?s=1400",
            "origin": "npr",
            "title": "Deputy Attorney General Knew Comey Was Out Before Writing Critical Memo, Senators Say",
            "ts": 1495150020,
            "twitterid": "865348022741254145",
            "url": "http://n.pr/2qXJ7vL"
        }], [{
            "_id": "59f863209b21b3526e643b95",
            "date_month": "2017-06",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/GettyImages-677798528-1024x683.jpg",
            "origin": "newshour",
            "title": "What to watch for in Comey\u2019s Senate testimony",
            "ts": 1496770920,
            "twitterid": "872146634796302337",
            "url": "http://to.pbs.org/2qYAUYw"
        }, {
            "_id": "59f863209b21b3526e643ba4",
            "date_month": "2017-06",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/05/RTS15WVB-1024x707.jpg",
            "origin": "newshour",
            "title": "WATCH: James Comey testifies in Senate hearing on Russia",
            "ts": 1496856840,
            "twitterid": "872506993248018433",
            "url": "http://to.pbs.org/2r2s9wM"
        }, {
            "_id": "59f863209b21b3526e643bb1",
            "date_month": "2017-06",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/06/RTX39O2L-1024x661.jpg",
            "origin": "newshour",
            "title": "WATCH: Comey says, \u2018Lordy, I hope there are tapes\u2019",
            "ts": 1496936760,
            "twitterid": "872842397650210816",
            "url": "http://to.pbs.org/2qZPgnI"
        }, {
            "_id": "59f863209b21b3526e643bcd",
            "date_month": "2017-06",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/06/RTX39PDA-1024x683.jpg",
            "origin": "newshour",
            "title": "Many in GOP unshaken by Comey\u2019s testimony against Trump",
            "ts": 1497114900,
            "twitterid": "873589327401426944",
            "url": "http://to.pbs.org/2rXACyJ"
        }, {
            "_id": "59f863209b21b3526e643bfb",
            "date_month": "2017-06",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/06/RTS16Y7C-1024x672.jpg",
            "origin": "newshour",
            "title": "What questions remain after Sessions\u2019 Senate testimony?",
            "ts": 1497403800,
            "twitterid": "874801063261605889",
            "url": "http://to.pbs.org/2tjCYr9"
        }], [{
            "_id": "59f863209b21b3526e643d29",
            "date_month": "2017-07",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/RTX3A9ZO-1024x718.jpg",
            "origin": "newshour",
            "title": "In Poland, Trump chides Russia on eve of Putin meeting",
            "ts": 1499391000,
            "twitterid": "883135982379204608",
            "url": "http://to.pbs.org/2tSfj4B"
        }, {
            "_id": "59f863209b21b3526e643d44",
            "date_month": "2017-07",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/RTX3AN2L-1024x683.jpg",
            "origin": "newshour",
            "title": "Putin hails meeting, thinks Trump accepted election denials",
            "ts": 1499542200,
            "twitterid": "883770162565980160",
            "url": "http://to.pbs.org/2u4dC4X"
        }, {
            "_id": "59f863209b21b3526e643d47",
            "date_month": "2017-07",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/RTS19B3Y-1024x683.jpg",
            "origin": "newshour",
            "title": "Report: Trump son, son-in-law met with Kremlin-linked lawyer",
            "ts": 1499615100,
            "twitterid": "884075929416470528",
            "url": "http://to.pbs.org/2u6w5Oc"
        }, {
            "_id": "59f863209b21b3526e643d55",
            "date_month": "2017-07",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/RTS10UKO-1024x675.jpg",
            "origin": "newshour",
            "title": "Donald Trump Jr. retains New York-based lawyer",
            "ts": 1499730000,
            "twitterid": "884557851527528448",
            "url": "http://to.pbs.org/2tHl8iV"
        }, {
            "_id": "59f863209b21b3526e643d5b",
            "date_month": "2017-07",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/RTSP0VT-1024x723.jpg",
            "origin": "newshour",
            "title": "Trump Jr. admits he wanted info on Clinton from Russian",
            "ts": 1499778120,
            "twitterid": "884759803268141057",
            "url": "http://to.pbs.org/2sWrHkB"
        }], [{
            "_id": "59f863209b21b3526e643ea1",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/RTS195QB-1024x683.jpg",
            "origin": "newshour",
            "title": "Senate confirms Wray as FBI director",
            "ts": 1501633200,
            "twitterid": "892540449964961792",
            "url": "http://to.pbs.org/2vqp37L"
        }, {
            "_id": "59f863559b21b3529e578d78",
            "date_month": "2017-08",
            "image": "https://media.npr.org/assets/img/2017/08/03/gettyimages-699354966_wide-e35f8294d8d578df82eee242b935df36657df4cd.jpg?s=1400",
            "origin": "npr",
            "title": "Source: Mueller Using D.C. Grand Jury In Russia Probe",
            "ts": 1501796880,
            "twitterid": "893227088492326913",
            "url": "http://n.pr/2fdbT6S"
        }, {
            "_id": "59f863209b21b3526e643ebd",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/08/RTX3BYN4-1024x683.jpg",
            "origin": "newshour",
            "title": "Senators move to protect special counsel in Russia probe",
            "ts": 1501772400,
            "twitterid": "893124300189777920",
            "url": "http://to.pbs.org/2vwlMU7"
        }, {
            "_id": "59f863209b21b3526e643fc2",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/04/RTX33X7G-1024x683.jpg",
            "origin": "newshour",
            "title": "Founder of firm tied to Trump dossier meets with Senate committee in Russia probe",
            "ts": 1503460800,
            "twitterid": "900205963050758144",
            "url": "http://to.pbs.org/2w1G2e1"
        }, {
            "_id": "59f863209b21b3526e643eca",
            "date_month": "2017-08",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/08/RTS1427I-1024x683.jpg",
            "origin": "newshour",
            "title": "Can Congress protect special counsel Mueller from being fired?",
            "ts": 1501806000,
            "twitterid": "893265226669228032",
            "url": "http://to.pbs.org/2u89j90"
        }], [{
            "_id": "59f863209b21b3526e644184",
            "date_month": "2017-09",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2016/03/RTR3VDKM-1024x683.jpg",
            "origin": "newshour",
            "title": "House panel demands details on Trump aides\u2019 private emails",
            "ts": 1506453300,
            "twitterid": "912757415245889536",
            "url": "http://to.pbs.org/2fpfg7S"
        }, {
            "_id": "59f863559b21b3529e579195",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/09/21/gettyimages-630608172_wide-dbc9a3e8569bb93273cb3eab8c4135be67876c78.jpg?s=1400",
            "origin": "npr",
            "title": "The Next Big Focus In The Russia Investigations: Social Media",
            "ts": 1506078120,
            "twitterid": "911183948046389249",
            "url": "http://n.pr/2fFzw5G"
        }, {
            "_id": "59f863559b21b3529e5790e4",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/09/13/ap_17151804685202flynn_wide-0c789d540903fd7d4913455a7207cf209f8570a5.jpg?s=1400",
            "origin": "npr",
            "title": "House Dems: Michael Flynn May Have Lobbied For Nuclear Deal Inside White House",
            "ts": 1505319420,
            "twitterid": "908001660320059392",
            "url": "http://n.pr/2eVGdje"
        }, {
            "_id": "59f863559b21b3529e57907b",
            "date_month": "2017-09",
            "image": "https://media.npr.org/assets/img/2017/09/08/ap_17160511417543_wide-9ffc2ba72d4f6b530d12bd84f5257d694164094f.jpg?s=1400",
            "origin": "npr",
            "title": "Facebook Acknowledges Russian Ads In 2016 Election. Will Investigations Follow?",
            "ts": 1504888080,
            "twitterid": "906192512754352130",
            "url": "http://n.pr/2vL5za6"
        }, {
            "_id": "59f863209b21b3526e64413a",
            "date_month": "2017-09",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/trumpwave-1024x683.jpg",
            "origin": "newshour",
            "title": "Mueller requests documents from White House in Russia probe",
            "ts": 1505952420,
            "twitterid": "910656684204466177",
            "url": "http://to.pbs.org/2fBDagE"
        }], [{
            "_id": "59f8653d9b21b3535e203635",
            "date_month": "2017-10",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/10/RTS1HQFY-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "Where is Mueller\u2019s probe headed? Indictments and surprise plea agreement offer clues",
            "ts": 1509381000,
            "twitterid": 925172975179108352,
            "url": "https://www.pbs.org/newshour/show/where-is-muellers-probe-headed-indictments-and-surprise-plea-agreement-offer-clues-short-headline-indictments-offer-clues-about-muellers-probe"
        }, {
            "_id": "59f864d89b21b3531fd10ed7",
            "date_month": "2017-10",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/10/RTX2M1R2-1024x683.jpg",
            "origin": "newshour",
            "title": "A lot happened in the Russia investigation today. Here\u2019s what you need to know",
            "ts": 1509393600,
            "twitterid": "925089940358103040",
            "url": "https://www.pbs.org/newshour/politics/a-lot-happened-in-the-russia-investigation-today-heres-what-you-need-to-know"
        }, {
            "_id": "59f8653d9b21b3535e203633",
            "date_month": "2017-10",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/10/RTS1HOZ1-1024x697.jpg",
            "origin": "PBS NewsHour",
            "title": "Trump says Clinton should be the focus of the Russia probe. Here are the facts behind those stories",
            "ts": 1509386402,
            "twitterid": 925195633140539392,
            "url": "https://www.pbs.org/newshour/show/trump-says-clinton-should-be-the-focus-of-the-russia-probe-here-are-the-facts-behind-those-stories"
        }, {
            "_id": "59f863209b21b3526e64424e",
            "date_month": "2017-10",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/10/nunes-1024x683.jpg",
            "origin": "newshour",
            "title": "Political research firm behind Trump-Russia dossier subpoenaed by House intelligence committee",
            "ts": 1507677600,
            "twitterid": "917892501456875520",
            "url": "http://to.pbs.org/2yf7Xtw"
        }, {
            "_id": "59f864109b21b352cdf6e36d",
            "date_month": "2017-10",
            "image": "https://media.npr.org/assets/img/2017/10/25/gettyimages-634396314-1-_wide-b35ce95fc2a7aaa2d91ff499332416b32c91a968.jpg?s=1400",
            "origin": "npr",
            "title": "Breaching The 'Wall': Is The White House Encroaching On DOJ Independence?",
            "ts": 1509015060,
            "twitterid": "923502253918605313",
            "url": "http://www.npr.org/2017/10/26/560046507/breaching-the-wall-is-the-white-house-encroaching-on-doj-independence?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=2053"
        }], [{
            "_id": "59fa90359b21b317315479d3",
            "date_month": "2017-11",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/11/RTS1I2A6-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "Facing tougher questions on Russian interference, social media giants vow to do better",
            "ts": 1509555602,
            "twitterid": 925905308081442816,
            "url": "https://www.pbs.org/newshour/show/facing-tougher-questions-on-russian-interference-social-media-giants-vow-to-do-better"
        }, {
            "_id": "5a09896d9b21b33c49ed3c23",
            "date_month": "2017-11",
            "image": "https://media.npr.org/assets/img/2017/11/11/gettyimages-869389212sessions_wide-28cfb8f86fdb2498dafd9939521730abaa3795e1.jpg?s=1400",
            "origin": "NPR",
            "title": "The Russia Investigations: Sessions Under Pressure; More Questions For Trump Aides",
            "ts": 1510473002,
            "twitterid": 929753162751262720,
            "url": "https://www.npr.org/2017/11/12/563102541/the-russia-investigations-sessions-under-pressure-more-questions-for-trump-aides?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=2040"
        }, {
            "_id": "5a0286ad9b21b3a808e02c08",
            "date_month": "2017-11",
            "image": "https://media.npr.org/assets/img/2017/11/07/gettyimages-869515864page_wide-8bd1be53d21c830171690c2f0e008b8171bdfbf7.jpg?s=1400",
            "origin": "NPR",
            "title": "Carter Page Tells House Intel Panel He Spoke To Sessions About Russia Contacts",
            "ts": 1510049592,
            "twitterid": 927977251827781632,
            "url": "https://www.npr.org/2017/11/07/562537269/inquiry-widens-following-disclosure-of-trump-aides-told-about-russia-contacts?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=202807"
        }, {
            "_id": "5a09896d9b21b33c49ed3c39",
            "date_month": "2017-11",
            "image": "https://media.npr.org/assets/img/2017/11/11/trump-putin_wide-39db35f7b5c6280dd325f27b2ad36d9e843aea15.jpg?s=1400",
            "origin": "NPR",
            "title": "Trump: Putin Again Denied Interfering In Election And 'I Really Believe' He Means It",
            "ts": 1510375086,
            "twitterid": 929342473867952129,
            "url": "https://www.npr.org/sections/thetwo-way/2017/11/11/563481331/trump-putin-issue-joint-statement-on-defeating-syria?utm_source=dlvr.it&utm_medium=twitter"
        }, {
            "_id": "59fa90359b21b317315479ff",
            "date_month": "2017-11",
            "image": "https://media.npr.org/assets/img/2017/11/01/ap_17305759059815house_wide-717964c6150d2d077c3075f9e7388bbaf400d950.jpg?s=1400",
            "origin": "NPR",
            "title": "How Russian-Backed Agitation Online Spilled Into The Real World In 2016",
            "ts": 1509530043,
            "twitterid": 925798105072717825,
            "url": "http://www.npr.org/2017/11/01/560481387/how-russian-backed-agitation-online-spilled-into-the-real-world-in-2016?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=202801"
        }], [{
            "_id": "5a249015421aa91e91ee176a",
            "date_month": "2017-12",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/12/RTX3KWJT-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "Trump lashes out at own FBI in a series of tweets",
            "ts": 1512327602,
            "twitterid": 937396022543728641,
            "url": "https://www.pbs.org/newshour/politics/trump-lashes-out-at-own-fbi-in-a-series-of-tweets"
        }, {
            "_id": "5a29d62f421aa96a3ccc1894",
            "date_month": "2017-12",
            "image": "https://d3i6fh83elv35t.cloudfront.net/newshour/app/uploads/2017/07/RTX3B5NJ-1024x725.jpg",
            "origin": "PBS NewsHour",
            "title": "WATCH: Christopher Wray defends FBI against Trump\u2019s tweets",
            "ts": 1512681301,
            "twitterid": 938879544550940672,
            "url": "https://www.pbs.org/newshour/politics/christopher-wray-to-testify-before-congress-while-defending-fbi-and-his-job?v=2"
        }, {
            "_id": "5a29d62f421aa96a3ccc18a7",
            "date_month": "2017-12",
            "image": "https://media.npr.org/assets/img/2017/12/07/ap_17341650054212wray_wide-38484f460fd62973473af5264618e2d12e1ef0ab.jpg?s=1400",
            "origin": "NPR",
            "title": "FBI Director Christopher Wray Defends His Agency On Capitol Hill",
            "ts": 1512660772,
            "twitterid": 938793439780581378,
            "url": "https://www.npr.org/2017/12/07/568611745/fbi-director-wray-testifies-before-house-judiciary-committee?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=202907"
        }, {
            "_id": "5a403f97421aa954e377772c",
            "date_month": "2017-12",
            "image": "https://d3i6fh83elv35t.cloudfront.net/static/2017/12/RTX3Y05E-1024x683.jpg",
            "origin": "PBS NewsHour",
            "title": "Trump criticizes FBI deputy director as he plans retirement",
            "ts": 1514133673,
            "twitterid": 944971232612581376,
            "url": "https://www.pbs.org/newshour/politics/trump-criticizes-fbi-deputy-director-as-he-plans-retirement"
        }, {
            "_id": "5a40e852421aa97e27c75a4f",
            "date_month": "2017-12",
            "image": "https://media.npr.org/assets/img/2017/12/23/andrewmccabe_wide-2f2d76217996741bf8cfa3da98c9b63851790489.jpg?s=1400",
            "origin": "NPR",
            "title": "Trump Seizes On Reports FBI's Deputy Director Plans To Retire In Early 2018",
            "ts": 1514181780,
            "twitterid": 945173008770928640,
            "url": "https://www.npr.org/2017/12/23/573214452/trump-seizes-on-reports-fbis-deputy-director-plans-to-retire-in-early-2018?utm_source=twitter.com&utm_medium=social&utm_campaign=npr&utm_term=nprnews&utm_content=2053"
        }]]
    }];

    return trump_result;
}

/***/ }),

/***/ "zDP6":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.init_render = init_render;

var _litHtml = __webpack_require__("v2F8");

function init_render() {
    var getpathparam = function getpathparam(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(url);
        return results == null ? null : results[1];
    };

    if (getpathparam('type') == 'korea') {
        document.querySelector('.navbox-currentpath').textContent = 'East Asia/Korea';

        new Promise(function (resolve) {
            new Promise(function(resolve) { resolve(); }).then((function (require) {
                resolve(__webpack_require__("ddWn"));
            }).bind(null, __webpack_require__)).catch(__webpack_require__.oe);
        }).then(function (module) {
            module.init_render();
        });
    }
}

/***/ })

});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,